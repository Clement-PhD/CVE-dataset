use github_requester::github_get_request;
use normalize_dataset::normalized_data::normalized_url::github_url::commit::GithubCommitUrl;
use normalize_dataset::normalized_data::normalized_url::github_url::pull_request::GithubPullRequestUrl;
use normalize_dataset::normalized_data::normalized_url::github_url::GithubUrl;
use normalize_dataset::normalized_data::normalized_url::unknown_url::UnknownUrl;
use normalize_dataset::normalized_data::normalized_url::NormalizedUrl;

use crate::error::DownloadError;

use self::patched_file::{FileStatus, PatchedFile};

pub mod patched_file;
pub mod file_warnings;

/// Trait to download files and patch
pub trait GetFilesInfoTrait {
    fn can_get_files_info(&self) -> bool {
        false
    }


    /// get files info from the url
    fn get_files_info(&self) -> Result<Vec<PatchedFile>, DownloadError>{
        unimplemented!("get_files_info not implemented for this url")
    }
    
}

impl GetFilesInfoTrait for NormalizedUrl {
    fn can_get_files_info(&self) -> bool {
        match self {
            NormalizedUrl::GithubUrl(url) => url.can_get_files_info(),
            NormalizedUrl::UnknownUrl(url) => url.can_get_files_info(),
        }
    }

    fn get_files_info(&self) -> Result<Vec<PatchedFile>, DownloadError> {
        match self {
            NormalizedUrl::GithubUrl(url) => url.get_files_info(),
            NormalizedUrl::UnknownUrl(url) => url.get_files_info(),
        }
    }
}

impl GetFilesInfoTrait for GithubUrl {
    fn can_get_files_info(&self) -> bool {
        match self {
            GithubUrl::PullRequest(url) => url.can_get_files_info(),
            GithubUrl::Commit(url) => url.can_get_files_info(),
        }
    }

    fn get_files_info(&self) -> Result<Vec<PatchedFile>, DownloadError> {
        match self {
            GithubUrl::PullRequest(url) => url.get_files_info(),
            GithubUrl::Commit(url) => url.get_files_info(),
        }
    }
}

// --------------------------------- github pr ---------------------------------

impl GetFilesInfoTrait for GithubPullRequestUrl {
    fn can_get_files_info(&self) -> bool {
        true
    }

    fn get_files_info(&self) -> Result<Vec<PatchedFile>, DownloadError> {
        let mut files = Vec::new();
        let file_url = format!("repos/{}/pulls/{}/files", self.get_project(), self.get_number());

        let response : serde_json::Value = github_get_request::<serde_json::Value>(&file_url)?
            .ok_or(DownloadError::ResponseError(reqwest::StatusCode::NOT_FOUND, "No files found".to_string()))?;

        for file_data in response.as_array().unwrap() {
            let file_name = file_data["filename"].as_str().unwrap().to_string();
            let status : FileStatus = file_data["status"].as_str().unwrap().parse().unwrap();
            
            let file_url = if file_data["raw_url"].is_null() {
                None
            } else {
                Some(file_data["raw_url"].as_str().unwrap())
            };
            let file_patch = if file_data["patch"].is_null() {
                None
            } else {
                Some(file_data["patch"].as_str().unwrap())
            };

            let file = PatchedFile::new(file_name.as_str(), file_url, file_patch, status);
            files.push(file);
        }


        Ok(files)
    }
}


// --------------------------------- github commit ---------------------------------

impl GetFilesInfoTrait for GithubCommitUrl {
    fn can_get_files_info(&self) -> bool {
        true
    }

    fn get_files_info(&self) -> Result<Vec<PatchedFile>, DownloadError> {
        let mut files = Vec::new();
        let file_url = format!("repos/{}/commits/{}", self.get_project(), self.get_sha());

        let response : serde_json::Value = github_get_request::<serde_json::Value>(&file_url)?
            .ok_or(DownloadError::ResponseError(reqwest::StatusCode::NOT_FOUND, "No files found".to_string()))?;
        if !response["files"].is_array() {
            return Err(DownloadError::ResponseError(reqwest::StatusCode::NOT_FOUND, "No files found".to_string()));
        }
        for file_data in response["files"].as_array().unwrap() {
            let file_name = file_data["filename"].as_str().unwrap().to_string();
            let status : FileStatus = file_data["status"].as_str().unwrap().parse().unwrap();
            
            let file_url = format!("https://raw.githubusercontent.com/{}/{}/{}", self.get_project(), self.get_sha(), file_name);
            let file_patch = if file_data["patch"].is_null() {
                None
            } else {
                Some(file_data["patch"].as_str().unwrap())
            };

            let file = PatchedFile::new(file_name.as_str(), Some(&file_url), file_patch, status);
            files.push(file);
        }


        Ok(files)
    }
}


// --------------------------------- unknown url ---------------------------------

impl GetFilesInfoTrait for UnknownUrl {}