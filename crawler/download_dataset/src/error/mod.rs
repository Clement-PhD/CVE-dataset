
use std::fmt::Display;

use github_requester::errors::GithubRequestError;


#[derive(Debug)]
pub enum DownloadError {
    GithubDownloadError(GithubRequestError),
    RequestError(reqwest::Error),
    ResponseError(reqwest::StatusCode, String),
    IoError(std::io::Error),
    JsonError(serde_json::Error),
    ToStringError(std::string::FromUtf8Error),
    DownloadError(String),
}

impl Display for DownloadError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            DownloadError::GithubDownloadError(error) => write!(f, "Github download error: {}", error),
            DownloadError::RequestError(error) => write!(f, "Request error: {}", error),
            DownloadError::ResponseError(status_code, message) => write!(f, "Response error: {}: {}", status_code, message),
            DownloadError::IoError(error) => write!(f, "IO error: {}", error),
            DownloadError::JsonError(error) => write!(f, "Json error: {}", error),
            DownloadError::ToStringError(error) => write!(f, "ToString error: {}", error),
            DownloadError::DownloadError(message) => write!(f, "Download error: {}", message),
        }
    }
}

impl From<String> for DownloadError {
    fn from(error: String) -> Self {
        DownloadError::DownloadError(error)
    }
}

impl From<std::string::FromUtf8Error> for DownloadError {
    fn from(error: std::string::FromUtf8Error) -> Self {
        DownloadError::ToStringError(error)
    }
}


impl From<serde_json::Error> for DownloadError {
    fn from(error: serde_json::Error) -> Self {
        DownloadError::JsonError(error)
    }
}

impl From<std::io::Error> for DownloadError {
    fn from(error: std::io::Error) -> Self {
        DownloadError::IoError(error)
    }
}


impl From<reqwest::Error> for DownloadError {
    fn from(error: reqwest::Error) -> Self {
        DownloadError::RequestError(error)
    }
}

impl From<GithubRequestError> for DownloadError {
    fn from(error: GithubRequestError) -> Self {
        DownloadError::GithubDownloadError(error)
    }
}