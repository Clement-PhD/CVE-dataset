use std::fs;
use std::path::Path;

use log::info;
use rust_utils::logger::common_logger::init_logger;
use rust_utils::utils::zip_dir;
use crate::params::argv::get_program_args;
use crate::params::remove_bar;
use crate::pipeline::download_cve;

use normalize_dataset::normalized_data::{NormalizedDataset, NormalizedSampleTrait};

mod params;
mod pipeline;
mod download;
mod error;
mod utils;



fn main() -> Result<(), Box<dyn std::error::Error>> {
    dotenv::dotenv().ok();
    init_logger();
    let args = get_program_args();
    info!("ðŸš€ Start downloading dataset.");

    let token = std::env::var("API_TOKEN");
    if token.is_err() {
        panic!("No token found in environment variables. Please set a API_TOKEN variable with a valid github token.");
    }
    let token = token.unwrap();
    //info!("Token found in environment variables ({}).", token);
    github_requester::set_github_token(token);

    let normalized_dataset : NormalizedDataset = serde_json::from_reader(std::fs::File::open(args.normalized_dataset)?)?;
    info!("Dataset summary: {}", normalized_dataset.summary());

    let output_folder_path_o = Path::new(&args.output_folder_path);

    let mut cves = normalized_dataset.cve_samples.clone();
    let nb_cves = cves.len();
    // filter out the zip files
    cves = cves.into_iter().filter(|cve| {
        let cve_id = cve.get_id();
        let output_cve_folder_zip_path_o = output_folder_path_o.join(format!("{}.zip", cve_id.as_str()));
        !output_cve_folder_zip_path_o.exists()
    }).collect();

    info!("Exclude {} cves that are already downloaded", nb_cves - cves.len());

    cves.sort_by(|a, b| a.get_id().cmp(&b.get_id()));

    let bar = params::new_bar(cves.len() as u64);


    for cve in cves {
        let cve_id = cve.get_id();
        bar.set_message(format!("Downloading cve {}", cve_id));
        let output_cve_folder_path = output_folder_path_o.join(cve_id.as_str());
        let output_cve_folder_zip_path_o = output_folder_path_o.join(format!("{}.zip", cve_id.as_str()));
        // skip if the zip already exists
        if output_cve_folder_zip_path_o.exists() {
            params::info(format!("Skipping cve {} because the zip already exists.", cve_id));
            bar.inc(1);
            continue;
        }

        // clean the folder if it exists
        if output_cve_folder_path.exists() {
            fs::remove_dir_all(&output_cve_folder_path)?;
        }
        let downloaded = download_cve(&cve, &output_cve_folder_path);

        if downloaded {
            params::info(format!("Zipping cve {}, don't interrupt please", cve_id));
            // zip the folder
            zip_dir(&output_cve_folder_path, &output_cve_folder_zip_path_o)?;
            params::info(format!("Zipped cve {}", cve_id));
        }
        // delete the folder
        if output_cve_folder_path.exists() {
            fs::remove_dir_all(&output_cve_folder_path)?;
        }

        bar.inc(1);
    }

    remove_bar(bar);
    

    


    Ok(())
}