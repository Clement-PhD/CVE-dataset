use std::process::{Command, Stdio};

use log::info;

use crate::error::DownloadError;


pub fn apply_patch_reverse(patch_file_path: &str, target_file_path: &str, output_file_path: &str, display_output: bool) -> bool {
    let mut command = Command::new("patch");
    command.arg("-R")
           .arg("--ignore-whitespace")
           .arg("--unified")
           .arg("-i")
           .arg(patch_file_path)
           .arg(target_file_path)
           .arg("-o")
           .arg(output_file_path);

    if display_output {
        command.arg("--verbose");

        info!("Applying patch in reverse with command : patch -R --ignore-whitespace --unified -i {} {} -o {} --verbose", 
            patch_file_path, target_file_path, output_file_path);
    }

    let stdout_handle = if display_output { Stdio::inherit() } else {  Stdio::null() };
    let stderr_handle = if display_output { Stdio::null() } else { Stdio::null() };

    command.stdout(stdout_handle)
           .stderr(stderr_handle);

    match command.status() {
        Ok(status) => status.success(),
        Err(_) => false,
    }
}

pub fn download_file(url: &str) -> Result<String, DownloadError> {
    // Make a GET request to the provided URL
    let response = reqwest::blocking::get(url)?;

    // Check if the response status code is 200 OK
    if response.status().is_success() {
        // Read the response body as string
        let content = response.text()?;
        

        Ok(content)
    } else {
        // If the response status code is not 200 OK, return an error
        Err(DownloadError::ResponseError(response.status(), response.text()?))
    }
}