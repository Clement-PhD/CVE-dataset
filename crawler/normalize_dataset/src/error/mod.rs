use std::fmt::Display;

use crate::normalized_data::normalized_url::UrlParsingError;
use crate::normalized_data::security_id::{SecurityId, SecurityIdParsingError};
use crate::normalized_data::{NormalizedSampleTrait, NormalizedCveSample};

/// Common error
#[derive(Debug)]
pub enum CommonError {
    NormalizedError(NormalizedError),
    NormalizedMixError(NormalizedMixError<NormalizedCveSample>),
}

impl From<NormalizedError> for CommonError {
    fn from(error: NormalizedError) -> Self {
        CommonError::NormalizedError(error)
    }
}

impl From<NormalizedMixError<NormalizedCveSample>> for CommonError {
    fn from(error: NormalizedMixError<NormalizedCveSample>) -> Self {
        CommonError::NormalizedMixError(error)
    }
}

impl Display for CommonError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            CommonError::NormalizedError(error) => {
                write!(f, "{}", error)
            },
            CommonError::NormalizedMixError(error) => {
                write!(f, "{}", error)
            },
        }
    }
}



/// error which can be occured when normalizing a dataset
#[derive(Debug)]
pub enum NormalizedError {
    /// Error when parsing a cve id
    CveParsingError(SecurityIdParsingError),
    /// Error when parsing a url
    UrlParsingError(UrlParsingError),
    /// Error when the url is empty
    NoUrl,
    /// Error when the cve id is empty
    NoCveId,
}

impl From<SecurityIdParsingError> for NormalizedError {
    fn from(error: SecurityIdParsingError) -> Self {
        NormalizedError::CveParsingError(error)
    }
}

impl From<UrlParsingError> for NormalizedError {
    fn from(error: UrlParsingError) -> Self {
        NormalizedError::UrlParsingError(error)
    }
}

impl Display for NormalizedError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            NormalizedError::CveParsingError(error) => {
                write!(f, "{}", error)
            },
            NormalizedError::UrlParsingError(error) => {
                write!(f, "{}", error)
            },
            NormalizedError::NoUrl => {
                write!(f, "No url found")
            },
            NormalizedError::NoCveId => {
                write!(f, "No cve id found")
            },
        }
    }
}


/// error which can be occured when mixing two normalized dataset
#[derive(Debug)]
pub enum NormalizedMixError<T>
where
    T: NormalizedSampleTrait + Sized
{
    /// Error when the cve id is not the same
    NotSameCveId(T, T, SecurityId, SecurityId),
}


impl<T> Display for NormalizedMixError<T>
where
    T: NormalizedSampleTrait + Sized
{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            NormalizedMixError::NotSameCveId(normalized1, normalized2, cve_id1, cve_id2) => {
                write!(f, "CVE id mismatch between {} and {} (cve 1 : {}, cve 2 : {})", normalized1.get_id(), normalized2.get_id(), cve_id1, cve_id2)
            },
        }
    }
}