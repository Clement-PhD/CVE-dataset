use log::warn;
use serde_derive::{Deserialize, Serialize};

use crate::error::NormalizedError;
use crate::normalized_data::normalized_url::NormalizedUrl;
use crate::normalized_data::{NormalizedSampleTrait, NormalizedCveSample};
use crate::utils::parse_python_set;




#[derive(Debug, Deserialize, Serialize)]
pub struct CveSecurityPatchSampleFromCsv {

    pub cve_id : String,
    pub project : String,
    pub sha : String,
    pub dataset : String,
    pub cwe_id : String,
    pub vuln_type : String,
    pub score : Option<f64>,
    pub github : String,
    pub summary : String,
    pub language : String,
    pub vulnerable : String,
    pub message : String,
    pub author : String,
    pub date : String,
    pub comments : String,
    pub files : String,
    pub parents : String,
    pub ext_files : String,
    pub lang : String,
}

impl NormalizedSampleTrait for CveSecurityPatchSampleFromCsv {
    fn normalized(&self) -> Result<NormalizedCveSample, NormalizedError> {
        let url = NormalizedUrl::from_project_and_sha_github(self.project.as_str(), self.sha.as_str(), None)?.into();
        NormalizedCveSample::new(
            self.cve_id.clone(),
            vec![url]
        )
    }

    fn get_id(&self) -> String {
        self.cve_id.clone()
    }
}


#[derive(Debug, Deserialize, Serialize)]
pub struct CveOsvSampleFromCsv {
    pub ecosystem : String,
    pub vuln_id : String,
    pub summary : String,
    pub details : String,
    pub aliases : String,
    pub modified_date : String,
    pub published_date : String,
    pub severity : String,
    pub score : Option<f64>,
    pub cwe_id : String,
    pub refs : String,
    pub introduced : String,
    pub code_refs : String,
    pub commits : String,

}

impl NormalizedSampleTrait for CveOsvSampleFromCsv {
    fn normalized(&self) -> Result<NormalizedCveSample, NormalizedError> {
        let commits : Vec<NormalizedUrl> = parse_python_set(
            &self.commits
        ).unwrap().into_iter().filter_map(|s| {
            let commit = NormalizedUrl::from_raw(s.as_str());
            match commit {
                Ok(parsed_commit) => Some(parsed_commit),
                Err(e) => {
                    warn!("{}", e);
                    None
                }
            }
        }).collect();

        NormalizedCveSample::new(
            self.vuln_id.clone(),
            commits
        )
    }

    fn get_id(&self) -> String {
        self.vuln_id.clone()
    }
    
}

#[derive(Debug, Deserialize, Serialize)]
pub struct CveNvdSampleFromCsv {
    cve_id : String,
    cwes : String,
    description : String,
    severity : String,
    exploitability : Option<f64>,
    impact : Option<f64>,
    published_date : String,
    last_modified_date : String,
    refs : String,
    code_refs : String,
    commits : String,
}

impl NormalizedSampleTrait for CveNvdSampleFromCsv {
    fn normalized(&self) -> Result<NormalizedCveSample, NormalizedError> {
        let commits : Vec<NormalizedUrl> = parse_python_set(
            &self.commits
        ).unwrap().into_iter().filter_map(|s| {
            let commit = NormalizedUrl::from_raw(s.as_str());
            match commit {
                Ok(parsed_commit) => Some(parsed_commit),
                Err(e) => {
                    warn!("{}", e);
                    None
                }
            }
        }).collect();
        

        NormalizedCveSample::new(
            self.cve_id.clone(),
            commits
        )
    }

    fn get_id(&self) -> String {
        self.cve_id.clone()
    }
    
}
