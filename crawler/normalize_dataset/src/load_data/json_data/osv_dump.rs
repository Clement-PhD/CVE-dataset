use serde_derive::{Deserialize, Serialize};

use crate::error::NormalizedError;
use crate::normalized_data::normalized_url::NormalizedUrl;
use crate::normalized_data::{NormalizedCveSample, NormalizedSampleTrait};

#[derive(Debug, Deserialize, Serialize)]
pub struct OsvDumpSample {
    introduction_commit_hash: String,
    fixed_commit_hash: Option<String>,
    last_affected_hash: Option<String>,
    limit_hash: Option<String>,
    vulnerability_id: String,
    repo_url: String,
}


impl NormalizedSampleTrait for OsvDumpSample {
    fn normalized(&self) -> Result<NormalizedCveSample, NormalizedError> {
        if self.fixed_commit_hash.is_none() {
            return Err(NormalizedError::NoUrl);
        }
        let url = NormalizedUrl::from_project_and_sha(self.repo_url.as_str(), self.fixed_commit_hash.as_ref().unwrap(), None)?.into();
        NormalizedCveSample::new(
            self.vulnerability_id.clone(),
            vec![url]
        )
    }

    fn get_id(&self) -> String {
        self.vulnerability_id.clone()
    }
}