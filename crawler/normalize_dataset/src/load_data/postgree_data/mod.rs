use std::fmt::Debug;
use std::marker::PhantomData;

use log::warn;

use crate::error::CommonError;
use crate::normalized_data::dataset::Dataset;
use crate::normalized_data::{NormalizedDataset, NormalizedDatasetTrait, NormalizedSampleTrait};

pub mod opencve;

pub trait FromPostgreeRow {
    fn from_row(row : &postgres::Row) -> Self;
}


#[derive(Debug)]
pub struct DatasetPostgreeDef<SampleType>
where
    SampleType: NormalizedSampleTrait + FromPostgreeRow + Debug 
{
    dataset : Dataset,
    db_name : String,
    host : String,
    port : u16,
    user : String,
    password : String,
    statement : String,
    _phantom : PhantomData<SampleType>,
}

impl<SampleType> DatasetPostgreeDef<SampleType>
where
    SampleType: NormalizedSampleTrait + FromPostgreeRow + Debug 
{
    pub fn new(db_name : &str, host : &str, port : u16, user : &str, password : &str, statement : &str, dataset : Dataset) -> Self {
        Self {
            dataset,
            db_name : db_name.to_string(),
            host : host.to_string(),
            port,
            user : user.to_string(),
            password : password.to_string(),
            statement : statement.to_string(),
            _phantom : PhantomData,
        }
    }

    pub fn db_name(&self) -> &str {
        self.db_name.as_str()
    }

    pub fn host(&self) -> &str {
        self.host.as_str()
    }

    pub fn port(&self) -> u16 {
        self.port
    }

    pub fn user(&self) -> &str {
        self.user.as_str()
    }

    pub fn password(&self) -> &str {
        self.password.as_str()
    }

    pub fn statement(&self) -> &str {
        self.statement.as_str()
    }
}


impl<SampleType> NormalizedDatasetTrait for DatasetPostgreeDef<SampleType> 
where 
    SampleType: NormalizedSampleTrait + FromPostgreeRow + Debug
{
    fn normalize_dataset(&self) -> Result<(NormalizedDataset, Vec<CommonError>), Box<dyn std::error::Error>> {
        let mut normalized_dataset = NormalizedDataset::new();
        let mut errors = Vec::new();

        let conn_str = format!("host={} user={} password={} port={} dbname={}", self.host(), self.user(), self.password(), self.port(), self.db_name());
        let mut conn = postgres::Client::connect(conn_str.as_str(), postgres::NoTls)?;

        for row in &conn.query(self.statement(), &[])? {
            let sample = SampleType::from_row(&row);
            match normalized_dataset.add(&sample) {
                Ok(_) => (),
                Err(e) => {
                    warn!("{}", e);
                    errors.push(e)
                },
            }
        }

        Ok((normalized_dataset, errors))
    }
    
    fn get_dataset(&self) -> Dataset {
        self.dataset.clone()
    }
}