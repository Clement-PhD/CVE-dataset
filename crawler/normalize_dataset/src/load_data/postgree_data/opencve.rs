
use crate::error::NormalizedError;
use crate::normalized_data::normalized_url::NormalizedUrl;
use crate::normalized_data::{NormalizedCveSample, NormalizedSampleTrait};

use super::FromPostgreeRow;




#[derive(Debug)]
pub struct OpenCveSample {
    cve_id : String,
    pull_request_url : String,
}

impl FromPostgreeRow for OpenCveSample {
    fn from_row(row : &postgres::Row) -> Self {
        Self {
            cve_id : row.get(0),
            pull_request_url : row.get(1),
        }
    }
}

impl NormalizedSampleTrait for OpenCveSample {
    fn normalized(&self) -> Result<NormalizedCveSample, NormalizedError> {
        let url = NormalizedUrl::from_raw(self.pull_request_url.as_str())?;
        NormalizedCveSample::new(
            self.cve_id.clone(),
            vec![url]
        )
    }

    fn get_id(&self) -> String {
        self.cve_id.clone()
    }
}