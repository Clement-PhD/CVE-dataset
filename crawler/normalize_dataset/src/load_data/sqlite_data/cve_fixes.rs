use crate::error::NormalizedError;
use crate::normalized_data::normalized_url::NormalizedUrl;
use crate::normalized_data::{NormalizedCveSample, NormalizedSampleTrait};

use super::FromSqliteRow;



#[derive(Debug)]
pub struct CveFixesSampleFromDB {
    cve_id: String,
    commit_hash: String,
    repo_url: String,
}

impl CveFixesSampleFromDB {
    pub fn new(cve_id: String, commit_hash: String, repo_url: String) -> Self {
        Self {
            cve_id,
            commit_hash,
            repo_url,
        }
    }
}

impl FromSqliteRow for CveFixesSampleFromDB {
    fn from_row(row: &sqlite::Row) -> Self {
        Self::new(
            row.read::<&str, _>("cve_id").to_string(),
            row.read::<&str, _>("commit_hash").to_string(),
            row.read::<&str, _>("repo_url").to_string(),
        )
    }
}

impl NormalizedSampleTrait for CveFixesSampleFromDB {
    fn normalized(&self) -> Result<NormalizedCveSample, NormalizedError> {
        let url = NormalizedUrl::from_project_and_sha(self.repo_url.as_str(), self.commit_hash.as_str(), None)?.into();
       NormalizedCveSample::new(
            self.cve_id.clone(),
            vec![url]
        )
    }
    
    fn get_id(&self) -> String {
        self.cve_id.clone()
    }
}
