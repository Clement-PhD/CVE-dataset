use log::debug;

use crate::error::CommonError;
use crate::normalized_data::dataset::Dataset;
use crate::normalized_data::{NormalizedDataset, NormalizedDatasetTrait, NormalizedSampleTrait};

use std::fmt::Debug;
use std::marker::PhantomData;

pub mod cve_fixes;

/// Define the trait to load data from a sqlite row
pub trait FromSqliteRow {
    fn from_row(row : &sqlite::Row) -> Self;
}

/// Define the data needed to load a sqlite dataset
#[derive(Debug)]
pub struct DatasetSqliteDef<SampleType>
where
    SampleType: NormalizedSampleTrait + FromSqliteRow + Debug 
{
    dataset : Dataset,
    db_name : String,
    statement : String,
    _phantom : PhantomData<SampleType>,
}


impl<SampleType> DatasetSqliteDef<SampleType>
where
    SampleType: NormalizedSampleTrait + FromSqliteRow + Debug 
{
    pub fn new(db_name : &str, statement : &str, dataset : Dataset) -> Self {
        Self {
            dataset,
            db_name : db_name.to_string(),
            statement : statement.to_string(),
            _phantom : PhantomData,
        }
    }

    pub fn db_name(&self) -> &str {
        self.db_name.as_str()
    }

    pub fn statement(&self) -> &str {
        self.statement.as_str()
    }
}


impl<SampleType> NormalizedDatasetTrait for DatasetSqliteDef<SampleType> 
where 
    SampleType: NormalizedSampleTrait + FromSqliteRow + Debug 
{
    fn normalize_dataset(&self) -> Result<(NormalizedDataset, Vec<CommonError>), Box<dyn std::error::Error>> {
        let mut normalized_dataset = NormalizedDataset::new();
        let mut errors = Vec::new();

        debug!("Statement : {}", self.statement());

        let conn = sqlite::open(self.db_name())?;
        for row in conn
            .prepare(self.statement())
            .unwrap()
            .into_iter()
            .map(|row| row.unwrap())
        {
            let sample = SampleType::from_row(&row);
            match normalized_dataset.add(&sample) {
                Ok(_) => (),
                Err(e) => errors.push(e),
            }

        }

        Ok((normalized_dataset, errors))
    }


    fn get_dataset(&self) -> Dataset {
        self.dataset.clone()
    }

}