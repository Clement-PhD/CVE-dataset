use std::fmt::Debug;

use normalized_data::{NormalizedDataset, NormalizedDatasetTrait};
use error::CommonError;
use log::info;
use rust_utils::logger::common_logger::init_logger;

use crate::params::argv::get_program_args;
use crate::params::DATASETS;

mod params;
mod normalized_data;
mod error;
mod utils;
mod load_data;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    dotenv::dotenv().ok();
    init_logger();
    let args = get_program_args();
    info!("ðŸš€ Start extraction.");

    let mut normalized_dataset = if let Some(starting_normalized_dataset_path) = args.starting_normalized_dataset_path {
        let file = std::fs::File::open(starting_normalized_dataset_path)?;
        serde_json::from_reader(file)?
    } else {
        NormalizedDataset::new()
    };
    
    info!("Start normalization with {} samples", normalized_dataset.cve_samples.len());

    let mut errors = Vec::new();

    for dataset in DATASETS.iter() {
        aggregate_results(dataset.as_ref(), &mut normalized_dataset, &mut errors)?;

    }
    
    info!("End of normalization");

    info!("{}", normalized_dataset.summary());
    info!("nb of errors : {}", errors.len());

    serde_json::to_writer(std::fs::File::create(args.normalized_dataset_output_path)?, &normalized_dataset)?;
    

    Ok(())
}


fn aggregate_results<DatasetType>(
    new_dataset : &DatasetType,
    normalized_dataset: &mut NormalizedDataset, 
    errors: &mut Vec<CommonError>
) -> Result<(), Box<dyn std::error::Error>>
where 
    DatasetType : NormalizedDatasetTrait + ?Sized
{

    info!("Start normalization of dataset : {}", new_dataset.get_dataset());

    let (new_normalized_dataset, new_errors) = new_dataset.normalize_dataset()?;

    info!("For dataset {} : ", new_dataset.get_dataset());
    info!("nb of errors : {}", new_errors.len());
    info!("nb of sample in the normalized dataset : {}", new_normalized_dataset.cve_samples.len());

    let mix_errors = normalized_dataset.mix(&new_normalized_dataset);
    errors.extend(new_errors);
    errors.extend(mix_errors.into_iter().map(|e| {
        CommonError::NormalizedMixError(e)
    }));

    Ok(())
}