use std::fmt::Display;

use regex::Regex;
use serde_derive::{Serialize, Deserialize};

use crate::normalized_data::normalized_url::{UrlParsingError, PROJECT_RE};



#[derive(Debug, Deserialize, Serialize, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum GithubCommitUrlType {
    Normal,
    PullRequest(usize),
}



#[derive(Debug, Deserialize, Serialize, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct GithubCommitUrl {
    sha: String,
    /// or github id (owner/name)
    projet: String,
    type_: GithubCommitUrlType,
    diff_hash: Option<String>
}

impl GithubCommitUrl {
    /// Create a new GithubCommitUrl with a normal commit
    /// project: the github id (owner/name)
    pub fn new(projet: String, sha: String, diff : Option<String>) -> Result<GithubCommitUrl, UrlParsingError> {
        let sha = sha.trim().to_string();
        let projet = projet.trim().to_string();

        if sha.len() < 3 || sha.len() > 40 {
            return Err(UrlParsingError::InvalidSha(sha));
        }

        let project_re = Regex::new(PROJECT_RE).unwrap();
        if !project_re.is_match(&projet) {
            return Err(UrlParsingError::InvalidProject(projet));
        }

        // clean project if needed
        /*let re = Regex::new(r"^https?:\/\/(?:www.)?github\.com\/([^\/]+)\/([^\/]+)\/?$").unwrap();
        if let Some(captures) = re.captures(&projet) {
            let owner = captures.get(1).unwrap().as_str();
            let name = captures.get(2).unwrap().as_str();
            return Ok(GithubCommitUrl {
                sha,
                projet: format!("{}/{}", owner, name),
                type_: GithubCommitUrlType::Normal,
                diff_hash: diff
            });
        }*/



        Ok(GithubCommitUrl {
            sha : sha,
            projet : projet,
            type_: GithubCommitUrlType::Normal,
            diff_hash: diff
        })
    }


    pub fn from_raw(raw : &str) -> Result<GithubCommitUrl, UrlParsingError> {
        let raw = raw.trim();
        if let Ok(url) = Self::from_raw_normal(&raw) {
            return Ok(url);
        }

        if let Ok(url) = Self::from_raw_pull_request(&raw) {
            return Ok(url);
        }

        Err(UrlParsingError::InvalidUrl(raw.to_string()))
    }

    fn from_raw_normal(url: &str) -> Result<GithubCommitUrl, UrlParsingError> {
        // Regular expression to match GitHub commit URLs
        let re = Regex::new(r"^https?:\/\/(?:www.)?github\.com\/([^\/]+)\/([^\/]+)\/\/?commit\/([a-f0-9]{3,40})\/?(#[^\/]+)?").unwrap();
    
        if let Some(captures) = re.captures(url) {
            let project = captures[1].to_string() + "/" + &captures[2];
            let sha = captures[3].to_string();
            let diff = captures.get(4).map(|m| m.as_str().trim_start_matches("#").to_string());
            Ok(GithubCommitUrl::new(project, sha, diff)?)
        } else {
            Err(UrlParsingError::InvalidUrl(url.to_string()))
        }
    }

    fn from_raw_pull_request(url: &str) -> Result<GithubCommitUrl, UrlParsingError> {
        // Regular expression to match GitHub commit URLs
        let re = Regex::new(r"^https?:\/\/(?:www.)?github\.com\/([^\/]+)\/([^\/]+)\/pull\/([0-9]+)\/\/?commits\/([a-f0-9]{3,40})\/?(#[^\/]+)?").unwrap();

        if let Some(captures) = re.captures(url) {
            let project = captures[1].to_string() + "/" + &captures[2];
            let pr = captures[3].parse().unwrap();
            let sha = captures[4].to_string();
            let diff = captures.get(5).map(|m| m.as_str().trim_start_matches("#").to_string());
            Ok(GithubCommitUrl {
                sha,
                projet: project,
                type_: GithubCommitUrlType::PullRequest(pr),
                diff_hash: diff
            })
        } else {
            Err(UrlParsingError::InvalidUrl(url.to_string()))
        }
    }
    
    pub fn get_sha(&self) -> &str {
        &self.sha
    }

    pub fn get_project(&self) -> &str {
        &self.projet
    }

    pub fn get_type(&self) -> &GithubCommitUrlType {
        &self.type_
    }

    pub fn get_diff(&self) -> Option<&str> {
        self.diff_hash.as_deref()
    }
}


impl Display for GithubCommitUrl {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let diff = match self.diff_hash {
            Some(ref diff) => format!("#{})", diff),
            None => "".to_string(),
        };
        match self.type_ {
            GithubCommitUrlType::Normal => write!(f, "https://github.com/{}/commit/{}{}", self.projet, self.sha, diff),
            GithubCommitUrlType::PullRequest(pr) => write!(f, "https://github.com/{}/pull/{}/commits/{}{}", self.projet, pr, self.sha, diff),
        }
    }
}


#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn test_normal_valid_url() {
        let url = "https://github.com/user/repo/commit/c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1";
        let url = GithubCommitUrl::from_raw(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_sha(), "c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1");
        assert!(url.get_diff().is_none());

        match url.get_type() {
            GithubCommitUrlType::Normal => (),
            _ => panic!("Invalid type"),
        }
    }

    #[test]
    fn test_normal_valid_url_with_www() {
        let url = "https://www.github.com/strapi/strapi/commit/2a3f5e988be6a2c7dae5ac22b9e86d579b462f4c";
        let url = GithubCommitUrl::from_raw(url).unwrap();
        assert_eq!(url.get_project(), "strapi/strapi");
        assert_eq!(url.get_sha(), "2a3f5e988be6a2c7dae5ac22b9e86d579b462f4c");
        assert!(url.get_diff().is_none());

        match url.get_type() {
            GithubCommitUrlType::Normal => (),
            _ => panic!("Invalid type"),
        }
    }

    #[test]
    fn test_normal_valid_url_with_diff() {
        let url = "https://github.com/user/repo/commit/c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1#diff-test454652132132";
        let url = GithubCommitUrl::from_raw(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_sha(), "c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1");
        assert!(url.get_diff().is_some());
        assert_eq!(url.get_diff().unwrap(), "diff-test454652132132");

        match url.get_type() {
            GithubCommitUrlType::Normal => (),
            _ => panic!("Invalid type"),
        }
    }

    #[test]
    fn test_normal_valid_url_little_sha() {
        let url = "https://github.com/matrix-org/synapse/commit/cb35df940a";
        let url = GithubCommitUrl::from_raw(url).unwrap();
        assert_eq!(url.get_project(), "matrix-org/synapse");
        assert_eq!(url.get_sha(), "cb35df940a");
        assert!(url.get_diff().is_none());

        match url.get_type() {
            GithubCommitUrlType::Normal => (),
            _ => panic!("Invalid type"),
        }
    }

    #[test]
    fn test_normal_valid_url_with_trailing_slash() {
        let url = "https://github.com/user/repo/commit/c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1/";
        let url = GithubCommitUrl::from_raw(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_sha(), "c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1");
        assert!(url.get_diff().is_none());

        match url.get_type() {
            GithubCommitUrlType::Normal => (),
            _ => panic!("Invalid type"),
        }
    }

    #[test]
    fn test_normal_invalid_url() {
        let url = "https://github.com/user/repo/tree/main";
        
        assert!(GithubCommitUrl::from_raw(url).is_err());
    }

    #[test]
    fn test_normal_invalid_url_with_invalid_sha() {
        let url = "https://github.com/user/repo/commit/invalidsha";
        assert!(GithubCommitUrl::from_raw(url).is_err());
    }

    // pr tests

    #[test]
    fn test_pr_valid_url() {
        let url = "https://github.com/user/repo/pull/123/commits/c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1";
        let url = GithubCommitUrl::from_raw(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_sha(), "c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1");
        assert!(url.get_diff().is_none());

        match url.get_type() {
            GithubCommitUrlType::PullRequest(pr) => assert_eq!(*pr, 123),
            _ => panic!("Invalid type"),
        }
    }

    #[test]
    fn test_pr_valid_url_with_www() {
        let url = "https://www.github.com/user/repo/pull/123/commits/c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1";
        let url = GithubCommitUrl::from_raw(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_sha(), "c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1");
        assert!(url.get_diff().is_none());

        match url.get_type() {
            GithubCommitUrlType::PullRequest(pr) => assert_eq!(*pr, 123),
            _ => panic!("Invalid type"),
        }
    }
    
    #[test]
    fn test_pr_valid_url_with_diff() {
        let url = "https://github.com/user/repo/pull/123/commits/c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1#diff-test454652132132";
        let url = GithubCommitUrl::from_raw(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_sha(), "c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1");
        assert!(url.get_diff().is_some());
        assert_eq!(url.get_diff().unwrap(), "diff-test454652132132");

        match url.get_type() {
            GithubCommitUrlType::PullRequest(pr) => assert_eq!(*pr, 123),
            _ => panic!("Invalid type"),
        }
    }

    #[test]
    fn test_pr_valid_url_little_sha() {
        let url = "https://github.com/matrix-org/synapse/pull/123/commits/cb35df940a";
        let url = GithubCommitUrl::from_raw(url).unwrap();
        assert_eq!(url.get_project(), "matrix-org/synapse");
        assert_eq!(url.get_sha(), "cb35df940a");
        assert!(url.get_diff().is_none());

        match url.get_type() {
            GithubCommitUrlType::PullRequest(pr) => assert_eq!(*pr, 123),
            _ => panic!("Invalid type"),
        }
    }

    #[test]
    fn test_pr_valid_url2() {
        let url = "https://github.com/kubernetes/kubernetes/pull/77874/commits/f228ae3364729caed59087e23c42868454bc3ff4";
        let url = GithubCommitUrl::from_raw(url).unwrap();
        assert_eq!(url.get_project(), "kubernetes/kubernetes");
        assert_eq!(url.get_sha(), "f228ae3364729caed59087e23c42868454bc3ff4");
        assert!(url.get_diff().is_none());
        
        match url.get_type() {
            GithubCommitUrlType::PullRequest(pr) => assert_eq!(*pr, 77874),
            _ => panic!("Invalid type"),
        }
    }

    #[test]
    fn test_pr_valid_url_with_trailing_slash() {
        let url = "https://github.com/user/repo/pull/123/commits/c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1/";
        let url = GithubCommitUrl::from_raw(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_sha(), "c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1");
        assert!(url.get_diff().is_none());
        

        match url.get_type() {
            GithubCommitUrlType::PullRequest(pr) => assert_eq!(*pr, 123),
            _ => panic!("Invalid type"),
        }
    }

    #[test]
    fn test_pr_invalid_url() {
        let url = "https://github.com/user/repo/commits/c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1";
        assert!(GithubCommitUrl::from_raw(url).is_err());
    }

    #[test]
    fn test_pr_invalid_url_with_invalid_sha() {
        let url = "https://github.com/user/repo/pull/123/commits/invalidsha";
        assert!(GithubCommitUrl::from_raw(url).is_err());
    }

    #[test]
    fn test_pr_invalid_url_with_non_numeric_pr() {
        let url = "https://github.com/user/repo/pull/abc/commits/c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1";
        assert!(GithubCommitUrl::from_raw(url).is_err());
    }
}