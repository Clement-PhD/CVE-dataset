
use std::fmt::Display;

use regex::Regex;
use serde_derive::{Serialize, Deserialize};

use crate::normalized_data::normalized_url::{UrlParsingError, PROJECT_RE};


#[derive(Debug, Deserialize, Serialize, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum GithubPullRequestUrlType {
    Normal,
    Diff,
    Patch
}

#[derive(Debug, Deserialize, Serialize, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct GithubPullRequestUrl {
    project: String,
    number: u32,
    type_: GithubPullRequestUrlType,
}

impl Display for GithubPullRequestUrl {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "https://github.com/{}/pull/{}", self.project, self.number)
    }
}

impl GithubPullRequestUrl {
    /// Create a new GithubPullRequestUrl with a project and a number and a type (normal, diff or patch)
    pub fn new(project: String, number: u32, type_ : GithubPullRequestUrlType) -> Result<GithubPullRequestUrl, UrlParsingError> {
        let project = project.trim().to_string();

        let re = Regex::new(PROJECT_RE).unwrap();
        if !re.is_match(&project) {
            return Err(UrlParsingError::InvalidProject(project));
        }

        Ok(GithubPullRequestUrl {
            project,
            number,
            type_
        })
    }

    pub fn from_raw_normal(url: &str) -> Result<GithubPullRequestUrl, UrlParsingError> {
        // Regular expression to match GitHub commit URLs
        let re = Regex::new(r"^https?:\/\/(?:www.)?github\.com\/([^\/]+)\/([^\/]+)\/pull\/([0-9]+)(?:(?:\/files)|(?:\/commits)|(?:\.patch)|(?:\.diff))?\/?(?:#[^\/]+)?$").unwrap();

        if let Some(captures) = re.captures(url) {
            let project = captures[1].to_string() + "/" + &captures[2];
            let pr = captures[3].parse().unwrap();
            GithubPullRequestUrl::new(project, pr, GithubPullRequestUrlType::Normal)
        } else {
            Err(UrlParsingError::InvalidUrl(url.to_string()))
        }
    }

    pub fn get_project(&self) -> &str {
        &self.project
    }

    pub fn get_number(&self) -> u32 {
        self.number
    }
}




#[cfg(test)]
mod tests {

    use super::*;

    // pr tests

    #[test]
    fn test_pr_valid_url() {
        let url = "https://github.com/user/repo/pull/123/";
        let url = GithubPullRequestUrl::from_raw_normal(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_number(), 123);
    }

    #[test]
    fn test_pr_valid_url_with_www() {
        let url = "https://www.github.com/user/repo/pull/123";
        let url = GithubPullRequestUrl::from_raw_normal(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_number(), 123);
    }

  
    #[test]
    fn test_pr_valid_url2() {
        let url = "https://github.com/kubernetes/kubernetes/pull/77874/";
        let url = GithubPullRequestUrl::from_raw_normal(url).unwrap();
        assert_eq!(url.get_project(), "kubernetes/kubernetes");
        assert_eq!(url.get_number(), 77874);
    }

    #[test]
    fn test_pr_valid_url_with_files() {
        let url = "https://github.com/user/repo/pull/123/files";
        let url = GithubPullRequestUrl::from_raw_normal(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_number(), 123);
    }

    #[test]
    fn test_pr_valid_url_with_diff() {
        let url = "https://github.com/user/repo/pull/123.diff";
        let url = GithubPullRequestUrl::from_raw_normal(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_number(), 123);
    }

    #[test]
    fn test_pr_valid_url_with_patch() {
        let url = "https://github.com/user/repo/pull/123.patch";
        let url = GithubPullRequestUrl::from_raw_normal(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_number(), 123);
    }

    #[test]
    fn test_pr_valid_url_with_commits() {
        let url = "https://github.com/user/repo/pull/123/commits";
        let url = GithubPullRequestUrl::from_raw_normal(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_number(), 123);
    }

    #[test]
    fn test_pr_valid_url_with_diese() {
        let url = "https://github.com/user/repo/pull/123/files#issuecomment-48283706";
        let url = GithubPullRequestUrl::from_raw_normal(url).unwrap();
        assert_eq!(url.get_project(), "user/repo");
        assert_eq!(url.get_number(), 123);
    }

    #[test]
    fn test_pr_invalid_url() {
        let url = "https://github.com/user/repo/pull/123/commits/c1ef7c971d0bbf117c3c80f65b5875e2e7b024b1";
        assert!(GithubPullRequestUrl::from_raw_normal(url).is_err());
    }

    #[test]
    fn test_pr_invalid_url_with_invalid_sha() {
        let url = "https://github.com/user/repo/pull/az123/";
        assert!(GithubPullRequestUrl::from_raw_normal(url).is_err());
    }

    #[test]
    fn test_pr_invalid_url_with_non_numeric_pr() {
        let url = "https://github.com/user/repo/pull/";
        assert!(GithubPullRequestUrl::from_raw_normal(url).is_err());
    }
}