
use std::fmt::Display;

use regex::Regex;
use serde_derive::{Serialize, Deserialize};

use super::SecurityIdParsingError;







#[derive(Debug, Deserialize, Serialize, Clone, PartialEq, Eq)]
pub struct CveId {
    year: u32,
    number: u32,
}

impl Display for CveId {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "CVE-{}-{}", self.year, self.number)
    }
}

impl CveId {
    pub fn new_from_raw(cve_id: &str) -> Result<CveId, SecurityIdParsingError> {
        // Regular expression to match CVE IDs
        let re = Regex::new(r"^CVE-(\d{4})-(\d+)$").unwrap();

        if let Some(captures) = re.captures(cve_id) {
            let year = captures[1].parse().unwrap();
            let number = captures[2].parse().unwrap();
            Ok(CveId {
                year,
                number,
            })
        } else {
            Err(SecurityIdParsingError::InvalidSecurityId(cve_id.to_string()))
        }
    }
}