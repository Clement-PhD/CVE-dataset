
use std::fmt::Display;

use regex::Regex;
use serde_derive::{Serialize, Deserialize};

use super::SecurityIdParsingError;

#[derive(Debug, Deserialize, Serialize, Clone, PartialEq, Eq)]
pub struct GhsaId {
    id: String,
}

impl Display for GhsaId {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "GHSA-{}", self.id)
    }
}

impl GhsaId {
    pub fn new_from_raw(ghsa_id: &str) -> Result<GhsaId, SecurityIdParsingError> {
        // Regular expression to match GHSA IDs
        let re = Regex::new(r"^GHSA-([a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4})$").unwrap();

        if let Some(captures) = re.captures(ghsa_id) {
            let id = captures[1].to_string();
            Ok(GhsaId {
                id,
            })
        } else {
            Err(SecurityIdParsingError::InvalidSecurityId(ghsa_id.to_string()))
        }
    }
}