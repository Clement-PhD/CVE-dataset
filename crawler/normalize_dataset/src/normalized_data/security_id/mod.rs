use std::fmt::Display;

use serde_derive::{Serialize, Deserialize};

use self::cve_id::CveId;
use self::ghsa_id::GhsaId;
use self::osv_id::OsvId;

pub mod cve_id;
pub mod ghsa_id;
pub mod osv_id;


#[derive(Debug, Deserialize, Serialize, Clone)]
pub enum SecurityIdParsingError {
    InvalidSecurityId(String),
}


impl Display for SecurityIdParsingError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            SecurityIdParsingError::InvalidSecurityId(cve_id) => write!(f, "Invalid security ID: {}", cve_id),
        }
    }
}

#[derive(Debug, Deserialize, Serialize, Clone, PartialEq, Eq)]
pub enum SecurityId {
    CveId(CveId),
    GhsaId(GhsaId),
    OsvId(OsvId),
}

impl Display for SecurityId {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            SecurityId::CveId(cve_id) => write!(f, "{}", cve_id),
            SecurityId::GhsaId(ghsa_id) => write!(f, "{}", ghsa_id),
            SecurityId::OsvId(osv_id) => write!(f, "{}", osv_id),
        }
    }
}

impl SecurityId {
    pub fn new_from_raw(security_id: &str) -> Result<SecurityId, SecurityIdParsingError> {
        if let Ok(cve_id) = CveId::new_from_raw(security_id) {
            return Ok(SecurityId::CveId(cve_id));
        }
        if let Ok(ghsa_id) = GhsaId::new_from_raw(security_id) {
            return Ok(SecurityId::GhsaId(ghsa_id));
        } 
        if let Ok(osv_id) = OsvId::new_from_raw(security_id) {
            return Ok(SecurityId::OsvId(osv_id));
        }
        
        
        Err(SecurityIdParsingError::InvalidSecurityId(security_id.to_string()))
        
    }

    pub fn is_cve_id(&self) -> bool {
        match self {
            SecurityId::CveId(_) => true,
            _ => false,
        }
    }

    pub fn is_ghsa_id(&self) -> bool {
        match self {
            SecurityId::GhsaId(_) => true,
            _ => false,
        }
    }

    pub fn is_osv_id(&self) -> bool {
        match self {
            SecurityId::OsvId(_) => true,
            _ => false,
        }
    }
}