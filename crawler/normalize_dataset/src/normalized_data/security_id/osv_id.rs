






use std::fmt::Display;

use regex::Regex;
use serde_derive::{Serialize, Deserialize};

use super::SecurityIdParsingError;


#[derive(Debug, Deserialize, Serialize, Clone, PartialEq, Eq)]
pub enum OsvType {
    Pysec,
    Osv,
    Go,
    Rustsec
}


impl Display for OsvType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            OsvType::Pysec => write!(f, "PYSEC"),
            OsvType::Osv => write!(f, "OSV"),
            OsvType::Go => write!(f, "GO"),
            OsvType::Rustsec => write!(f, "RUSTSEC")
        }
    }
}

impl OsvType {
    pub fn from_matching_string(type_: &str) -> OsvType {
        match type_ {
            "PYSEC" => OsvType::Pysec,
            "OSV" => OsvType::Osv,
            "GO" => OsvType::Go,
            "RUSTSEC" => OsvType::Rustsec,
            _ => panic!("Invalid OSV type: {}", type_),
        }
    }

    pub fn get_all() -> Vec<OsvType> {
        vec![OsvType::Pysec, OsvType::Osv, OsvType::Go, OsvType::Rustsec]
    }

    pub fn get_matching_regex() -> String {
        let types = OsvType::get_all();
        let mut types_str = String::new();
        for type_ in types {
            types_str.push_str(&format!("(?:{})|", type_));
        }
        types_str.pop();
        types_str
    }
}




#[derive(Debug, Deserialize, Serialize, Clone, PartialEq, Eq)]
pub struct OsvId {
    year: u32,
    number: u32,
    type_: OsvType,
}

impl Display for OsvId {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}-{}-{}", self.type_, self.year, self.number)
    }
}

impl OsvId {
    pub fn new_from_raw(cve_id: &str) -> Result<OsvId, SecurityIdParsingError> {
        let pattern = format!(r"^({})-(\d{{4}})-(\d+)$", OsvType::get_matching_regex());
        // Regular expression to match CVE IDs
        let re = Regex::new(pattern.as_str()).unwrap();

        if let Some(captures) = re.captures(cve_id) {
            let type_ = OsvType::from_matching_string(&captures[1]);
            let year = captures[2].parse().unwrap();
            let number = captures[3].parse().unwrap();
            Ok(OsvId {
                year,
                number,
                type_,
            })
        } else {
            Err(SecurityIdParsingError::InvalidSecurityId(cve_id.to_string()))
        }
    }
}