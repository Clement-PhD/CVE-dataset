use std::collections::HashSet;

use regex::Regex;




pub fn parse_python_set(input: &str) -> Option<HashSet<String>> {
    // test empty set
    if input == "{}" {
        return Some(HashSet::new());
    }

    // Regular expression to match Python set literals
    let re = Regex::new(r#"^\{(?:\s*'([^']+)'\s*)?(?:,\s*'([^']+)'\s*)*}$"#).unwrap();

    // Check if the input matches the regex
    if let Some(captures) = re.captures(input) {
        let set = captures.iter().skip(1).filter_map(|x| x).map(|x| x.as_str().to_string()).collect();
        Some(set)
    } else {
        None
    }
}


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_valid_input() {
        let input = "{'truc1', 'truc2'}";
        let expected_set: HashSet<String> = ["truc1", "truc2"].iter().map(|s| s.to_string()).collect();
        assert_eq!(parse_python_set(input), Some(expected_set));
    }

    #[test]
    fn test_single_valid_input() {
        let input = "{'truc1'}";
        let expected_set: HashSet<String> = ["truc1"].iter().map(|s| s.to_string()).collect();
        assert_eq!(parse_python_set(input), Some(expected_set));
    }

    #[test]
    fn test_valid_input_with_spaces() {
        let input = "{ 'truc1' , 'truc2' }";
        let expected_set: HashSet<String> = ["truc1", "truc2"].iter().map(|s| s.to_string()).collect();
        assert_eq!(parse_python_set(input), Some(expected_set));
    }

    #[test]
    fn test_empty_input() {
        let input = "{}";
        let expected_set: HashSet<String> = HashSet::new();
        assert_eq!(parse_python_set(input), Some(expected_set));
    }

    #[test]
    fn test_invalid_input_missing_braces() {
        let input = "'truc1', 'truc2'";
        assert_eq!(parse_python_set(input), None);
    }

    #[test]
    fn test_invalid_input_missing_single_quote() {
        let input = "{'truc1, 'truc2'}";
        assert_eq!(parse_python_set(input), None);
    }

    #[test]
    fn test_invalid_input_invalid_format() {
        let input = "{truc1, truc2}";
        assert_eq!(parse_python_set(input), None);
    }
}