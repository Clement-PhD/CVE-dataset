import argparse
from typing import List, Tuple
from dotenv import load_dotenv
from tqdm import tqdm

import os
import shutil

from download.download_pull_request import download_pull_request
from download.postgree import PostgreeConnection
from download.pull_request import PullRequest

from utils import zip_folder

load_dotenv()

#PULL_REQUEST_URL = "https://github.com/memcached/memcached/pull/806"
#CVE = "CVE-2021-37519"

DATA_FOLDER = "data/"
BACKUP_FILE = "data.zip"

def get_argv_parser():
    parser = argparse.ArgumentParser(description='Download cve\'s pull request data from Github API')
    parser.add_argument('-k', '--keep-old', action='store_true', help="Keep old data in the data folder, and skip the existing CVEs")
    parser.add_argument('--remove-backup', action='store_true', help="Remove the backup file")
    return parser

if __name__ == "__main__":
    parser = get_argv_parser()
    args = parser.parse_args()


    # cleaning the data folder
    if not args.keep_old:
        if os.path.exists(DATA_FOLDER):
            shutil.rmtree(DATA_FOLDER)
    if args.remove_backup:
        if os.path.exists(BACKUP_FILE):
            os.remove(BACKUP_FILE)
    
    os.makedirs(DATA_FOLDER, exist_ok=True)

    # try to unzip the backup file
    if os.path.exists(BACKUP_FILE):
        print("Unzipping backup file")
        shutil.unpack_archive(BACKUP_FILE, DATA_FOLDER)
        exit(0)
        

    # download the pull request data from the Github API
        
    # Get the CVE and Pull Request URL from the database
    postgree_con = PostgreeConnection()

    cve_and_pull_request : List[Tuple[str, str]] = postgree_con.get_cve_and_pull_request()

    with tqdm(total=len(cve_and_pull_request), desc="Initializing") as pbar:
        for result in cve_and_pull_request:
            CVE = result[0]
            PULL_REQUEST_URL = result[1]

            # Update progress bar description with current CVE
            pbar.set_description(f"Processing CVE: {CVE}")

            # get the pull request data from the url if the folder does not exist
            if not os.path.exists(os.path.join(DATA_FOLDER, CVE)):
                pull_request = PullRequest(PULL_REQUEST_URL)
                download_pull_request(CVE, pull_request, DATA_FOLDER)

            # Update the progress bar
            pbar.update(1)


    zip_folder(DATA_FOLDER, BACKUP_FILE)
    


