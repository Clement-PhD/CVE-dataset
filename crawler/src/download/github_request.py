

import requests
import os
import time


class GithubRequests:
    """
    Class to handle requests to Github API
    WARN : this class is not thread-safe
    """

    BASE_API_URL = 'https://api.github.com'
    RATE_LIMIT = 0.1 # seconds to wait between requests

    def __init__(self):
        self.token = self.__get_token()
        print(f"Using token {self.token}")
        self.headers = {
            'Authorization': 'Bearer ' + self.token,
            "X-GitHub-Api-Version" : "2022-11-28"
        }
        self.last_request = time.time()


    def __get_token(self):
        token = os.environ.get('TOKEN')
        if not token:
            raise ValueError('Missing Github token')
        return token
    
    def __wait(self):
        """Wait until the next request can be made"""
        now = time.time()
        if now - self.last_request < GithubRequests.RATE_LIMIT:
            time.sleep(GithubRequests.RATE_LIMIT - (now - self.last_request))

    def get(self, api_path: str, params: dict | None = None, authentification: bool = True):
        """Make a GET request to the Github API and return the JSON response if status code is 200, otherwise return None."""
        self.__wait()
        url = self.BASE_API_URL + api_path
        headers = self.headers if authentification else None
        response = requests.get(url, headers=headers, params=params)
        self.last_request = time.time()

        if response.status_code == 200:
            return response.json()
        else:
            print(f"Failed to get data from {url}, status code: {response.status_code}, response: {response.text}")
            return None

