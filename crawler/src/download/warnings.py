from dataclasses import dataclass
from enum import Enum
import json
import os
from typing import List


class WarningType(Enum):
    NOT_MODIFIED = 1
    CANT_DOWNLOADED = 2
    CANT_PATCHED = 3
    NO_PATCH = 4
    NO_URL = 5

    def to_serializable(self):
        return self.name  # or return self.value, depending on what you want to serialize

    @staticmethod
    def from_serializable(name: str):
        return WarningType[name]

@dataclass
class WarningPayload:
    type: WarningType
    file_name: str
    message: str

    def to_serializable(self):
        return {"type": self.type.to_serializable(), "file_name": self.file_name, "message": self.message}

    @staticmethod
    def from_serializable(data: dict):
        warning_type = WarningType.from_serializable(data['type'])
        return WarningPayload(warning_type, data['file_name'], data['message'])


@dataclass
class CveWarnings:
    cve: str
    warnings: List[WarningPayload]

    def __init__(self, cve: str):
        self.cve = cve
        self.warnings = []

    def add_warning_payload(self, warning: WarningPayload):
        self.warnings.append(warning)

    def add_warning(self, type: WarningType, file_name: str, message: str):
        self.warnings.append(WarningPayload(type, file_name, message))

    def to_serializable(self):
        return {"cve": self.cve, "warnings": [w.to_serializable() for w in self.warnings]}
    
    def get_save_file_path(self, output_data_folder: str):
        return os.path.join(output_data_folder, self.cve, "warnings.json")

    def save(self, output_data_folder: str):
        output_json_file_path = self.get_save_file_path(output_data_folder)
        os.makedirs(os.path.dirname(output_json_file_path), exist_ok=True)

        with open(output_json_file_path, "w") as f:
            json.dump(self.to_serializable(), f, indent=4)
    
    @staticmethod
    def from_serializable(data: dict):
        cve_warnings = CveWarnings(data['cve'])
        for warning_data in data['warnings']:
            warning = WarningPayload.from_serializable(warning_data)
            cve_warnings.warnings.append(warning)
        return cve_warnings
    
    @staticmethod
    def load(file_path: str):
        with open(file_path, "r") as f:
            data = json.load(f)
        return CveWarnings.from_serializable(data)
