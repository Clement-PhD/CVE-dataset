
import argparse
import os
import shutil
from download.warnings import CveWarnings, WarningType

from utils import apply_patch_reverse, list_subdirectories, try_to_fix_patch_file


DATA_FOLDER = "data/"



def get_argv_parser():
    parser = argparse.ArgumentParser(description='Try to fixe the file in the CVEs that are not patched')
    parser.add_argument('--remove_cves', action='store_true', help="Remove the cve folder if the file can't be patched")
    return parser

if __name__ == "__main__":
    parser = get_argv_parser()
    args = parser.parse_args()

    # parcourt all cve folder

    for directory in list_subdirectories(DATA_FOLDER):
        CVE_DIRECTORY_PATH = os.path.join(DATA_FOLDER, directory)

        WARNING_FILE_PATH = os.path.join(CVE_DIRECTORY_PATH, "warnings.json")
        if not os.path.exists(WARNING_FILE_PATH):
            continue

        # load the warnings
        warnings = CveWarnings.load(WARNING_FILE_PATH)

        # parcourt all warnings
        for warning in warnings.warnings:
            # if the warning is not patched
            if warning.type == WarningType.CANT_PATCHED:
                # get the file path
                FIXED_FILE_PATH = os.path.join(CVE_DIRECTORY_PATH, "files", "fixed", warning.file_name)

                # get the patch file path
                PATCH_FILE_PATH = os.path.join(CVE_DIRECTORY_PATH, "files", "patch", warning.file_name + ".patch")
                try_to_fix_patch_file(PATCH_FILE_PATH)

                # get the original file path
                ORIGINAL_FILE_PATH = os.path.join(CVE_DIRECTORY_PATH, "files", "original", warning.file_name)

                patched = apply_patch_reverse(PATCH_FILE_PATH, FIXED_FILE_PATH, ORIGINAL_FILE_PATH, False)

                if patched:
                    print(f"Successfully patched {FIXED_FILE_PATH} with {PATCH_FILE_PATH}\n")
                else:
                    if args.remove_cves:
                        print(f"Removing {CVE_DIRECTORY_PATH} because the file can't be patched")
                        shutil.rmtree(CVE_DIRECTORY_PATH)
                        break


