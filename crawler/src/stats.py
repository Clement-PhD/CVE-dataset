


import argparse
import os
from typing import List, Tuple
from download.postgree import PostgreeConnection
from stats.CVE_stats_summary import CVEStatsSummary
from stats.CVE_stats import CVEStats, Languages


DATA_FOLDER = "data/"

def get_argv_parser():
    parser = argparse.ArgumentParser(description='Make stats from the cve folder and postgree database')
    parser.add_argument('-c', '--clean', action='store_true', help="Clean the stats already computed")
    return parser



def main():
    parser = get_argv_parser()
    args = parser.parse_args()

    # get the stats status and quit if the stats are already computed
    STATS_SUMMARY_PATH = os.path.join(DATA_FOLDER, "stats_summary.json")
    if args.clean and os.path.exists(STATS_SUMMARY_PATH):
        os.remove(STATS_SUMMARY_PATH)

    STATS_SUMMARY_REPORT_PATH = os.path.join(DATA_FOLDER, "stats_summary_report.txt")
    if args.clean and os.path.exists(STATS_SUMMARY_REPORT_PATH):
        os.remove(STATS_SUMMARY_REPORT_PATH)
    
    if os.path.exists(STATS_SUMMARY_PATH):
        stats_summary = CVEStatsSummary.load(STATS_SUMMARY_PATH)
        stats_summary.print_summary()
        return
    
    if os.path.exists(STATS_SUMMARY_REPORT_PATH):
        with open(STATS_SUMMARY_REPORT_PATH, 'r') as f:
            print(f.read())
        return

    # Get the CVE and Pull Request URL from the database
    postgree_con = PostgreeConnection()

    cve_and_pull_request : List[Tuple[str, str]] = postgree_con.get_cve_and_pull_request()

    stats : List[CVEStats] = []
    cve_not_found_to_urls : List[Tuple[str, List[str]]] = []

    for result in cve_and_pull_request:
        CVE = result[0]
        PULL_REQUEST_URL = result[1].split(",")

        
        CVE_FOLDER_PATH = os.path.join(DATA_FOLDER, CVE)

        if not os.path.exists(CVE_FOLDER_PATH):
            cve_not_found_to_urls.append((CVE, PULL_REQUEST_URL))
            continue

        # add the stats file path
        stats_file_path = os.path.join(CVE_FOLDER_PATH, "stats.json")

        if args.clean and os.path.exists(stats_file_path): # if the stats file exists and we want to clean, remove it
            os.remove(stats_file_path)

        if os.path.exists(stats_file_path): # if the stats file exists, load it
            stats.append(CVEStats.load(stats_file_path))
        else: # else create the stats and save it
            cve_stats = CVEStats.create_cve_stats(CVE_FOLDER_PATH, PULL_REQUEST_URL)
            stats.append(cve_stats)
            
            cve_stats.save(stats_file_path)
    
    stats_summary = CVEStatsSummary.create_from_cve_stats(DATA_FOLDER, stats, cve_not_found_to_urls)    
    stats_summary.print_summary(STATS_SUMMARY_REPORT_PATH)
    stats_summary.save(STATS_SUMMARY_PATH)




if __name__ == '__main__':
    main()