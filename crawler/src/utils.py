import os
import subprocess
import zipfile
import requests

def try_to_fix_patch(patch : str):
    # convert all \n to \r\n
    patch = patch.replace("\r\n", "\n")

    if not patch.endswith("\n"):
        patch += "\n"
    
    return patch

def try_to_fix_patch_file(patch_file_path : str):
    content = ""
    with open(patch_file_path, 'r') as f:
        content = f.read()
    
    # convert all \n to \r\n
    content = try_to_fix_patch(content)
    
    with open(patch_file_path, 'w') as f:
        f.write(content)


def download_file(url : str, output_file_path : str):
    """Download a file from an url to an output file"""
    response = requests.get(url)
    if response.status_code == 200:
        with open(output_file_path, 'wb') as file:
            file.write(response.content)
        return True
    else:
        return False
        

def apply_patch_reverse(patch_file_path: str, target_file_path: str, output_file_path: str, display_output: bool = False):
    """Apply a patch in reverse to target file and save it to output file"""
    try:
        additionnal_args = []
        if display_output:
            stdout = subprocess.DEVNULL
            stderr = None
            additionnal_args = ["--verbose"]
        else:
            stdout = subprocess.DEVNULL
            stderr = subprocess.DEVNULL

        subprocess.run(
            ['patch', '-R', "--ignore-whitespace", "--unified", '-i', patch_file_path, target_file_path, '-o', output_file_path] + additionnal_args,
            check=True,
            stdout=stdout,
            stderr= stderr
        )
        return True
    except subprocess.CalledProcessError as e:
        if display_output:
            print(e)
        return False


def list_subdirectories(directory_path : str):
    subdirectories = [d for d in os.listdir(directory_path) if os.path.isdir(os.path.join(directory_path, d))]
    return subdirectories

def zip_folder(folder_to_zip_path : str, output_filename : str):
    """Zip the content of a folder"""
    with zipfile.ZipFile(output_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(folder_to_zip_path):
            for file in files:
                file_path = os.path.join(root, file)
                # Write the file under the path relative to the folder being zipped
                zipf.write(file_path, os.path.relpath(file_path, folder_to_zip_path))