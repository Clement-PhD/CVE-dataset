@@ -1,6 +1,7 @@
 #!/usr/bin/env python
 import os
 import sys
+import re
 import tempfile
 import shutil
 import glob
@@ -11,6 +12,11 @@
 from scripttest import TestFileEnvironment, FoundDir
 from tests.path import Path, curdir, u
 from pip.util import rmtree
+from pip.backwardcompat import ssl
+
+#allow py25 unit tests to work
+if sys.version_info[:2] == (2, 5) and not ssl:
+    os.environ['PIP_INSECURE'] = '1'
 
 pyversion = sys.version[:3]
 
@@ -101,14 +107,19 @@ def install_setuptools(env):
 env = None
 
 
-def reset_env(environ=None, use_distribute=None, system_site_packages=False, sitecustomize=None):
+def reset_env(environ=None,
+              use_distribute=None,
+              system_site_packages=False,
+              sitecustomize=None,
+              insecure=True):
     """Return a test environment.
 
     Keyword arguments:
     environ: an environ object to use.
     use_distribute: use distribute, not setuptools.
     system_site_packages: create a virtualenv that simulates --system-site-packages.
     sitecustomize: a string containing python code to add to sitecustomize.py.
+    insecure: how to set the --insecure option for py25 tests.
     """
 
     global env
@@ -125,6 +136,10 @@ def reset_env(environ=None, use_distribute=None, system_site_packages=False, sit
         #hence, this workaround
         (env.lib_path/'no-global-site-packages.txt').rm()
 
+    if sys.version_info[:2] == (2, 5) and (not ssl) and insecure:
+        #allow py25 tests to work
+        env.environ['PIP_INSECURE'] = '1'
+
     return env
 
 
@@ -186,10 +201,14 @@ def __str__(self):
         def __str__(self):
             return str(self._impl)
 
-    def assert_installed(self, pkg_name, with_files=[], without_files=[], without_egg_link=False, use_user_site=False):
+    def assert_installed(self, pkg_name, editable=True, with_files=[], without_files=[], without_egg_link=False, use_user_site=False):
         e = self.test_env
 
-        pkg_dir = e.venv/ 'src'/ pkg_name.lower()
+        if editable:
+            pkg_dir = e.venv/ 'src'/ pkg_name.lower()
+        else:
+            without_egg_link = True
+            pkg_dir = e.site_packages / pkg_name
 
         if use_user_site:
             egg_link_path = e.user_site / pkg_name + '.egg-link'
@@ -681,6 +700,17 @@ def main():
             cwd=version_pkg_path, expect_stderr=True)
 
 
+def assert_raises_regexp(exception, reg, run, *args, **kwargs):
+    """Like assertRaisesRegexp in unittest"""
+    try:
+        run(*args, **kwargs)
+        assert False, "%s should have been thrown" %exception
+    except Exception:
+        e = sys.exc_info()[1]
+        p = re.compile(reg)
+        assert p.search(str(e)), str(e)
+
+
 if __name__ == '__main__':
     sys.stderr.write("Run pip's tests using nosetests. Requires virtualenv, ScriptTest, mock, and nose.\n")
     sys.exit(1)