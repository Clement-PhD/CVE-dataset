@@ -10,6 +10,7 @@
 from pip.exceptions import CommandError, PreviousBuildDirError
 from pip.req import InstallRequirement, RequirementSet, parse_requirements
 from pip.utils import normalize_path
+from pip.utils.build import BuildDirectory
 from pip.utils.deprecation import RemovedInPip7Warning, RemovedInPip8Warning
 from pip.wheel import WheelBuilder
 from pip import cmdoptions
@@ -157,6 +158,9 @@ def run(self, options, args):
                 RemovedInPip8Warning,
             )
 
+        if options.build_dir:
+            options.build_dir = os.path.abspath(options.build_dir)
+
         with self._build_session(options) as session:
 
             finder = PackageFinder(
@@ -171,63 +175,67 @@ def run(self, options, args):
                 session=session,
             )
 
-            options.build_dir = os.path.abspath(options.build_dir)
-            requirement_set = RequirementSet(
-                build_dir=options.build_dir,
-                src_dir=options.src_dir,
-                download_dir=None,
-                ignore_dependencies=options.ignore_dependencies,
-                ignore_installed=True,
-                session=session,
-                wheel_download_dir=options.wheel_dir
-            )
+            build_delete = (not (options.no_clean or options.build_dir))
+            with BuildDirectory(options.build_dir,
+                                delete=build_delete) as build_dir:
+                requirement_set = RequirementSet(
+                    build_dir=build_dir,
+                    src_dir=options.src_dir,
+                    download_dir=None,
+                    ignore_dependencies=options.ignore_dependencies,
+                    ignore_installed=True,
+                    session=session,
+                    wheel_download_dir=options.wheel_dir
+                )
 
-            # make the wheelhouse
-            if not os.path.exists(options.wheel_dir):
-                os.makedirs(options.wheel_dir)
-
-            # parse args and/or requirements files
-            for name in args:
-                requirement_set.add_requirement(
-                    InstallRequirement.from_line(name, None))
-            for name in options.editables:
-                requirement_set.add_requirement(
-                    InstallRequirement.from_editable(
-                        name,
-                        default_vcs=options.default_vcs
+                # make the wheelhouse
+                if not os.path.exists(options.wheel_dir):
+                    os.makedirs(options.wheel_dir)
+
+                # parse args and/or requirements files
+                for name in args:
+                    requirement_set.add_requirement(
+                        InstallRequirement.from_line(name, None))
+                for name in options.editables:
+                    requirement_set.add_requirement(
+                        InstallRequirement.from_editable(
+                            name,
+                            default_vcs=options.default_vcs
+                        )
                     )
-                )
-            for filename in options.requirements:
-                for req in parse_requirements(
-                        filename,
-                        finder=finder,
-                        options=options,
-                        session=session):
-                    requirement_set.add_requirement(req)
-
-            # fail if no requirements
-            if not requirement_set.has_requirements:
-                logger.error(
-                    "You must give at least one requirement to %s "
-                    "(see \"pip help %s\")",
-                    self.name,
-                )
-                return
-
-            try:
-                # build wheels
-                wb = WheelBuilder(
-                    requirement_set,
-                    finder,
-                    options.wheel_dir,
-                    build_options=options.build_options or [],
-                    global_options=options.global_options or [],
-                )
-                if not wb.build():
-                    raise CommandError("Failed to build one or more wheels")
-            except PreviousBuildDirError:
-                options.no_clean = True
-                raise
-            finally:
-                if not options.no_clean:
-                    requirement_set.cleanup_files()
+                for filename in options.requirements:
+                    for req in parse_requirements(
+                            filename,
+                            finder=finder,
+                            options=options,
+                            session=session):
+                        requirement_set.add_requirement(req)
+
+                # fail if no requirements
+                if not requirement_set.has_requirements:
+                    logger.error(
+                        "You must give at least one requirement to %s "
+                        "(see \"pip help %s\")",
+                        self.name,
+                    )
+                    return
+
+                try:
+                    # build wheels
+                    wb = WheelBuilder(
+                        requirement_set,
+                        finder,
+                        options.wheel_dir,
+                        build_options=options.build_options or [],
+                        global_options=options.global_options or [],
+                    )
+                    if not wb.build():
+                        raise CommandError(
+                            "Failed to build one or more wheels"
+                        )
+                except PreviousBuildDirError:
+                    options.no_clean = True
+                    raise
+                finally:
+                    if not options.no_clean:
+                        requirement_set.cleanup_files()
