@@ -6,7 +6,7 @@
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.infinispan.client.hotrod.configuration.ClientIntelligence;
+import org.infinispan.client.hotrod.configuration.Configuration;
 import org.infinispan.client.hotrod.impl.protocol.Codec;
 import org.infinispan.client.hotrod.impl.protocol.HeaderParams;
 import org.infinispan.client.hotrod.impl.transport.Transport;
@@ -23,8 +23,8 @@ public class BulkGetOperation<K, V> extends RetryOnFailureOperation<Map<K, V>> {
    private final int entryCount;
 
    public BulkGetOperation(Codec codec, TransportFactory transportFactory, byte[] cacheName, AtomicInteger topologyId,
-                           int flags, ClientIntelligence clientIntelligence, int entryCount) {
-      super(codec, transportFactory, cacheName, topologyId, flags, clientIntelligence);
+                           int flags, Configuration cfg, int entryCount) {
+      super(codec, transportFactory, cacheName, topologyId, flags, cfg);
       this.entryCount = entryCount;
    }
 
@@ -41,8 +41,8 @@ protected Map<K, V> executeOperation(Transport transport) {
       short status = readHeaderAndValidate(transport, params);
       Map<K, V> result = new HashMap<K, V>();
       while ( transport.readByte() == 1) { //there's more!
-         K key = codec.readUnmarshallByteArray(transport, status);
-         V value = codec.readUnmarshallByteArray(transport, status);
+         K key = codec.readUnmarshallByteArray(transport, status, cfg.serialWhitelist());
+         V value = codec.readUnmarshallByteArray(transport, status, cfg.serialWhitelist());
          result.put(key, value);
       }
       return result;