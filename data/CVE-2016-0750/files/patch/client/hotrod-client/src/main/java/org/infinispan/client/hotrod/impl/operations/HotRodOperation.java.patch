@@ -2,7 +2,7 @@
 
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.infinispan.client.hotrod.configuration.ClientIntelligence;
+import org.infinispan.client.hotrod.configuration.Configuration;
 import org.infinispan.client.hotrod.impl.protocol.Codec;
 import org.infinispan.client.hotrod.impl.protocol.HeaderParams;
 import org.infinispan.client.hotrod.impl.protocol.HotRodConstants;
@@ -29,14 +29,14 @@ public abstract class HotRodOperation implements HotRodConstants {
 
    protected final Codec codec;
 
-   protected final ClientIntelligence clientIntelligence;
+   protected final Configuration cfg;
 
    private static final byte NO_TX = 0;
    private static final byte XA_TX = 1;
 
-   protected HotRodOperation(Codec codec, int flags, ClientIntelligence clientIntelligence, byte[] cacheName, AtomicInteger topologyId) {
+   protected HotRodOperation(Codec codec, int flags, Configuration cfg, byte[] cacheName, AtomicInteger topologyId) {
       this.flags = flags;
-      this.clientIntelligence = clientIntelligence;
+      this.cfg = cfg;
       this.cacheName = cacheName;
       this.topologyId = topologyId;
       this.codec = codec;
@@ -47,7 +47,7 @@ protected HotRodOperation(Codec codec, int flags, ClientIntelligence clientIntel
    protected final HeaderParams writeHeader(Transport transport, short operationCode) {
       HeaderParams params = new HeaderParams()
             .opCode(operationCode).cacheName(cacheName).flags(flags)
-            .clientIntel(clientIntelligence)
+            .clientIntel(cfg.clientIntelligence())
             .topologyId(topologyId).txMarker(NO_TX)
             .topologyAge(transport.getTransportFactory().getTopologyAge());
       return codec.writeHeader(transport, params);