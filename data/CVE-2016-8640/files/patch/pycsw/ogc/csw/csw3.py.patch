@@ -36,6 +36,7 @@
 from six import StringIO
 from six.moves.configparser import SafeConfigParser
 from pycsw.core.etree import etree
+from pycsw.ogc.csw.cql import cql2fes1
 from pycsw import oaipmh, opensearch, sru
 from pycsw.plugins.profiles import profile as pprofile
 import pycsw.plugins.outputschemas
@@ -758,12 +759,20 @@ def getrecords(self):
                     % self.parent.kvp['constraintlanguage'])
                 if self.parent.kvp['constraintlanguage'] == 'CQL_TEXT':
                     tmp = self.parent.kvp['constraint']
-                    self.parent.kvp['constraint'] = {}
-                    self.parent.kvp['constraint']['type'] = 'cql'
-                    self.parent.kvp['constraint']['where'] = \
-                    self.parent._cql_update_queryables_mappings(tmp,
-                    self.parent.repository.queryables['_all'])
-                    self.parent.kvp['constraint']['values'] = {}
+                    try:
+                        LOGGER.debug('Transforming CQL into fes1')
+                        LOGGER.debug('CQL: %s', tmp)
+                        self.parent.kvp['constraint'] = {}
+                        self.parent.kvp['constraint']['type'] = 'filter'
+                        cql = cql2fes1(tmp, self.parent.context.namespaces)
+                        self.parent.kvp['constraint']['where'], self.parent.kvp['constraint']['values'] = fes1.parse(cql,
+                        self.parent.repository.queryables['_all'], self.parent.repository.dbtype,
+                        self.parent.context.namespaces, self.parent.orm, self.parent.language['text'], self.parent.repository.fts)
+                    except Exception as err:
+                        LOGGER.error('Invalid CQL query %s', tmp)
+                        LOGGER.error('Error message: %s', err, exc_info=True)
+                        return self.exceptionreport('InvalidParameterValue',
+                        'constraint', 'Invalid Filter syntax')
                 elif self.parent.kvp['constraintlanguage'] == 'FILTER':
                     # validate filter XML
                     try:
@@ -849,8 +858,10 @@ def getrecords(self):
                 maxrecords=self.parent.kvp['maxrecords'],
                 startposition=int(self.parent.kvp['startposition'])-1)
             except Exception as err:
+                LOGGER.debug('Invalid query syntax.  Query: %s', self.parent.kvp['constraint'])
+                LOGGER.debug('Invalid query syntax.  Result: %s', err)
                 return self.exceptionreport('InvalidParameterValue', 'constraint',
-                'Invalid query: %s' % err)
+                'Invalid query syntax')
 
         if int(matched) == 0:
             returned = nextrecord = '0'
@@ -1611,13 +1622,21 @@ def _parse_constraint(self, element):
                 self.parent.context.namespaces, self.parent.orm, self.parent.language['text'], self.parent.repository.fts)
             except Exception as err:
                 return 'Invalid Filter request: %s' % err
+
         tmp = element.find(util.nspath_eval('csw30:CqlText', self.parent.context.namespaces))
         if tmp is not None:
             LOGGER.debug('CQL specified: %s.', tmp.text)
-            query['type'] = 'cql'
-            query['where'] = self.parent._cql_update_queryables_mappings(tmp.text,
-            self.parent.repository.queryables['_all'])
-            query['values'] = {}
+            try:
+                LOGGER.debug('Transforming CQL into OGC Filter')
+                query['type'] = 'filter'
+                cql = cql2fes1(tmp.text, self.parent.context.namespaces)
+                query['where'], query['values'] = fes1.parse(cql,
+                self.parent.repository.queryables['_all'], self.parent.repository.dbtype,
+                self.parent.context.namespaces, self.parent.orm, self.parent.language['text'], self.parent.repository.fts)
+            except Exception as err:
+                LOGGER.error('Invalid CQL request: %s', tmp.text)
+                LOGGER.error('Error message: %s', err, exc_info=True)
+                return 'Invalid CQL request'
         return query
 
     def parse_postdata(self, postdata):