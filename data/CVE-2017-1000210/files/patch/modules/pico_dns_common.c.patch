@@ -20,9 +20,16 @@
 #endif
 
 /* MARK: v NAME & IP FUNCTIONS */
+/* ****************************************************************************
+ *  Iterates over labels, stops when:
+ *      - Label is compressed
+ *      - length greater than 63
+ *      - arriving to null terminator
+ *      - exceeding maxlen
+ * ****************************************************************************/
 #define dns_name_foreach_label_safe(label, name, next, maxlen) \
     for ((label) = (name), (next) = (char *)((name) + *(unsigned char*)(name) + 1); \
-         (*(label) != '\0') && ((uint16_t)((label) - (name)) < (maxlen)); \
+         (*(label) != '\0') && ((uint16_t)((label) - (name)) < (maxlen)) && (((*label) & 0xC0) != 0xC0) && (*label <= 63); \
          (label) = (next), (next) = (char *)((next) + *(unsigned char*)(next) + 1))
 
 /* ****************************************************************************
@@ -72,6 +79,7 @@ pico_dns_namelen_comp( char *name )
     return len;
 }
 
+
 /* ****************************************************************************
  *  Returns the uncompressed name in DNS name format when DNS name compression
  *  is applied to the packet-buffer.
@@ -87,31 +95,47 @@ pico_dns_decompress_name( char *name, pico_dns_packet *packet )
         0
     };
     char *return_name = NULL;
-    uint8_t *dest_iterator = NULL;
-    uint8_t *iterator = NULL;
     uint16_t ptr = 0, nslen = 0;
+    uint16_t decompressed_index = 0;
+    char *label = NULL, *next = NULL;
+
+    /* Reading labels until reaching to pointer or NULL terminator.
+     * Only one pointer is allowed in DNS compression, the pointer is always the last according to the RFC */
+    dns_name_foreach_label_safe(label, name, next, sizeof(decompressed_name)) {
+        uint8_t label_size = (uint8_t)(*label) + 1;
+        if (decompressed_index + label_size >= sizeof(decompressed_name)) {
+            return NULL;
+        }
+        memcpy(&decompressed_name[decompressed_index], label, label_size);
+        decompressed_index += label_size;
+    }
+
+    if (decompressed_index >= sizeof(decompressed_name)) {
+        return NULL;
+    }
+
+    if (*label & 0xC0) {
+        /* Found compression bits */
+        ptr = (uint16_t)((((uint16_t) *label) & 0x003F) << 8);
+        ptr = (uint16_t)(ptr | (uint16_t) *(label + 1));
+        label = (uint8_t *)((uint8_t *)packet + ptr);
 
-    /* Initialise iterators */
-    iterator = (uint8_t *) name;
-    dest_iterator = (uint8_t *) decompressed_name;
-    while (*iterator != '\0') {
-        if ((*iterator) & 0xC0) {
-            /* We have a pointer */
-            ptr = (uint16_t)((((uint16_t) *iterator) & 0x003F) << 8);
-            ptr = (uint16_t)(ptr | (uint16_t) *(iterator + 1));
-            iterator = (uint8_t *)((uint8_t *)packet + ptr);
-        } else {
-            /* We want to keep the label lengths */
-            *dest_iterator = (uint8_t) *iterator;
-            /* Copy the label */
-            memcpy(dest_iterator + 1, iterator + 1, *iterator);
-            /* Move to next length label */
-            dest_iterator += (*iterator) + 1;
-            iterator += (*iterator) + 1;
+        dns_name_foreach_label_safe(label, label, next, sizeof(decompressed_name) - decompressed_index) {
+            uint8_t label_size = (uint8_t)(*label) + 1;
+            if (decompressed_index + label_size >= sizeof(decompressed_name)) {
+                return NULL;
+            }
+            memcpy(&decompressed_name[decompressed_index], label, label_size);
+            decompressed_index += label_size;
         }
     }
+
+    if (decompressed_index >= sizeof(decompressed_name)) {
+        return NULL;
+    }
+
     /* Append final zero-byte */
-    *dest_iterator = (uint8_t) '\0';
+    decompressed_name[decompressed_index] = (uint8_t) '\0';
 
     /* Provide storage for the name to return */
     nslen = (uint16_t)(pico_dns_strlen(decompressed_name) + 1);
@@ -651,9 +675,7 @@ pico_dns_question_decompress( struct pico_dns_question *question,
     char *qname_original = question->qname;
 
     /* Try to decompress the question name */
-    if (!(question->qname = pico_dns_decompress_name(question->qname, packet))) {
-        question->qname = qname_original;
-    }
+    question->qname = pico_dns_decompress_name(question->qname, packet);
 
     return qname_original;
 }
@@ -970,9 +992,7 @@ pico_dns_record_decompress( struct pico_dns_record *record,
     char *rname_original = record->rname;
 
     /* Try to decompress the record name */
-    if (!(record->rname = pico_dns_decompress_name(record->rname, packet))) {
-        record->rname = rname_original;
-    }
+    record->rname = pico_dns_decompress_name(record->rname, packet);
 
     return rname_original;
 }