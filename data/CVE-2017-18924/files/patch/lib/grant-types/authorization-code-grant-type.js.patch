@@ -9,10 +9,12 @@ var InvalidArgumentError = require('../errors/invalid-argument-error');
 var InvalidGrantError = require('../errors/invalid-grant-error');
 var InvalidRequestError = require('../errors/invalid-request-error');
 var Promise = require('bluebird');
+var crypto = require('crypto');
 var promisify = require('promisify-any').use(Promise);
 var ServerError = require('../errors/server-error');
 var is = require('../validator/is');
 var util = require('util');
+var stringUtil = require('../utils/string-util');
 
 /**
  * Constructor.
@@ -88,6 +90,7 @@ AuthorizationCodeGrantType.prototype.getAuthorizationCode = function(request, cl
   if (!is.vschar(request.body.code)) {
     throw new InvalidRequestError('Invalid parameter: `code`');
   }
+
   return promisify(this.model.getAuthorizationCode, 1).call(this.model, request.body.code)
     .then(function(code) {
       if (!code) {
@@ -118,6 +121,28 @@ AuthorizationCodeGrantType.prototype.getAuthorizationCode = function(request, cl
         throw new InvalidGrantError('Invalid grant: `redirect_uri` is not a valid URI');
       }
 
+      if (code.codeChallenge) {
+        if (!code.codeChallengeMethod) {
+          throw new ServerError('Server error: `getAuthorizationCode()` did not return a `codeChallengeMethod` property');
+        }
+
+        if (!request.body.code_verifier) {
+          throw new InvalidGrantError('Missing parameter: `code_verifier`');
+        }
+
+        if (code.codeChallengeMethod === 'plain' && code.codeChallenge !== request.body.code_verifier) {
+          throw new InvalidGrantError('Invalid grant: code verifier is invalid');
+        }
+
+        if (code.codeChallengeMethod === 'S256') {
+          var hash = stringUtil.base64URLEncode(crypto.createHash('sha256').update(request.body.code_verifier).digest());
+
+          if (code.codeChallenge !== hash) {
+            throw new InvalidGrantError('Invalid grant: code verifier is invalid');
+          }
+        }
+      }
+
       return code;
     });
 };