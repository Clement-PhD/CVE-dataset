@@ -5,7 +5,10 @@
  */
 
 var InvalidArgumentError = require('../errors/invalid-argument-error');
+var InvalidRequestError = require('../errors/invalid-request-error');
 var tokenUtil = require('../utils/token-util');
+var is = require('../validator/is');
+var _ = require('lodash');
 var Promise = require('bluebird');
 
 /**
@@ -53,6 +56,8 @@ CodeResponseType.prototype.handle = function(request, client, user, uri, scope)
     throw new InvalidArgumentError('Missing parameter: `uri`');
   }
 
+  var codeChallenge = this.getCodeChallenge(request);
+  var codeChallengeMethod = codeChallenge && this.getCodeChallengeMethod(request);
   var fns = [
     this.generateAuthorizationCode(),
     this.getAuthorizationCodeExpiresAt(client)
@@ -61,7 +66,7 @@ CodeResponseType.prototype.handle = function(request, client, user, uri, scope)
   return Promise.all(fns)
     .bind(this)
     .spread(function(authorizationCode, expiresAt) {
-      return this.saveAuthorizationCode(authorizationCode, expiresAt, scope, client, uri, user);
+      return this.saveAuthorizationCode(authorizationCode, expiresAt, scope, client, uri, user, codeChallenge, codeChallengeMethod);
     })
     .then(function(code) {
       this.code = code.authorizationCode;
@@ -94,12 +99,14 @@ CodeResponseType.prototype.getAuthorizationCodeLifetime = function(client) {
  * Save authorization code.
  */
 
-CodeResponseType.prototype.saveAuthorizationCode = function(authorizationCode, expiresAt, scope, client, redirectUri, user) {
+CodeResponseType.prototype.saveAuthorizationCode = function(authorizationCode, expiresAt, scope, client, redirectUri, user, codeChallenge, codeChallengeMethod) {
   var code = {
     authorizationCode: authorizationCode,
     expiresAt: expiresAt,
     redirectUri: redirectUri,
-    scope: scope
+    scope: scope,
+    codeChallenge: codeChallenge,
+    codeChallengeMethod: codeChallengeMethod
   };
 
   return Promise.try(this.model.saveAuthorizationCode, [code, client, user]);
@@ -117,6 +124,36 @@ CodeResponseType.prototype.generateAuthorizationCode = function() {
   return tokenUtil.generateRandomToken();
 };
 
+/**
+ * Get Code challenge
+ */
+CodeResponseType.prototype.getCodeChallenge = function(request) {
+  var codeChallenge = request.body.code_challenge || request.query.code_challenge;
+
+  if (!codeChallenge || codeChallenge === '') {
+    return;
+  }
+
+  if (!is.vschar(codeChallenge)) {
+    throw new InvalidRequestError('Invalid parameter: `code_challenge`');
+  }
+
+  return codeChallenge;
+};
+
+/**
+ * Get Code challenge method
+ */
+CodeResponseType.prototype.getCodeChallengeMethod = function(request) {
+  var codeChallengeMethod = request.body.code_challenge_method || request.query.code_challenge_method || 'plain';
+
+  if (!_.includes(['S256', 'plain'], codeChallengeMethod)) {
+    throw new InvalidRequestError('Invalid parameter: `code_challenge_method`, use S256 instead');
+  }
+
+  return codeChallengeMethod;
+};
+
 /**
  * Build redirect uri.
  */