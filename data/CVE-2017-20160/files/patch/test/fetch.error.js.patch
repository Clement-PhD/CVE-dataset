@@ -1,22 +1,22 @@
-var expresss = require('express')
+'use strict';
+
+var express = require('express')
   , request = require('supertest')
   , fetcher = require('../');
 
 describe('It can ', function() {
   var app;
 
   beforeEach(function (done) {
-    app = expresss();
+    app = express();
     app.use(fetcher());
     done();
   });
 
   it('receive error code.', function(done) {
-    var options;
     app.get('/path/:id', function(req, res, next) {
-      var required = ['{id}', 'type', 'order'];
-
-      options = req.fetchParameter(required, []);
+      var required = ['{id}', 'type', 'order']
+        , options = req.fetchParameter(required, []);
 
       if (req.checkParamErr(options)) return next(options);
 
@@ -33,11 +33,9 @@ describe('It can ', function() {
   });
 
   it('receive type error code. (required param)', function(done) {
-    var options;
     app.get('/path/:id', function(req, res, next) {
-      var required = ['number:id'];
-
-      options = req.fetchParameter(required, []);
+      var required = ['number:id']
+        , options = req.fetchParameter(required, []);
 
       if (req.checkParamErr(options)) return next(options);
 
@@ -53,12 +51,29 @@ describe('It can ', function() {
       .expect(400, done);
   });
 
+  it('receive type error code. (required param)', function(done) {
+    app.get('/path/:id', function(req, res, next) {
+      var required = ['int:{id}']
+        , options = req.fetchParameter(required, []);
+
+      if (req.checkParamErr(options)) return next(options);
+
+      return res.status(200).send(options);
+    });
+
+    app.use(function(err, req, res, next) {
+      return res.status(err.code).send(err.message);
+    });
+
+    request(app)
+      .get('/path/10.234')
+      .expect(400, 'The parameter value is not a integer : id', done);
+  });
+
   it('receive type error code. (optional param)', function(done) {
-    var options;
     app.get('/path', function(req, res, next) {
-      var optional = ['number:id'];
-
-      options = req.fetchParameter([], optional);
+      var optional = ['number:id']
+        , options = req.fetchParameter([], optional);
 
       if (req.checkParamErr(options)) return next(options);
 
@@ -70,8 +85,8 @@ describe('It can ', function() {
     });
 
     request(app)
-      .get('/path?id=ten')
-      .expect(400, done);
+      .get('/path')
+      .query({id: 'ten'})
+      .expect(400, 'The parameter value is not a number : id', done);
   });
-
 });
