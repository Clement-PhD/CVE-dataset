@@ -1,5 +1,6 @@
+'use strict';
+
 var express = require('express')
-  , qs = require('querystring')
   , bodyparser = require('body-parser')
   , request = require('supertest')
   , fetcher = require('../');
@@ -14,148 +15,159 @@ describe('It can ', function() {
   });
 
   it('fetch required Parameters', function(done) {
-    var options
-      , queryString = 'id=1&type=int';
-
     app.use(function(req, res, next) {
-      var required = ['id', 'type'];
+      var required = ['id', 'type']
+        , options = req.fetchParameter(required);
 
-      options = req.fetchParameter(required);
       if (req.checkParamErr(options)) return next(options);
 
       return res.send(options);
     });
 
     request(app)
-      .get('/required?' + queryString)
-      .expect(200, qs.parse(queryString), done);
+      .get('/required')
+      .query('id=1')
+      .query('type=int')
+      .expect(200, {id: '1', type: 'int'}, done);
   });
 
   it('fetch required Parameters', function(done) {
-    var options
-      , postData = {id: 1, type: 'int'};
+    var postData = {id: 1, type: 'int'};
 
-    //method가 POST일때 안되네..
     app.use(bodyparser.json());
     app.use(bodyparser.urlencoded({
       extended: true
     }));
-    app.use(function(req, res, next) {
-      var required = ['id', 'type'];
-
-      options = req.fetchParameter(required);
 
+    app.use(function(req, res, next) {
+      var required = ['id', 'type']
+        , options = req.fetchParameter(required);
       if (req.checkParamErr(options)) return next(options);
 
       return res.send(options);
     });
 
     request(app)
-      .post('/required?ab=e')
+      .post('/required')
+      .query('id=abc')
+      .query('type=string')
       .send(postData)
       .expect(200, postData, done);
   });
 
 
   it('fetch required Parameters with path variable', function(done) {
-    var options;
-
     app.get('/path/:id', function(req, res, next) {
-      var required = ['{id}', 'type'];
+      var required = ['{id}', 'type']
+        , options = req.fetchParameter(required);
 
-      options = req.fetchParameter(required);
       if (req.checkParamErr(options)) return next(options);
 
       return res.send(options);
     });
 
     request(app)
-      .get('/path/10?type=int')
-      .expect(200, '{"id":"10","type":"int"}', done);
+      .get('/path/10')
+      .query('type=int')
+      .expect(200, {id: '10', type: 'int'}, done);
   });
 
-  it('fetch required Parameters with path underline variable', function(done) {
-    var options;
+  it('fetch required parameters with type and path', function(done) {
+    app.get('/path/:id', function(req, res, next) {
+      var required = ['number:{id}', 'string:type']
+        , options = req.fetchParameter(required);
+
+      if (req.checkParamErr(options)) return next(options);
 
+      return res.send(options);
+    });
+    request(app)
+      .get('/path/10')
+      .query('type=number')
+      .expect(200, {id: 10,type: 'number'}, done);
+  });
+
+  it('fetch required Parameters with path underline variable', function(done) {
     app.get('/path/:cut_tr_id/:lang_id', function(req, res, next) {
-      var required = ['{cut_tr_id}', '{lang_id}',  'type'];
+      var required = ['number:{cut_tr_id}', 'int:{lang_id}',  'type']
+        , options = req.fetchParameter(required);
 
-      options = req.fetchParameter(required);
       if (req.checkParamErr(options)) return next(options);
 
       return res.send(options);
     });
 
     request(app)
-      .get('/path/11/20?type=int')
-      .expect(200, '{"cut_tr_id":"11","lang_id":"20","type":"int"}', done);
+      .get('/path/11/20')
+      .query('type=int')
+      .expect(200, {cut_tr_id: 11, lang_id: 20, type: 'int'}, done);
   });
 
   it('fetch required parameters with type', function(done) {
-    var options
-      , queryString = 'id=10&type=number';
-
     app.get('/path', function(req, res, next) {
-      var required = ['number:id', 'string:type'];
+      var required = ['number:id', 'string:type']
+        , options = req.fetchParameter(required);
 
-      options = req.fetchParameter(required);
       if (req.checkParamErr(options)) return next(options);
 
       return res.send(options);
     });
+
     request(app)
-      .get('/path?' + queryString)
-      .expect(200, qs.parse(queryString), done);
+      .get('/path')
+      .query('id=10')
+      .query('type=number')
+      .expect(200, {id: 10, type: 'number'}, done);
   });
 
   it('fetch float parameter with type number', function(done) {
-    var options
-      , queryString = 'id=10.1&type=number';
-
     app.get('/path', function(req, res, next) {
-      var required = ['number:id', 'string:type'];
+      var required = ['number:id', 'string:type']
+        , options = req.fetchParameter(required);
 
-      options = req.fetchParameter(required);
       if (req.checkParamErr(options)) return next(options);
 
       return res.send(options);
     });
+
     request(app)
-      .get('/path?' + queryString)
-      .expect(200, qs.parse(queryString), done);
+      .get('/path')
+      .query('id=10.1')
+      .query('type=number')
+      .expect(200, {id: 10.1, type: 'number'}, done);
   });
 
   it('fetch float parameter with type number', function(done) {
-    var options
-      , queryString = 'id=9.999999999999999999999999&type=number';
-
     app.get('/path', function(req, res, next) {
-      var required = ['number:id', 'string:type'];
+      var required = ['number:id', 'string:type']
+        , options = req.fetchParameter(required);
 
-      options = req.fetchParameter(required);
       if (req.checkParamErr(options)) return next(options);
 
       return res.send(options);
     });
+
     request(app)
-      .get('/path?' + queryString)
-      .expect(200, qs.parse(queryString), done);
+      .get('/path')
+      .query('id=9.999999999999999999999999')
+      .query('type=number')
+      .expect(200, {id: 10, type: 'number'}, done);
   });
 
-  it('fetch required parameters with type and path', function(done) {
-    var options;
-
-    app.get('/path/:id', function(req, res, next) {
-      var required = ['number:{id}', 'string:type'];
+  it('fetch required parameter with type int(Safe Integer)', function(done) {
+    app.get('/path', function(req, res, next) {
+      var required = ['int:id', 'string:type']
+        , options = req.fetchParameter(required);
 
-      options = req.fetchParameter(required);
       if (req.checkParamErr(options)) return next(options);
 
       return res.send(options);
     });
+
     request(app)
-      .get('/path/10?type=number')
-      .expect(200, '{"id":10,"type":"number"}', done);
+      .get('/path')
+      .query('id=99')
+      .query('type=int')
+      .expect(200, {id: 99, type:'int'}, done);
   });
-
 });
