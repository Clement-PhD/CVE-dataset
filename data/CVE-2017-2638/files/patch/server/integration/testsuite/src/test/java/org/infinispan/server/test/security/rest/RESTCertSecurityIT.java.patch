@@ -5,14 +5,13 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
-import java.net.URL;
-import java.security.cert.X509Certificate;
+import java.net.SocketException;
 
+import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.KeyManager;
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLException;
-import javax.net.ssl.SSLSession;
-import javax.net.ssl.SSLSocket;
+import javax.net.ssl.SSLHandshakeException;
 import javax.net.ssl.TrustManager;
 
 import org.apache.http.HttpResponse;
@@ -28,7 +27,6 @@
 import org.apache.http.conn.socket.ConnectionSocketFactory;
 import org.apache.http.conn.socket.PlainConnectionSocketFactory;
 import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
-import org.apache.http.conn.ssl.X509HostnameVerifier;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClients;
@@ -37,8 +35,11 @@
 import org.infinispan.arquillian.core.RemoteInfinispanServer;
 import org.infinispan.arquillian.core.RunningServer;
 import org.infinispan.arquillian.core.WithRunningServer;
+import org.infinispan.security.TestCachePermission;
 import org.jboss.arquillian.junit.Arquillian;
 import org.jboss.security.JBossJSSESecurityDomain;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -63,7 +64,6 @@
  * @author <a href="mailto:mgencur@redhat.com">Martin Gencur</a>
  */
 @RunWith(Arquillian.class)
-@Ignore
 public class RESTCertSecurityIT {
     private static final String CONTAINER = "rest-security-cert";
 
@@ -77,53 +77,65 @@ public class RESTCertSecurityIT {
     @InfinispanResource("rest-security-cert")
     RemoteInfinispanServer server;
 
-    @Test
-    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-cert-wr.xml")})
-    public void testSecuredWriteOperations() throws Exception {
-        //correct alias for the certificate
-        put(securedClient(testAlias), keyAddress(KEY_A), HttpStatus.SC_OK);
-        //test wrong authorization, 1. wrong alias for the certificate
-        put(securedClient(test2Alias), keyAddress(KEY_B), HttpStatus.SC_FORBIDDEN);
-        //2. access over 8080
-        put(securedClient(testAlias), keyAddressUnsecured(KEY_B), HttpStatus.SC_UNAUTHORIZED);
-        post(securedClient(testAlias), keyAddress(KEY_C), HttpStatus.SC_OK);
-        post(securedClient(test2Alias), keyAddress(KEY_D), HttpStatus.SC_FORBIDDEN);
-        //get is not secured, should be working over 8080
-        HttpResponse resp = get(securedClient(test2Alias), keyAddressUnsecured(KEY_A), HttpStatus.SC_OK);
-        String content = new BufferedReader(new InputStreamReader(resp.getEntity().getContent())).readLine();
-        assertEquals("data", content);
-        head(securedClient(test2Alias), keyAddressUnsecured(KEY_A), HttpStatus.SC_OK);
-        delete(securedClient(test2Alias), keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
-        delete(securedClient(testAlias), keyAddress(KEY_A), HttpStatus.SC_OK);
-        delete(securedClient(testAlias), keyAddress(KEY_C), HttpStatus.SC_OK);
+    static CloseableHttpClient securedTest;
+    static CloseableHttpClient securedTest2;
+
+    @BeforeClass
+    public static void setup() throws Exception {
+       securedTest = securedClient(testAlias);
+       securedTest2 = securedClient(test2Alias);
     }
 
-    @Test
-    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-cert-rw.xml")})
+    @AfterClass
+    public static void tearDown() {
+       try {
+          securedTest.close();
+       } catch (IOException e) {
+       }
+       try {
+          securedTest2.close();
+       } catch (IOException e) {
+       }
+    }
+
+
+    @Ignore
     public void testSecuredReadWriteOperations() throws Exception {
         //correct alias for the certificate
-        put(securedClient(testAlias), keyAddress(KEY_A), HttpStatus.SC_OK);
+        put(securedTest, keyAddress(KEY_A), HttpStatus.SC_OK);
         //test wrong authorization, 1. wrong alias for the certificate
-        put(securedClient(test2Alias), keyAddress(KEY_B), HttpStatus.SC_FORBIDDEN);
+        put(securedTest2, keyAddress(KEY_B), HttpStatus.SC_FORBIDDEN);
         //2. access over 8080
-        put(securedClient(testAlias), keyAddressUnsecured(KEY_B), HttpStatus.SC_UNAUTHORIZED);
-        post(securedClient(testAlias), keyAddress(KEY_C), HttpStatus.SC_OK);
-        post(securedClient(test2Alias), keyAddress(KEY_D), HttpStatus.SC_FORBIDDEN);
+        put(securedTest, keyAddressUnsecured(KEY_B), HttpStatus.SC_UNAUTHORIZED);
+        post(securedTest, keyAddress(KEY_C), HttpStatus.SC_OK);
+        post(securedTest2, keyAddress(KEY_D), HttpStatus.SC_FORBIDDEN);
         //get is secured too
-        HttpResponse resp = get(securedClient(testAlias), keyAddress(KEY_A), HttpStatus.SC_OK);
+        HttpResponse resp = get(securedTest, keyAddress(KEY_A), HttpStatus.SC_OK);
         String content = new BufferedReader(new InputStreamReader(resp.getEntity().getContent())).readLine();
         assertEquals("data", content);
         //test wrong authorization, 1. wrong alias for the certificate
-        get(securedClient(test2Alias), keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
+        get(securedTest2, keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
         //2. access over 8080
-        get(securedClient(testAlias), keyAddressUnsecured(KEY_A), HttpStatus.SC_UNAUTHORIZED);
-        head(securedClient(test2Alias), keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
+        get(securedTest, keyAddressUnsecured(KEY_A), HttpStatus.SC_UNAUTHORIZED);
+        head(securedTest2, keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
         //access over 8080
-        head(securedClient(testAlias), keyAddressUnsecured(KEY_A), HttpStatus.SC_UNAUTHORIZED);
-        head(securedClient(testAlias), keyAddress(KEY_A), HttpStatus.SC_OK);
-        delete(securedClient(test2Alias), keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
-        delete(securedClient(testAlias), keyAddress(KEY_A), HttpStatus.SC_OK);
-        delete(securedClient(testAlias), keyAddress(KEY_C), HttpStatus.SC_OK);
+        head(securedTest, keyAddressUnsecured(KEY_A), HttpStatus.SC_UNAUTHORIZED);
+        head(securedTest, keyAddress(KEY_A), HttpStatus.SC_OK);
+        delete(securedTest2, keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
+        delete(securedTest, keyAddress(KEY_A), HttpStatus.SC_OK);
+        delete(securedTest, keyAddress(KEY_C), HttpStatus.SC_OK);
+    }
+
+    @Test
+    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-cert.xml")})
+    public void testValidCertificateAccess() throws Exception {
+        put(securedTest, keyAddress(KEY_A), HttpStatus.SC_OK);
+    }
+
+    @Test
+    @WithRunningServer({@RunningServer(name = CONTAINER, config = "testsuite/rest-sec-cert.xml")})
+    public void testInvalidCertificateAccess() throws Exception {
+        put(securedTest2, keyAddress(KEY_A), HttpStatus.SC_FORBIDDEN);
     }
 
     private String keyAddress(String key) {
@@ -136,13 +148,23 @@ private String keyAddressUnsecured(String key) {
                 + server.getRESTEndpoint().getContextPath() + "/default/" + key;
     }
 
+    private HttpResponse handleIOException(IOException e, int expectedCode) throws IOException {
+       if ((expectedCode == HttpStatus.SC_FORBIDDEN) && ((e instanceof SSLHandshakeException) || (e instanceof SocketException)))
+          return null;
+       else throw e;
+    }
+
     private HttpResponse put(CloseableHttpClient httpClient, String uri, int expectedCode) throws Exception {
         HttpResponse response;
         HttpPut put = new HttpPut(uri);
         put.setEntity(new StringEntity("data", "UTF-8"));
-        response = httpClient.execute(put);
-        assertEquals(expectedCode, response.getStatusLine().getStatusCode());
-        return response;
+        try {
+           response = httpClient.execute(put);
+           assertEquals(expectedCode, response.getStatusLine().getStatusCode());
+           return response;
+        } catch (IOException e) {
+           return handleIOException(e, expectedCode);
+        }
     }
 
     private HttpResponse post(CloseableHttpClient httpClient, String uri, int expectedCode) throws Exception {
@@ -180,37 +202,20 @@ private HttpResponse head(CloseableHttpClient httpClient, String uri, int expect
     }
 
     public static CloseableHttpClient securedClient(String alias) throws Exception {
+       ClassLoader tccl = Thread.currentThread().getContextClassLoader();
        SSLContext ctx = SSLContext.getInstance("TLS");
        JBossJSSESecurityDomain jsseSecurityDomain = new JBossJSSESecurityDomain("client_cert_auth");
-       jsseSecurityDomain.setKeyStorePassword("changeit");
-       ClassLoader tccl = Thread.currentThread().getContextClassLoader();
-       URL keystore = tccl.getResource("client.keystore");
-       jsseSecurityDomain.setKeyStoreURL(keystore.getPath());
+       jsseSecurityDomain.setKeyStoreURL(tccl.getResource("client.keystore").getPath());
+       jsseSecurityDomain.setKeyStorePassword("secret");
        jsseSecurityDomain.setClientAlias(alias);
+       jsseSecurityDomain.setTrustStoreURL(tccl.getResource("truststore_client.jks").getPath());
+       jsseSecurityDomain.setTrustStorePassword("secret");
        jsseSecurityDomain.reloadKeyAndTrustStore();
        KeyManager[] keyManagers = jsseSecurityDomain.getKeyManagers();
        TrustManager[] trustManagers = jsseSecurityDomain.getTrustManagers();
        ctx.init(keyManagers, trustManagers, null);
-       X509HostnameVerifier verifier = new X509HostnameVerifier() {
-
-           @Override
-           public void verify(String s, SSLSocket sslSocket) throws IOException {
-           }
-
-           @Override
-           public void verify(String s, X509Certificate x509Certificate) throws SSLException {
-           }
-
-           @Override
-           public void verify(String s, String[] strings, String[] strings1) throws SSLException {
-           }
-
-           @Override
-           public boolean verify(String string, SSLSession ssls) {
-               return true;
-           }
-       };
-       ConnectionSocketFactory sslssf = new SSLConnectionSocketFactory(ctx, verifier);//SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
+       HostnameVerifier verifier = (hostname, sslSession) -> true;
+       ConnectionSocketFactory sslssf = new SSLConnectionSocketFactory(ctx, verifier);
        ConnectionSocketFactory plainsf = new PlainConnectionSocketFactory();
        Registry<ConnectionSocketFactory> sr = RegistryBuilder.<ConnectionSocketFactory>create()
                .register("http", plainsf)