@@ -21,6 +21,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 
+import org.hamcrest.CoreMatchers;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -158,7 +159,7 @@ public void updateSynchronizedPropertyDespiteFilter() {
     }
 
     @Test
-    public void childPropertyUpdateFilter_replaceFilter() {
+    public void updateFromClientFilter_replaceFilter() {
         ElementPropertyMap map = createSimplePropertyMap();
 
         map.setUpdateFromClientFilter("foo"::equals);
@@ -185,6 +186,96 @@ public void childPropertyUpdateFilter_setFilterBeforeChild() {
         Assert.assertFalse(childModel.mayUpdateFromClient("baz", "a"));
     }
 
+    @Test
+    public void deferredUpdateFromClient_filterAllowsUpdate() {
+        ElementPropertyMap map = createSimplePropertyMap();
+        StateNode child = new StateNode(ElementPropertyMap.class);
+        ElementPropertyMap childModel = ElementPropertyMap.getModel(child);
+
+        map.setUpdateFromClientFilter("foo.bar"::equals);
+        map.put("foo", child);
+
+        assertDeferredUpdate_putResult(childModel, "bar");
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void deferredUpdateFromClient_noFilter_throws() {
+        ElementPropertyMap map = createSimplePropertyMap();
+        StateNode child = new StateNode(ElementPropertyMap.class);
+        ElementPropertyMap childModel = ElementPropertyMap.getModel(child);
+
+        map.put("foo", child);
+        childModel.deferredUpdateFromClient("bar", "a");
+    }
+
+    @Test
+    public void deferredUpdateFromClient_filterDisallowsUpdate() {
+        ElementPropertyMap map = createSimplePropertyMap();
+        StateNode child = new StateNode(ElementPropertyMap.class);
+        ElementPropertyMap childModel = ElementPropertyMap.getModel(child);
+
+        map.setUpdateFromClientFilter(key -> false);
+        map.put("foo", child);
+
+        assertDeferredUpdate_noOp(childModel, "bar");
+    }
+
+    @Test
+    public void listChildPropertyUpdateFilter_setFilterBeforeChild() {
+        ElementPropertyMap map = createSimplePropertyMap();
+        ModelList list = map.resolveModelList("foo");
+        StateNode child = new StateNode(ElementPropertyMap.class);
+
+        map.setUpdateFromClientFilter("foo.bar"::equals);
+        list.add(child);
+
+        ElementPropertyMap childModel = ElementPropertyMap.getModel(child);
+
+        Assert.assertTrue(childModel.mayUpdateFromClient("bar", "a"));
+        Assert.assertFalse(childModel.mayUpdateFromClient("baz", "a"));
+    }
+
+    @Test
+    public void deferredUpdateFromClient_listChild_filterAllowsUpdate() {
+        ElementPropertyMap map = createSimplePropertyMap();
+        ModelList list = map.resolveModelList("foo");
+        StateNode child = new StateNode(ElementPropertyMap.class);
+
+        map.setUpdateFromClientFilter("foo.bar"::equals);
+        list.add(child);
+
+        ElementPropertyMap childModel = ElementPropertyMap.getModel(child);
+
+        assertDeferredUpdate_putResult(childModel, "bar");
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void deferredUpdateFromClient_listItem_noFilter_throws() {
+        ElementPropertyMap map = createSimplePropertyMap();
+        ModelList list = map.resolveModelList("foo");
+        StateNode child = new StateNode(ElementPropertyMap.class);
+
+        list.add(child);
+
+        ElementPropertyMap childModel = ElementPropertyMap.getModel(child);
+
+        childModel.deferredUpdateFromClient("bar", "a");
+    }
+
+    @Test
+    public void deferredUpdateFromClient_listChild_filterDisallowsUpdate() {
+        ElementPropertyMap map = createSimplePropertyMap();
+        ModelList list = map.resolveModelList("foo");
+        StateNode child = new StateNode(ElementPropertyMap.class);
+
+        map.setUpdateFromClientFilter(key -> false);
+        list.add(child);
+
+        ElementPropertyMap childModel = ElementPropertyMap.getModel(child);
+
+        assertDeferredUpdate_noOp(childModel, "bar");
+    }
+
     @Test
     public void childPropertyUpdateFilter_setFilterAfterChild() {
         ElementPropertyMap map = createSimplePropertyMap();
@@ -232,6 +323,63 @@ public void childPropertyUpdateFilter_deepNesting() {
         Assert.assertTrue(map.mayUpdateFromClient("property", "foo"));
     }
 
+    @Test(expected = IllegalArgumentException.class)
+    public void deferredUpdateFromClient_updateNotAllowed_throw() {
+        ElementPropertyMap map = createSimplePropertyMap();
+
+        map.deferredUpdateFromClient("foo", "value");
+    }
+
+    @Test
+    public void deferredUpdateFromClient_filterDisallowUpdate_propertyIsSynchronized() {
+        ElementPropertyMap map = createSimplePropertyMap();
+        map.getNode().getFeature(SynchronizedPropertiesList.class).add("foo");
+
+        map.setUpdateFromClientFilter(key -> false);
+
+        map.deferredUpdateFromClient("foo", "value");
+        assertDeferredUpdate_putResult(map, "foo");
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void deferredUpdateFromClient_filterAllowsUpdate_propertyIsForbidden_throw() {
+        ElementPropertyMap map = createSimplePropertyMap();
+        map.put("classList", "a");
+
+        map.setUpdateFromClientFilter(key -> true);
+
+        map.deferredUpdateFromClient("classList", "value");
+    }
+
+    @Test
+    public void deferredUpdateFromClient_clientFiltersOutUpdate_noOpRunnable() {
+        ElementPropertyMap map = createSimplePropertyMap();
+        map.setUpdateFromClientFilter(name -> !name.equals("foo"));
+
+        AtomicReference<PropertyChangeEvent> eventCapture = new AtomicReference<PropertyChangeEvent>();
+        map.addPropertyChangeListener("foo", eventCapture::set);
+
+        Runnable runnable = map.deferredUpdateFromClient("foo", "value");
+        Assert.assertThat(runnable.getClass().getName(),
+                CoreMatchers.not(CoreMatchers.equalTo(
+                        ElementPropertyMap.class.getName() + "$PutResult")));
+        runnable.run();
+        Assert.assertNull(eventCapture.get());
+    }
+
+    @Test
+    public void deferredUpdateFromClient_clientFilterAcceptUpdate_putResultRunnable() {
+        ElementPropertyMap map = createSimplePropertyMap();
+        map.setUpdateFromClientFilter(name -> name.equals("foo"));
+
+        AtomicReference<PropertyChangeEvent> eventCapture = new AtomicReference<PropertyChangeEvent>();
+        map.addPropertyChangeListener("foo", eventCapture::set);
+
+        Runnable runnable = assertDeferredUpdate_putResult(map, "foo");
+        runnable.run();
+        Assert.assertNotNull(eventCapture.get());
+    }
+
     private void listenerIsNotified(boolean clientEvent) {
         ElementPropertyMap map = createSimplePropertyMap();
         StateNode node = map.getNode();
@@ -254,6 +402,22 @@ private void listenerIsNotified(boolean clientEvent) {
         map.setProperty("bar", "foo");
     }
 
+    private Runnable assertDeferredUpdate_putResult(ElementPropertyMap map,
+            String property) {
+        Runnable runnable = map.deferredUpdateFromClient(property, "a");
+        Assert.assertThat(runnable.getClass().getName(), CoreMatchers
+                .equalTo(ElementPropertyMap.class.getName() + "$PutResult"));
+        return runnable;
+    }
+
+    private void assertDeferredUpdate_noOp(ElementPropertyMap map,
+            String property) {
+        Runnable runnable = map.deferredUpdateFromClient(property, "a");
+        Assert.assertThat(runnable.getClass().getName(),
+                CoreMatchers.not(CoreMatchers.equalTo(
+                        ElementPropertyMap.class.getName() + "$PutResult")));
+    }
+
     private static ElementPropertyMap createSimplePropertyMap() {
         return BasicElementStateProvider.createStateNode("div")
                 .getFeature(ElementPropertyMap.class);