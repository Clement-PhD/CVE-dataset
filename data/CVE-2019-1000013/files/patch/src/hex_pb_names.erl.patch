@@ -1,6 +1,6 @@
 %% -*- coding: utf-8 -*-
 %% Automatically generated, do not edit
-%% Generated by gpb_compile version 4.2.1
+%% Generated by gpb_compile version 4.3.1
 -module(hex_pb_names).
 
 -export([encode_msg/2, encode_msg/3]).
@@ -32,28 +32,28 @@
       #{packages                => ['Package'()],   % = 1
         repository              => iodata()         % = 2
        }.
+
 -type 'Package'() ::
       #{name                    => iodata()         % = 1
-        %% repository           => iodata()         % = 2
        }.
+
 -export_type(['Names'/0, 'Package'/0]).
 
--spec encode_msg('Names'() | 'Package'(),'Names' | 'Package') -> binary().
-encode_msg(Msg, MsgName) ->
+-spec encode_msg('Names'() | 'Package'(), atom()) -> binary().
+encode_msg(Msg, MsgName) when is_atom(MsgName) ->
     encode_msg(Msg, MsgName, []).
 
-
--spec encode_msg('Names'() | 'Package'(),'Names' | 'Package', list()) -> binary().
+-spec encode_msg('Names'() | 'Package'(), atom(), list()) -> binary().
 encode_msg(Msg, MsgName, Opts) ->
     verify_msg(Msg, MsgName, Opts),
     TrUserData = proplists:get_value(user_data, Opts),
     case MsgName of
-      'Names' -> e_msg_Names(Msg, TrUserData);
-      'Package' -> e_msg_Package(Msg, TrUserData)
+      'Names' -> e_msg_Names(id(Msg, TrUserData), TrUserData);
+      'Package' ->
+	  e_msg_Package(id(Msg, TrUserData), TrUserData)
     end.
 
 
-
 e_msg_Names(Msg, TrUserData) ->
     e_msg_Names(Msg, <<>>, TrUserData).
 
@@ -69,25 +69,17 @@ e_msg_Names(#{repository := F2} = M, Bin, TrUserData) ->
 	 end,
     begin
       TrF2 = id(F2, TrUserData),
-      e_type_string(TrF2, <<B1/binary, 18>>)
+      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
     end.
 
 e_msg_Package(Msg, TrUserData) ->
     e_msg_Package(Msg, <<>>, TrUserData).
 
 
-e_msg_Package(#{name := F1} = M, Bin, TrUserData) ->
-    B1 = begin
-	   TrF1 = id(F1, TrUserData),
-	   e_type_string(TrF1, <<Bin/binary, 10>>)
-	 end,
-    case M of
-      #{repository := F2} ->
-	  begin
-	    TrF2 = id(F2, TrUserData),
-	    e_type_string(TrF2, <<B1/binary, 18>>)
-	  end;
-      _ -> B1
+e_msg_Package(#{name := F1}, Bin, TrUserData) ->
+    begin
+      TrF1 = id(F1, TrUserData),
+      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
     end.
 
 e_mfield_Names_packages(Msg, Bin, TrUserData) ->
@@ -103,11 +95,93 @@ e_field_Names_packages([Elem | Rest], Bin,
     e_field_Names_packages(Rest, Bin3, TrUserData);
 e_field_Names_packages([], Bin, _TrUserData) -> Bin.
 
-e_type_string(S, Bin) ->
+-compile({nowarn_unused_function,e_type_sint/3}).
+e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
+    e_varint(Value * 2, Bin);
+e_type_sint(Value, Bin, _TrUserData) ->
+    e_varint(Value * -2 - 1, Bin).
+
+-compile({nowarn_unused_function,e_type_int32/3}).
+e_type_int32(Value, Bin, _TrUserData)
+    when 0 =< Value, Value =< 127 ->
+    <<Bin/binary, Value>>;
+e_type_int32(Value, Bin, _TrUserData) ->
+    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
+    e_varint(N, Bin).
+
+-compile({nowarn_unused_function,e_type_int64/3}).
+e_type_int64(Value, Bin, _TrUserData)
+    when 0 =< Value, Value =< 127 ->
+    <<Bin/binary, Value>>;
+e_type_int64(Value, Bin, _TrUserData) ->
+    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
+    e_varint(N, Bin).
+
+-compile({nowarn_unused_function,e_type_bool/3}).
+e_type_bool(true, Bin, _TrUserData) ->
+    <<Bin/binary, 1>>;
+e_type_bool(false, Bin, _TrUserData) ->
+    <<Bin/binary, 0>>;
+e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
+e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.
+
+-compile({nowarn_unused_function,e_type_string/3}).
+e_type_string(S, Bin, _TrUserData) ->
     Utf8 = unicode:characters_to_binary(S),
     Bin2 = e_varint(byte_size(Utf8), Bin),
     <<Bin2/binary, Utf8/binary>>.
 
+-compile({nowarn_unused_function,e_type_bytes/3}).
+e_type_bytes(Bytes, Bin, _TrUserData)
+    when is_binary(Bytes) ->
+    Bin2 = e_varint(byte_size(Bytes), Bin),
+    <<Bin2/binary, Bytes/binary>>;
+e_type_bytes(Bytes, Bin, _TrUserData)
+    when is_list(Bytes) ->
+    BytesBin = iolist_to_binary(Bytes),
+    Bin2 = e_varint(byte_size(BytesBin), Bin),
+    <<Bin2/binary, BytesBin/binary>>.
+
+-compile({nowarn_unused_function,e_type_fixed32/3}).
+e_type_fixed32(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:32/little>>.
+
+-compile({nowarn_unused_function,e_type_sfixed32/3}).
+e_type_sfixed32(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:32/little-signed>>.
+
+-compile({nowarn_unused_function,e_type_fixed64/3}).
+e_type_fixed64(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:64/little>>.
+
+-compile({nowarn_unused_function,e_type_sfixed64/3}).
+e_type_sfixed64(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:64/little-signed>>.
+
+-compile({nowarn_unused_function,e_type_float/3}).
+e_type_float(V, Bin, _) when is_number(V) ->
+    <<Bin/binary, V:32/little-float>>;
+e_type_float(infinity, Bin, _) ->
+    <<Bin/binary, 0:16, 128, 127>>;
+e_type_float('-infinity', Bin, _) ->
+    <<Bin/binary, 0:16, 128, 255>>;
+e_type_float(nan, Bin, _) ->
+    <<Bin/binary, 0:16, 192, 127>>.
+
+-compile({nowarn_unused_function,e_type_double/3}).
+e_type_double(V, Bin, _) when is_number(V) ->
+    <<Bin/binary, V:64/little-float>>;
+e_type_double(infinity, Bin, _) ->
+    <<Bin/binary, 0:48, 240, 127>>;
+e_type_double('-infinity', Bin, _) ->
+    <<Bin/binary, 0:48, 240, 255>>;
+e_type_double(nan, Bin, _) ->
+    <<Bin/binary, 0:48, 248, 127>>.
+
+-compile({nowarn_unused_function,e_varint/3}).
+e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).
+
+-compile({nowarn_unused_function,e_varint/2}).
 e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
 e_varint(N, Bin) ->
     Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
@@ -144,9 +218,9 @@ decode_msg_1_catch(Bin, MsgName, TrUserData) ->
 -endif.
 
 decode_msg_2_doit('Names', Bin, TrUserData) ->
-    d_msg_Names(Bin, TrUserData);
+    id(d_msg_Names(Bin, TrUserData), TrUserData);
 decode_msg_2_doit('Package', Bin, TrUserData) ->
-    d_msg_Package(Bin, TrUserData).
+    id(d_msg_Package(Bin, TrUserData), TrUserData).
 
 
 
@@ -164,8 +238,10 @@ dfp_read_field_def_Names(<<18, Rest/binary>>, Z1, Z2,
 			     TrUserData);
 dfp_read_field_def_Names(<<>>, 0, 0, R1, F@_2,
 			 TrUserData) ->
-    #{packages => lists_reverse(R1, TrUserData),
-      repository => F@_2};
+    S1 = #{repository => F@_2},
+    if R1 == '$undef' -> S1;
+       true -> S1#{packages => lists_reverse(R1, TrUserData)}
+    end;
 dfp_read_field_def_Names(Other, Z1, Z2, F@_1, F@_2,
 			 TrUserData) ->
     dg_read_field_def_Names(Other, Z1, Z2, F@_1, F@_2,
@@ -202,8 +278,10 @@ dg_read_field_def_Names(<<0:1, X:7, Rest/binary>>, N,
     end;
 dg_read_field_def_Names(<<>>, 0, 0, R1, F@_2,
 			TrUserData) ->
-    #{packages => lists_reverse(R1, TrUserData),
-      repository => F@_2}.
+    S1 = #{repository => F@_2},
+    if R1 == '$undef' -> S1;
+       true -> S1#{packages => lists_reverse(R1, TrUserData)}
+    end.
 
 d_field_Names_packages(<<1:1, X:7, Rest/binary>>, N,
 		       Acc, F@_1, F@_2, TrUserData)
@@ -232,7 +310,7 @@ d_field_Names_repository(<<0:1, X:7, Rest/binary>>, N,
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Names(RestF, 0, 0, F@_1, NewFValue,
 			     TrUserData).
@@ -275,128 +353,93 @@ skip_64_Names(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
 
 d_msg_Package(Bin, TrUserData) ->
     dfp_read_field_def_Package(Bin, 0, 0,
-			       id('$undef', TrUserData),
 			       id('$undef', TrUserData), TrUserData).
 
 dfp_read_field_def_Package(<<10, Rest/binary>>, Z1, Z2,
-			   F@_1, F@_2, TrUserData) ->
-    d_field_Package_name(Rest, Z1, Z2, F@_1, F@_2,
-			 TrUserData);
-dfp_read_field_def_Package(<<18, Rest/binary>>, Z1, Z2,
-			   F@_1, F@_2, TrUserData) ->
-    d_field_Package_repository(Rest, Z1, Z2, F@_1, F@_2,
-			       TrUserData);
-dfp_read_field_def_Package(<<>>, 0, 0, F@_1, F@_2, _) ->
-    S1 = #{name => F@_1},
-    if F@_2 == '$undef' -> S1;
-       true -> S1#{repository => F@_2}
-    end;
-dfp_read_field_def_Package(Other, Z1, Z2, F@_1, F@_2,
+			   F@_1, TrUserData) ->
+    d_field_Package_name(Rest, Z1, Z2, F@_1, TrUserData);
+dfp_read_field_def_Package(<<>>, 0, 0, F@_1, _) ->
+    #{name => F@_1};
+dfp_read_field_def_Package(Other, Z1, Z2, F@_1,
 			   TrUserData) ->
-    dg_read_field_def_Package(Other, Z1, Z2, F@_1, F@_2,
+    dg_read_field_def_Package(Other, Z1, Z2, F@_1,
 			      TrUserData).
 
 dg_read_field_def_Package(<<1:1, X:7, Rest/binary>>, N,
-			  Acc, F@_1, F@_2, TrUserData)
+			  Acc, F@_1, TrUserData)
     when N < 32 - 7 ->
     dg_read_field_def_Package(Rest, N + 7, X bsl N + Acc,
-			      F@_1, F@_2, TrUserData);
+			      F@_1, TrUserData);
 dg_read_field_def_Package(<<0:1, X:7, Rest/binary>>, N,
-			  Acc, F@_1, F@_2, TrUserData) ->
+			  Acc, F@_1, TrUserData) ->
     Key = X bsl N + Acc,
     case Key of
       10 ->
-	  d_field_Package_name(Rest, 0, 0, F@_1, F@_2,
-			       TrUserData);
-      18 ->
-	  d_field_Package_repository(Rest, 0, 0, F@_1, F@_2,
-				     TrUserData);
+	  d_field_Package_name(Rest, 0, 0, F@_1, TrUserData);
       _ ->
 	  case Key band 7 of
-	    0 ->
-		skip_varint_Package(Rest, 0, 0, F@_1, F@_2, TrUserData);
-	    1 ->
-		skip_64_Package(Rest, 0, 0, F@_1, F@_2, TrUserData);
+	    0 -> skip_varint_Package(Rest, 0, 0, F@_1, TrUserData);
+	    1 -> skip_64_Package(Rest, 0, 0, F@_1, TrUserData);
 	    2 ->
-		skip_length_delimited_Package(Rest, 0, 0, F@_1, F@_2,
+		skip_length_delimited_Package(Rest, 0, 0, F@_1,
 					      TrUserData);
 	    3 ->
-		skip_group_Package(Rest, Key bsr 3, 0, F@_1, F@_2,
+		skip_group_Package(Rest, Key bsr 3, 0, F@_1,
 				   TrUserData);
-	    5 -> skip_32_Package(Rest, 0, 0, F@_1, F@_2, TrUserData)
+	    5 -> skip_32_Package(Rest, 0, 0, F@_1, TrUserData)
 	  end
     end;
-dg_read_field_def_Package(<<>>, 0, 0, F@_1, F@_2, _) ->
-    S1 = #{name => F@_1},
-    if F@_2 == '$undef' -> S1;
-       true -> S1#{repository => F@_2}
-    end.
+dg_read_field_def_Package(<<>>, 0, 0, F@_1, _) ->
+    #{name => F@_1}.
 
 d_field_Package_name(<<1:1, X:7, Rest/binary>>, N, Acc,
-		     F@_1, F@_2, TrUserData)
+		     F@_1, TrUserData)
     when N < 57 ->
     d_field_Package_name(Rest, N + 7, X bsl N + Acc, F@_1,
-			 F@_2, TrUserData);
+			 TrUserData);
 d_field_Package_name(<<0:1, X:7, Rest/binary>>, N, Acc,
-		     _, F@_2, TrUserData) ->
+		     _, TrUserData) ->
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
-    dfp_read_field_def_Package(RestF, 0, 0, NewFValue, F@_2,
-			       TrUserData).
-
-d_field_Package_repository(<<1:1, X:7, Rest/binary>>, N,
-			   Acc, F@_1, F@_2, TrUserData)
-    when N < 57 ->
-    d_field_Package_repository(Rest, N + 7, X bsl N + Acc,
-			       F@_1, F@_2, TrUserData);
-d_field_Package_repository(<<0:1, X:7, Rest/binary>>, N,
-			   Acc, F@_1, _, TrUserData) ->
-    {NewFValue, RestF} = begin
-			   Len = X bsl N + Acc,
-			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
-			 end,
-    dfp_read_field_def_Package(RestF, 0, 0, F@_1, NewFValue,
+    dfp_read_field_def_Package(RestF, 0, 0, NewFValue,
 			       TrUserData).
 
 skip_varint_Package(<<1:1, _:7, Rest/binary>>, Z1, Z2,
-		    F@_1, F@_2, TrUserData) ->
-    skip_varint_Package(Rest, Z1, Z2, F@_1, F@_2,
-			TrUserData);
+		    F@_1, TrUserData) ->
+    skip_varint_Package(Rest, Z1, Z2, F@_1, TrUserData);
 skip_varint_Package(<<0:1, _:7, Rest/binary>>, Z1, Z2,
-		    F@_1, F@_2, TrUserData) ->
-    dfp_read_field_def_Package(Rest, Z1, Z2, F@_1, F@_2,
+		    F@_1, TrUserData) ->
+    dfp_read_field_def_Package(Rest, Z1, Z2, F@_1,
 			       TrUserData).
 
 skip_length_delimited_Package(<<1:1, X:7, Rest/binary>>,
-			      N, Acc, F@_1, F@_2, TrUserData)
+			      N, Acc, F@_1, TrUserData)
     when N < 57 ->
     skip_length_delimited_Package(Rest, N + 7,
-				  X bsl N + Acc, F@_1, F@_2, TrUserData);
+				  X bsl N + Acc, F@_1, TrUserData);
 skip_length_delimited_Package(<<0:1, X:7, Rest/binary>>,
-			      N, Acc, F@_1, F@_2, TrUserData) ->
+			      N, Acc, F@_1, TrUserData) ->
     Length = X bsl N + Acc,
     <<_:Length/binary, Rest2/binary>> = Rest,
-    dfp_read_field_def_Package(Rest2, 0, 0, F@_1, F@_2,
+    dfp_read_field_def_Package(Rest2, 0, 0, F@_1,
 			       TrUserData).
 
-skip_group_Package(Bin, FNum, Z2, F@_1, F@_2,
-		   TrUserData) ->
+skip_group_Package(Bin, FNum, Z2, F@_1, TrUserData) ->
     {_, Rest} = read_group(Bin, FNum),
-    dfp_read_field_def_Package(Rest, 0, Z2, F@_1, F@_2,
+    dfp_read_field_def_Package(Rest, 0, Z2, F@_1,
 			       TrUserData).
 
 skip_32_Package(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
-		F@_2, TrUserData) ->
-    dfp_read_field_def_Package(Rest, Z1, Z2, F@_1, F@_2,
+		TrUserData) ->
+    dfp_read_field_def_Package(Rest, Z1, Z2, F@_1,
 			       TrUserData).
 
 skip_64_Package(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
-		F@_2, TrUserData) ->
-    dfp_read_field_def_Package(Rest, Z1, Z2, F@_1, F@_2,
+		TrUserData) ->
+    dfp_read_field_def_Package(Rest, Z1, Z2, F@_1,
 			       TrUserData).
 
 read_group(Bin, FieldNum) ->
@@ -457,7 +500,7 @@ read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
     <<_:Len/binary, Tl2/binary>> = Tl,
     read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).
 
-merge_msgs(Prev, New, MsgName) ->
+merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
     merge_msgs(Prev, New, MsgName, []).
 
 merge_msgs(Prev, New, MsgName, Opts) ->
@@ -467,6 +510,7 @@ merge_msgs(Prev, New, MsgName, Opts) ->
       'Package' -> merge_msg_Package(Prev, New, TrUserData)
     end.
 
+-compile({nowarn_unused_function,merge_msg_Names/3}).
 merge_msg_Names(#{} = PMsg,
 		#{repository := NFrepository} = NMsg, TrUserData) ->
     S1 = #{repository => NFrepository},
@@ -482,31 +526,24 @@ merge_msg_Names(#{} = PMsg,
       {_, _} -> S1
     end.
 
-merge_msg_Package(#{} = PMsg, #{name := NFname} = NMsg,
-		  _) ->
-    S1 = #{name => NFname},
-    case {PMsg, NMsg} of
-      {_, #{repository := NFrepository}} ->
-	  S1#{repository => NFrepository};
-      {#{repository := PFrepository}, _} ->
-	  S1#{repository => PFrepository};
-      _ -> S1
-    end.
+-compile({nowarn_unused_function,merge_msg_Package/3}).
+merge_msg_Package(#{}, #{name := NFname}, _) ->
+    #{name => NFname}.
 
 
-verify_msg(Msg, MsgName) ->
+verify_msg(Msg, MsgName) when is_atom(MsgName) ->
     verify_msg(Msg, MsgName, []).
 
 verify_msg(Msg, MsgName, Opts) ->
     TrUserData = proplists:get_value(user_data, Opts),
     case MsgName of
-      'Names' -> v_msg_Names(Msg, ['Names'], TrUserData);
-      'Package' ->
-	  v_msg_Package(Msg, ['Package'], TrUserData);
+      'Names' -> v_msg_Names(Msg, [MsgName], TrUserData);
+      'Package' -> v_msg_Package(Msg, [MsgName], TrUserData);
       _ -> mk_type_error(not_a_known_message, Msg, [])
     end.
 
 
+-compile({nowarn_unused_function,v_msg_Names/3}).
 v_msg_Names(#{repository := F2} = M, Path,
 	    TrUserData) ->
     case M of
@@ -521,7 +558,7 @@ v_msg_Names(#{repository := F2} = M, Path,
 	  end;
       _ -> ok
     end,
-    v_type_string(F2, [repository | Path]),
+    v_type_string(F2, [repository | Path], TrUserData),
     lists:foreach(fun (packages) -> ok;
 		      (repository) -> ok;
 		      (OtherKey) ->
@@ -536,15 +573,10 @@ v_msg_Names(M, Path, _TrUserData) when is_map(M) ->
 v_msg_Names(X, Path, _TrUserData) ->
     mk_type_error({expected_msg, 'Names'}, X, Path).
 
-v_msg_Package(#{name := F1} = M, Path, _) ->
-    v_type_string(F1, [name | Path]),
-    case M of
-      #{repository := F2} ->
-	  v_type_string(F2, [repository | Path]);
-      _ -> ok
-    end,
+-compile({nowarn_unused_function,v_msg_Package/3}).
+v_msg_Package(#{name := F1} = M, Path, TrUserData) ->
+    v_type_string(F1, [name | Path], TrUserData),
     lists:foreach(fun (name) -> ok;
-		      (repository) -> ok;
 		      (OtherKey) ->
 			  mk_type_error({extraneous_key, OtherKey}, M, Path)
 		  end,
@@ -557,7 +589,9 @@ v_msg_Package(M, Path, _TrUserData) when is_map(M) ->
 v_msg_Package(X, Path, _TrUserData) ->
     mk_type_error({expected_msg, 'Package'}, X, Path).
 
-v_type_string(S, Path) when is_list(S); is_binary(S) ->
+-compile({nowarn_unused_function,v_type_string/3}).
+v_type_string(S, Path, _TrUserData)
+    when is_list(S); is_binary(S) ->
     try unicode:characters_to_binary(S) of
       B when is_binary(B) -> ok;
       {error, _, _} ->
@@ -566,31 +600,45 @@ v_type_string(S, Path) when is_list(S); is_binary(S) ->
       error:badarg ->
 	  mk_type_error(bad_unicode_string, S, Path)
     end;
-v_type_string(X, Path) ->
+v_type_string(X, Path, _TrUserData) ->
     mk_type_error(bad_unicode_string, X, Path).
 
+-compile({nowarn_unused_function,mk_type_error/3}).
 -spec mk_type_error(_, _, list()) -> no_return().
 mk_type_error(Error, ValueSeen, Path) ->
     Path2 = prettify_path(Path),
     erlang:error({gpb_type_error,
 		  {Error, [{value, ValueSeen}, {path, Path2}]}}).
 
 
+-compile({nowarn_unused_function,prettify_path/1}).
 prettify_path([]) -> top_level;
 prettify_path(PathR) ->
     list_to_atom(string:join(lists:map(fun atom_to_list/1,
 				       lists:reverse(PathR)),
 			     ".")).
 
 
+-compile({nowarn_unused_function,id/2}).
 -compile({inline,id/2}).
 id(X, _TrUserData) -> X.
 
+-compile({nowarn_unused_function,v_ok/3}).
+-compile({inline,v_ok/3}).
+v_ok(_Value, _Path, _TrUserData) -> ok.
+
+-compile({nowarn_unused_function,m_overwrite/3}).
+-compile({inline,m_overwrite/3}).
+m_overwrite(_Prev, New, _TrUserData) -> New.
+
+-compile({nowarn_unused_function,cons/3}).
 -compile({inline,cons/3}).
 cons(Elem, Acc, _TrUserData) -> [Elem | Acc].
 
+-compile({nowarn_unused_function,lists_reverse/2}).
 -compile({inline,lists_reverse/2}).
 'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
+-compile({nowarn_unused_function,'erlang_++'/3}).
 -compile({inline,'erlang_++'/3}).
 'erlang_++'(A, B, _TrUserData) -> A ++ B.
 
@@ -603,9 +651,7 @@ get_msg_defs() ->
 	 type => string, occurrence => required, opts => []}]},
      {{msg, 'Package'},
       [#{name => name, fnum => 1, rnum => 2, type => string,
-	 occurrence => required, opts => []},
-       #{name => repository, fnum => 2, rnum => 3,
-	 type => string, occurrence => optional, opts => []}]}].
+	 occurrence => required, opts => []}]}].
 
 
 get_msg_names() -> ['Names', 'Package'].
@@ -640,9 +686,7 @@ find_msg_def('Names') ->
        type => string, occurrence => required, opts => []}];
 find_msg_def('Package') ->
     [#{name => name, fnum => 1, rnum => 2, type => string,
-       occurrence => required, opts => []},
-     #{name => repository, fnum => 2, rnum => 3,
-       type => string, occurrence => optional, opts => []}];
+       occurrence => required, opts => []}];
 find_msg_def(_) -> error.
 
 
@@ -683,7 +727,7 @@ get_package_name() -> undefined.
 
 
 gpb_version_as_string() ->
-    "4.2.1".
+    "4.3.1".
 
 gpb_version_as_list() ->
-    [4,2,1].
+    [4,3,1].
