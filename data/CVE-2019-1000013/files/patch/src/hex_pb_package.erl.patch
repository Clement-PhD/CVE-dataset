@@ -1,6 +1,6 @@
 %% -*- coding: utf-8 -*-
 %% Automatically generated, do not edit
-%% Generated by gpb_compile version 4.2.1
+%% Generated by gpb_compile version 4.3.1
 -module(hex_pb_package).
 
 -export([encode_msg/2, encode_msg/3]).
@@ -34,44 +34,49 @@
         name                    => iodata(),        % = 2
         repository              => iodata()         % = 3
        }.
+
 -type 'Release'() ::
       #{version                 => iodata(),        % = 1
         checksum                => iodata(),        % = 2
         dependencies            => ['Dependency'()] % = 3
         %% retired              => 'RetirementStatus'() % = 4
        }.
+
 -type 'RetirementStatus'() ::
       #{reason                  => 'RETIRED_OTHER' | 'RETIRED_INVALID' | 'RETIRED_SECURITY' | 'RETIRED_DEPRECATED' | 'RETIRED_RENAMED' | integer() % = 1, enum RetirementReason
         %% message              => iodata()         % = 2
        }.
+
 -type 'Dependency'() ::
       #{package                 => iodata(),        % = 1
         requirement             => iodata()         % = 2
         %% optional             => boolean() | 0 | 1 % = 3
         %% app                  => iodata()         % = 4
         %% repository           => iodata()         % = 5
        }.
+
 -export_type(['Package'/0, 'Release'/0, 'RetirementStatus'/0, 'Dependency'/0]).
 
--spec encode_msg('Package'() | 'Release'() | 'RetirementStatus'() | 'Dependency'(),'Package' | 'Release' | 'RetirementStatus' | 'Dependency') -> binary().
-encode_msg(Msg, MsgName) ->
+-spec encode_msg('Package'() | 'Release'() | 'RetirementStatus'() | 'Dependency'(), atom()) -> binary().
+encode_msg(Msg, MsgName) when is_atom(MsgName) ->
     encode_msg(Msg, MsgName, []).
 
-
--spec encode_msg('Package'() | 'Release'() | 'RetirementStatus'() | 'Dependency'(),'Package' | 'Release' | 'RetirementStatus' | 'Dependency', list()) -> binary().
+-spec encode_msg('Package'() | 'Release'() | 'RetirementStatus'() | 'Dependency'(), atom(), list()) -> binary().
 encode_msg(Msg, MsgName, Opts) ->
     verify_msg(Msg, MsgName, Opts),
     TrUserData = proplists:get_value(user_data, Opts),
     case MsgName of
-      'Package' -> e_msg_Package(Msg, TrUserData);
-      'Release' -> e_msg_Release(Msg, TrUserData);
+      'Package' ->
+	  e_msg_Package(id(Msg, TrUserData), TrUserData);
+      'Release' ->
+	  e_msg_Release(id(Msg, TrUserData), TrUserData);
       'RetirementStatus' ->
-	  e_msg_RetirementStatus(Msg, TrUserData);
-      'Dependency' -> e_msg_Dependency(Msg, TrUserData)
+	  e_msg_RetirementStatus(id(Msg, TrUserData), TrUserData);
+      'Dependency' ->
+	  e_msg_Dependency(id(Msg, TrUserData), TrUserData)
     end.
 
 
-
 e_msg_Package(Msg, TrUserData) ->
     e_msg_Package(Msg, <<>>, TrUserData).
 
@@ -88,11 +93,11 @@ e_msg_Package(#{name := F2, repository := F3} = M, Bin,
 	 end,
     B2 = begin
 	   TrF2 = id(F2, TrUserData),
-	   e_type_string(TrF2, <<B1/binary, 18>>)
+	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
 	 end,
     begin
       TrF3 = id(F3, TrUserData),
-      e_type_string(TrF3, <<B2/binary, 26>>)
+      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
     end.
 
 e_msg_Release(Msg, TrUserData) ->
@@ -103,11 +108,11 @@ e_msg_Release(#{version := F1, checksum := F2} = M, Bin,
 	      TrUserData) ->
     B1 = begin
 	   TrF1 = id(F1, TrUserData),
-	   e_type_string(TrF1, <<Bin/binary, 10>>)
+	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
 	 end,
     B2 = begin
 	   TrF2 = id(F2, TrUserData),
-	   e_type_bytes(TrF2, <<B1/binary, 18>>)
+	   e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
 	 end,
     B3 = case M of
 	   #{dependencies := F3} ->
@@ -136,13 +141,14 @@ e_msg_RetirementStatus(#{reason := F1} = M, Bin,
 		       TrUserData) ->
     B1 = begin
 	   TrF1 = id(F1, TrUserData),
-	   e_enum_RetirementReason(TrF1, <<Bin/binary, 8>>)
+	   e_enum_RetirementReason(TrF1, <<Bin/binary, 8>>,
+				   TrUserData)
 	 end,
     case M of
       #{message := F2} ->
 	  begin
 	    TrF2 = id(F2, TrUserData),
-	    e_type_string(TrF2, <<B1/binary, 18>>)
+	    e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
 	  end;
       _ -> B1
     end.
@@ -156,33 +162,33 @@ e_msg_Dependency(#{package := F1, requirement := F2} =
 		 Bin, TrUserData) ->
     B1 = begin
 	   TrF1 = id(F1, TrUserData),
-	   e_type_string(TrF1, <<Bin/binary, 10>>)
+	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
 	 end,
     B2 = begin
 	   TrF2 = id(F2, TrUserData),
-	   e_type_string(TrF2, <<B1/binary, 18>>)
+	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
 	 end,
     B3 = case M of
 	   #{optional := F3} ->
 	       begin
 		 TrF3 = id(F3, TrUserData),
-		 e_type_bool(TrF3, <<B2/binary, 24>>)
+		 e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
 	       end;
 	   _ -> B2
 	 end,
     B4 = case M of
 	   #{app := F4} ->
 	       begin
 		 TrF4 = id(F4, TrUserData),
-		 e_type_string(TrF4, <<B3/binary, 34>>)
+		 e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
 	       end;
 	   _ -> B3
 	 end,
     case M of
       #{repository := F5} ->
 	  begin
 	    TrF5 = id(F5, TrUserData),
-	    e_type_string(TrF5, <<B4/binary, 42>>)
+	    e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
 	  end;
       _ -> B4
     end.
@@ -220,36 +226,111 @@ e_mfield_Release_retired(Msg, Bin, TrUserData) ->
     Bin2 = e_varint(byte_size(SubBin), Bin),
     <<Bin2/binary, SubBin/binary>>.
 
-e_enum_RetirementReason('RETIRED_OTHER', Bin) ->
+e_enum_RetirementReason('RETIRED_OTHER', Bin,
+			_TrUserData) ->
     <<Bin/binary, 0>>;
-e_enum_RetirementReason('RETIRED_INVALID', Bin) ->
+e_enum_RetirementReason('RETIRED_INVALID', Bin,
+			_TrUserData) ->
     <<Bin/binary, 1>>;
-e_enum_RetirementReason('RETIRED_SECURITY', Bin) ->
+e_enum_RetirementReason('RETIRED_SECURITY', Bin,
+			_TrUserData) ->
     <<Bin/binary, 2>>;
-e_enum_RetirementReason('RETIRED_DEPRECATED', Bin) ->
+e_enum_RetirementReason('RETIRED_DEPRECATED', Bin,
+			_TrUserData) ->
     <<Bin/binary, 3>>;
-e_enum_RetirementReason('RETIRED_RENAMED', Bin) ->
+e_enum_RetirementReason('RETIRED_RENAMED', Bin,
+			_TrUserData) ->
     <<Bin/binary, 4>>;
-e_enum_RetirementReason(V, Bin) -> e_varint(V, Bin).
-
-e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
-e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
-e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
-e_type_bool(0, Bin) -> <<Bin/binary, 0>>.
+e_enum_RetirementReason(V, Bin, _TrUserData) ->
+    e_varint(V, Bin).
+
+-compile({nowarn_unused_function,e_type_sint/3}).
+e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
+    e_varint(Value * 2, Bin);
+e_type_sint(Value, Bin, _TrUserData) ->
+    e_varint(Value * -2 - 1, Bin).
+
+-compile({nowarn_unused_function,e_type_int32/3}).
+e_type_int32(Value, Bin, _TrUserData)
+    when 0 =< Value, Value =< 127 ->
+    <<Bin/binary, Value>>;
+e_type_int32(Value, Bin, _TrUserData) ->
+    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
+    e_varint(N, Bin).
+
+-compile({nowarn_unused_function,e_type_int64/3}).
+e_type_int64(Value, Bin, _TrUserData)
+    when 0 =< Value, Value =< 127 ->
+    <<Bin/binary, Value>>;
+e_type_int64(Value, Bin, _TrUserData) ->
+    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
+    e_varint(N, Bin).
+
+-compile({nowarn_unused_function,e_type_bool/3}).
+e_type_bool(true, Bin, _TrUserData) ->
+    <<Bin/binary, 1>>;
+e_type_bool(false, Bin, _TrUserData) ->
+    <<Bin/binary, 0>>;
+e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
+e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.
 
-e_type_string(S, Bin) ->
+-compile({nowarn_unused_function,e_type_string/3}).
+e_type_string(S, Bin, _TrUserData) ->
     Utf8 = unicode:characters_to_binary(S),
     Bin2 = e_varint(byte_size(Utf8), Bin),
     <<Bin2/binary, Utf8/binary>>.
 
-e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
+-compile({nowarn_unused_function,e_type_bytes/3}).
+e_type_bytes(Bytes, Bin, _TrUserData)
+    when is_binary(Bytes) ->
     Bin2 = e_varint(byte_size(Bytes), Bin),
     <<Bin2/binary, Bytes/binary>>;
-e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
+e_type_bytes(Bytes, Bin, _TrUserData)
+    when is_list(Bytes) ->
     BytesBin = iolist_to_binary(Bytes),
     Bin2 = e_varint(byte_size(BytesBin), Bin),
     <<Bin2/binary, BytesBin/binary>>.
 
+-compile({nowarn_unused_function,e_type_fixed32/3}).
+e_type_fixed32(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:32/little>>.
+
+-compile({nowarn_unused_function,e_type_sfixed32/3}).
+e_type_sfixed32(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:32/little-signed>>.
+
+-compile({nowarn_unused_function,e_type_fixed64/3}).
+e_type_fixed64(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:64/little>>.
+
+-compile({nowarn_unused_function,e_type_sfixed64/3}).
+e_type_sfixed64(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:64/little-signed>>.
+
+-compile({nowarn_unused_function,e_type_float/3}).
+e_type_float(V, Bin, _) when is_number(V) ->
+    <<Bin/binary, V:32/little-float>>;
+e_type_float(infinity, Bin, _) ->
+    <<Bin/binary, 0:16, 128, 127>>;
+e_type_float('-infinity', Bin, _) ->
+    <<Bin/binary, 0:16, 128, 255>>;
+e_type_float(nan, Bin, _) ->
+    <<Bin/binary, 0:16, 192, 127>>.
+
+-compile({nowarn_unused_function,e_type_double/3}).
+e_type_double(V, Bin, _) when is_number(V) ->
+    <<Bin/binary, V:64/little-float>>;
+e_type_double(infinity, Bin, _) ->
+    <<Bin/binary, 0:48, 240, 127>>;
+e_type_double('-infinity', Bin, _) ->
+    <<Bin/binary, 0:48, 240, 255>>;
+e_type_double(nan, Bin, _) ->
+    <<Bin/binary, 0:48, 248, 127>>.
+
+-compile({nowarn_unused_function,e_varint/3}).
+e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).
+
+-compile({nowarn_unused_function,e_varint/2}).
 e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
 e_varint(N, Bin) ->
     Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
@@ -286,14 +367,14 @@ decode_msg_1_catch(Bin, MsgName, TrUserData) ->
 -endif.
 
 decode_msg_2_doit('Package', Bin, TrUserData) ->
-    d_msg_Package(Bin, TrUserData);
+    id(d_msg_Package(Bin, TrUserData), TrUserData);
 decode_msg_2_doit('Release', Bin, TrUserData) ->
-    d_msg_Release(Bin, TrUserData);
+    id(d_msg_Release(Bin, TrUserData), TrUserData);
 decode_msg_2_doit('RetirementStatus', Bin,
 		  TrUserData) ->
-    d_msg_RetirementStatus(Bin, TrUserData);
+    id(d_msg_RetirementStatus(Bin, TrUserData), TrUserData);
 decode_msg_2_doit('Dependency', Bin, TrUserData) ->
-    d_msg_Dependency(Bin, TrUserData).
+    id(d_msg_Dependency(Bin, TrUserData), TrUserData).
 
 
 
@@ -316,8 +397,10 @@ dfp_read_field_def_Package(<<26, Rest/binary>>, Z1, Z2,
 			       F@_3, TrUserData);
 dfp_read_field_def_Package(<<>>, 0, 0, R1, F@_2, F@_3,
 			   TrUserData) ->
-    #{releases => lists_reverse(R1, TrUserData),
-      name => F@_2, repository => F@_3};
+    S1 = #{name => F@_2, repository => F@_3},
+    if R1 == '$undef' -> S1;
+       true -> S1#{releases => lists_reverse(R1, TrUserData)}
+    end;
 dfp_read_field_def_Package(Other, Z1, Z2, F@_1, F@_2,
 			   F@_3, TrUserData) ->
     dg_read_field_def_Package(Other, Z1, Z2, F@_1, F@_2,
@@ -362,8 +445,10 @@ dg_read_field_def_Package(<<0:1, X:7, Rest/binary>>, N,
     end;
 dg_read_field_def_Package(<<>>, 0, 0, R1, F@_2, F@_3,
 			  TrUserData) ->
-    #{releases => lists_reverse(R1, TrUserData),
-      name => F@_2, repository => F@_3}.
+    S1 = #{name => F@_2, repository => F@_3},
+    if R1 == '$undef' -> S1;
+       true -> S1#{releases => lists_reverse(R1, TrUserData)}
+    end.
 
 d_field_Package_releases(<<1:1, X:7, Rest/binary>>, N,
 			 Acc, F@_1, F@_2, F@_3, TrUserData)
@@ -392,7 +477,7 @@ d_field_Package_name(<<0:1, X:7, Rest/binary>>, N, Acc,
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Package(RestF, 0, 0, F@_1, NewFValue,
 			       F@_3, TrUserData).
@@ -407,7 +492,7 @@ d_field_Package_repository(<<0:1, X:7, Rest/binary>>, N,
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Package(RestF, 0, 0, F@_1, F@_2,
 			       NewFValue, TrUserData).
@@ -473,10 +558,13 @@ dfp_read_field_def_Release(<<34, Rest/binary>>, Z1, Z2,
 			    F@_4, TrUserData);
 dfp_read_field_def_Release(<<>>, 0, 0, F@_1, F@_2, R1,
 			   F@_4, TrUserData) ->
-    S1 = #{version => F@_1, checksum => F@_2,
-	   dependencies => lists_reverse(R1, TrUserData)},
-    if F@_4 == '$undef' -> S1;
-       true -> S1#{retired => F@_4}
+    S1 = #{version => F@_1, checksum => F@_2},
+    S2 = if R1 == '$undef' -> S1;
+	    true ->
+		S1#{dependencies => lists_reverse(R1, TrUserData)}
+	 end,
+    if F@_4 == '$undef' -> S2;
+       true -> S2#{retired => F@_4}
     end;
 dfp_read_field_def_Release(Other, Z1, Z2, F@_1, F@_2,
 			   F@_3, F@_4, TrUserData) ->
@@ -525,10 +613,13 @@ dg_read_field_def_Release(<<0:1, X:7, Rest/binary>>, N,
     end;
 dg_read_field_def_Release(<<>>, 0, 0, F@_1, F@_2, R1,
 			  F@_4, TrUserData) ->
-    S1 = #{version => F@_1, checksum => F@_2,
-	   dependencies => lists_reverse(R1, TrUserData)},
-    if F@_4 == '$undef' -> S1;
-       true -> S1#{retired => F@_4}
+    S1 = #{version => F@_1, checksum => F@_2},
+    S2 = if R1 == '$undef' -> S1;
+	    true ->
+		S1#{dependencies => lists_reverse(R1, TrUserData)}
+	 end,
+    if F@_4 == '$undef' -> S2;
+       true -> S2#{retired => F@_4}
     end.
 
 d_field_Release_version(<<1:1, X:7, Rest/binary>>, N,
@@ -541,7 +632,7 @@ d_field_Release_version(<<0:1, X:7, Rest/binary>>, N,
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Release(RestF, 0, 0, NewFValue, F@_2,
 			       F@_3, F@_4, TrUserData).
@@ -556,7 +647,7 @@ d_field_Release_checksum(<<0:1, X:7, Rest/binary>>, N,
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Release(RestF, 0, 0, F@_1, NewFValue,
 			       F@_3, F@_4, TrUserData).
@@ -716,12 +807,13 @@ d_field_RetirementStatus_reason(<<1:1, X:7,
 d_field_RetirementStatus_reason(<<0:1, X:7,
 				  Rest/binary>>,
 				N, Acc, _, F@_2, TrUserData) ->
-    {NewFValue, RestF} = {d_enum_RetirementReason(begin
-						    <<Res:32/signed-native>> =
-							<<(X bsl N +
-							     Acc):32/unsigned-native>>,
-						    Res
-						  end),
+    {NewFValue, RestF} = {id(d_enum_RetirementReason(begin
+						       <<Res:32/signed-native>> =
+							   <<(X bsl N +
+								Acc):32/unsigned-native>>,
+						       id(Res, TrUserData)
+						     end),
+			     TrUserData),
 			  Rest},
     dfp_read_field_def_RetirementStatus(RestF, 0, 0,
 					NewFValue, F@_2, TrUserData).
@@ -738,7 +830,7 @@ d_field_RetirementStatus_message(<<0:1, X:7,
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_RetirementStatus(RestF, 0, 0, F@_1,
 					NewFValue, TrUserData).
@@ -895,7 +987,7 @@ d_field_Dependency_package(<<0:1, X:7, Rest/binary>>, N,
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Dependency(RestF, 0, 0, NewFValue,
 				  F@_2, F@_3, F@_4, F@_5, TrUserData).
@@ -913,7 +1005,7 @@ d_field_Dependency_requirement(<<0:1, X:7,
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Dependency(RestF, 0, 0, F@_1,
 				  NewFValue, F@_3, F@_4, F@_5, TrUserData).
@@ -925,7 +1017,9 @@ d_field_Dependency_optional(<<1:1, X:7, Rest/binary>>,
 				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
 d_field_Dependency_optional(<<0:1, X:7, Rest/binary>>,
 			    N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
-    {NewFValue, RestF} = {X bsl N + Acc =/= 0, Rest},
+    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
+			     TrUserData),
+			  Rest},
     dfp_read_field_def_Dependency(RestF, 0, 0, F@_1, F@_2,
 				  NewFValue, F@_4, F@_5, TrUserData).
 
@@ -939,7 +1033,7 @@ d_field_Dependency_app(<<0:1, X:7, Rest/binary>>, N,
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Dependency(RestF, 0, 0, F@_1, F@_2,
 				  F@_3, NewFValue, F@_5, TrUserData).
@@ -955,7 +1049,7 @@ d_field_Dependency_repository(<<0:1, X:7, Rest/binary>>,
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Dependency(RestF, 0, 0, F@_1, F@_2,
 				  F@_3, F@_4, NewFValue, TrUserData).
@@ -1067,7 +1161,7 @@ read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
     <<_:Len/binary, Tl2/binary>> = Tl,
     read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).
 
-merge_msgs(Prev, New, MsgName) ->
+merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
     merge_msgs(Prev, New, MsgName, []).
 
 merge_msgs(Prev, New, MsgName, Opts) ->
@@ -1081,6 +1175,7 @@ merge_msgs(Prev, New, MsgName, Opts) ->
 	  merge_msg_Dependency(Prev, New, TrUserData)
     end.
 
+-compile({nowarn_unused_function,merge_msg_Package/3}).
 merge_msg_Package(#{} = PMsg,
 		  #{name := NFname, repository := NFrepository} = NMsg,
 		  TrUserData) ->
@@ -1097,6 +1192,7 @@ merge_msg_Package(#{} = PMsg,
       {_, _} -> S1
     end.
 
+-compile({nowarn_unused_function,merge_msg_Release/3}).
 merge_msg_Release(#{} = PMsg,
 		  #{version := NFversion, checksum := NFchecksum} = NMsg,
 		  TrUserData) ->
@@ -1125,6 +1221,7 @@ merge_msg_Release(#{} = PMsg,
       {_, _} -> S2
     end.
 
+-compile({nowarn_unused_function,merge_msg_RetirementStatus/3}).
 merge_msg_RetirementStatus(#{} = PMsg,
 			   #{reason := NFreason} = NMsg, _) ->
     S1 = #{reason => NFreason},
@@ -1136,6 +1233,7 @@ merge_msg_RetirementStatus(#{} = PMsg,
       _ -> S1
     end.
 
+-compile({nowarn_unused_function,merge_msg_Dependency/3}).
 merge_msg_Dependency(#{} = PMsg,
 		     #{package := NFpackage, requirement := NFrequirement} =
 			 NMsg,
@@ -1163,25 +1261,23 @@ merge_msg_Dependency(#{} = PMsg,
     end.
 
 
-verify_msg(Msg, MsgName) ->
+verify_msg(Msg, MsgName) when is_atom(MsgName) ->
     verify_msg(Msg, MsgName, []).
 
 verify_msg(Msg, MsgName, Opts) ->
     TrUserData = proplists:get_value(user_data, Opts),
     case MsgName of
-      'Package' ->
-	  v_msg_Package(Msg, ['Package'], TrUserData);
-      'Release' ->
-	  v_msg_Release(Msg, ['Release'], TrUserData);
+      'Package' -> v_msg_Package(Msg, [MsgName], TrUserData);
+      'Release' -> v_msg_Release(Msg, [MsgName], TrUserData);
       'RetirementStatus' ->
-	  v_msg_RetirementStatus(Msg, ['RetirementStatus'],
-				 TrUserData);
+	  v_msg_RetirementStatus(Msg, [MsgName], TrUserData);
       'Dependency' ->
-	  v_msg_Dependency(Msg, ['Dependency'], TrUserData);
+	  v_msg_Dependency(Msg, [MsgName], TrUserData);
       _ -> mk_type_error(not_a_known_message, Msg, [])
     end.
 
 
+-compile({nowarn_unused_function,v_msg_Package/3}).
 v_msg_Package(#{name := F2, repository := F3} = M, Path,
 	      TrUserData) ->
     case M of
@@ -1196,8 +1292,8 @@ v_msg_Package(#{name := F2, repository := F3} = M, Path,
 	  end;
       _ -> ok
     end,
-    v_type_string(F2, [name | Path]),
-    v_type_string(F3, [repository | Path]),
+    v_type_string(F2, [name | Path], TrUserData),
+    v_type_string(F3, [repository | Path], TrUserData),
     lists:foreach(fun (releases) -> ok;
 		      (name) -> ok;
 		      (repository) -> ok;
@@ -1213,10 +1309,11 @@ v_msg_Package(M, Path, _TrUserData) when is_map(M) ->
 v_msg_Package(X, Path, _TrUserData) ->
     mk_type_error({expected_msg, 'Package'}, X, Path).
 
+-compile({nowarn_unused_function,v_msg_Release/3}).
 v_msg_Release(#{version := F1, checksum := F2} = M,
 	      Path, TrUserData) ->
-    v_type_string(F1, [version | Path]),
-    v_type_bytes(F2, [checksum | Path]),
+    v_type_string(F1, [version | Path], TrUserData),
+    v_type_bytes(F2, [checksum | Path], TrUserData),
     case M of
       #{dependencies := F3} ->
 	  if is_list(F3) ->
@@ -1252,10 +1349,14 @@ v_msg_Release(M, Path, _TrUserData) when is_map(M) ->
 v_msg_Release(X, Path, _TrUserData) ->
     mk_type_error({expected_msg, 'Release'}, X, Path).
 
-v_msg_RetirementStatus(#{reason := F1} = M, Path, _) ->
-    v_enum_RetirementReason(F1, [reason | Path]),
+-compile({nowarn_unused_function,v_msg_RetirementStatus/3}).
+v_msg_RetirementStatus(#{reason := F1} = M, Path,
+		       TrUserData) ->
+    v_enum_RetirementReason(F1, [reason | Path],
+			    TrUserData),
     case M of
-      #{message := F2} -> v_type_string(F2, [message | Path]);
+      #{message := F2} ->
+	  v_type_string(F2, [message | Path], TrUserData);
       _ -> ok
     end,
     lists:foreach(fun (reason) -> ok;
@@ -1274,22 +1375,25 @@ v_msg_RetirementStatus(X, Path, _TrUserData) ->
     mk_type_error({expected_msg, 'RetirementStatus'}, X,
 		  Path).
 
+-compile({nowarn_unused_function,v_msg_Dependency/3}).
 v_msg_Dependency(#{package := F1, requirement := F2} =
 		     M,
-		 Path, _) ->
-    v_type_string(F1, [package | Path]),
-    v_type_string(F2, [requirement | Path]),
+		 Path, TrUserData) ->
+    v_type_string(F1, [package | Path], TrUserData),
+    v_type_string(F2, [requirement | Path], TrUserData),
     case M of
-      #{optional := F3} -> v_type_bool(F3, [optional | Path]);
+      #{optional := F3} ->
+	  v_type_bool(F3, [optional | Path], TrUserData);
       _ -> ok
     end,
     case M of
-      #{app := F4} -> v_type_string(F4, [app | Path]);
+      #{app := F4} ->
+	  v_type_string(F4, [app | Path], TrUserData);
       _ -> ok
     end,
     case M of
       #{repository := F5} ->
-	  v_type_string(F5, [repository | Path]);
+	  v_type_string(F5, [repository | Path], TrUserData);
       _ -> ok
     end,
     lists:foreach(fun (package) -> ok;
@@ -1309,37 +1413,52 @@ v_msg_Dependency(M, Path, _TrUserData) when is_map(M) ->
 v_msg_Dependency(X, Path, _TrUserData) ->
     mk_type_error({expected_msg, 'Dependency'}, X, Path).
 
-v_enum_RetirementReason('RETIRED_OTHER', _Path) -> ok;
-v_enum_RetirementReason('RETIRED_INVALID', _Path) -> ok;
-v_enum_RetirementReason('RETIRED_SECURITY', _Path) ->
+-compile({nowarn_unused_function,v_enum_RetirementReason/3}).
+v_enum_RetirementReason('RETIRED_OTHER', _Path,
+			_TrUserData) ->
     ok;
-v_enum_RetirementReason('RETIRED_DEPRECATED', _Path) ->
+v_enum_RetirementReason('RETIRED_INVALID', _Path,
+			_TrUserData) ->
     ok;
-v_enum_RetirementReason('RETIRED_RENAMED', _Path) -> ok;
-v_enum_RetirementReason(V, Path) when is_integer(V) ->
-    v_type_sint32(V, Path);
-v_enum_RetirementReason(X, Path) ->
+v_enum_RetirementReason('RETIRED_SECURITY', _Path,
+			_TrUserData) ->
+    ok;
+v_enum_RetirementReason('RETIRED_DEPRECATED', _Path,
+			_TrUserData) ->
+    ok;
+v_enum_RetirementReason('RETIRED_RENAMED', _Path,
+			_TrUserData) ->
+    ok;
+v_enum_RetirementReason(V, Path, TrUserData)
+    when is_integer(V) ->
+    v_type_sint32(V, Path, TrUserData);
+v_enum_RetirementReason(X, Path, _TrUserData) ->
     mk_type_error({invalid_enum, 'RetirementReason'}, X,
 		  Path).
 
-v_type_sint32(N, _Path)
+-compile({nowarn_unused_function,v_type_sint32/3}).
+v_type_sint32(N, _Path, _TrUserData)
     when -2147483648 =< N, N =< 2147483647 ->
     ok;
-v_type_sint32(N, Path) when is_integer(N) ->
+v_type_sint32(N, Path, _TrUserData)
+    when is_integer(N) ->
     mk_type_error({value_out_of_range, sint32, signed, 32},
 		  N, Path);
-v_type_sint32(X, Path) ->
+v_type_sint32(X, Path, _TrUserData) ->
     mk_type_error({bad_integer, sint32, signed, 32}, X,
 		  Path).
 
-v_type_bool(false, _Path) -> ok;
-v_type_bool(true, _Path) -> ok;
-v_type_bool(0, _Path) -> ok;
-v_type_bool(1, _Path) -> ok;
-v_type_bool(X, Path) ->
+-compile({nowarn_unused_function,v_type_bool/3}).
+v_type_bool(false, _Path, _TrUserData) -> ok;
+v_type_bool(true, _Path, _TrUserData) -> ok;
+v_type_bool(0, _Path, _TrUserData) -> ok;
+v_type_bool(1, _Path, _TrUserData) -> ok;
+v_type_bool(X, Path, _TrUserData) ->
     mk_type_error(bad_boolean_value, X, Path).
 
-v_type_string(S, Path) when is_list(S); is_binary(S) ->
+-compile({nowarn_unused_function,v_type_string/3}).
+v_type_string(S, Path, _TrUserData)
+    when is_list(S); is_binary(S) ->
     try unicode:characters_to_binary(S) of
       B when is_binary(B) -> ok;
       {error, _, _} ->
@@ -1348,36 +1467,53 @@ v_type_string(S, Path) when is_list(S); is_binary(S) ->
       error:badarg ->
 	  mk_type_error(bad_unicode_string, S, Path)
     end;
-v_type_string(X, Path) ->
+v_type_string(X, Path, _TrUserData) ->
     mk_type_error(bad_unicode_string, X, Path).
 
-v_type_bytes(B, _Path) when is_binary(B) -> ok;
-v_type_bytes(B, _Path) when is_list(B) -> ok;
-v_type_bytes(X, Path) ->
+-compile({nowarn_unused_function,v_type_bytes/3}).
+v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
+    ok;
+v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
+    ok;
+v_type_bytes(X, Path, _TrUserData) ->
     mk_type_error(bad_binary_value, X, Path).
 
+-compile({nowarn_unused_function,mk_type_error/3}).
 -spec mk_type_error(_, _, list()) -> no_return().
 mk_type_error(Error, ValueSeen, Path) ->
     Path2 = prettify_path(Path),
     erlang:error({gpb_type_error,
 		  {Error, [{value, ValueSeen}, {path, Path2}]}}).
 
 
+-compile({nowarn_unused_function,prettify_path/1}).
 prettify_path([]) -> top_level;
 prettify_path(PathR) ->
     list_to_atom(string:join(lists:map(fun atom_to_list/1,
 				       lists:reverse(PathR)),
 			     ".")).
 
 
+-compile({nowarn_unused_function,id/2}).
 -compile({inline,id/2}).
 id(X, _TrUserData) -> X.
 
+-compile({nowarn_unused_function,v_ok/3}).
+-compile({inline,v_ok/3}).
+v_ok(_Value, _Path, _TrUserData) -> ok.
+
+-compile({nowarn_unused_function,m_overwrite/3}).
+-compile({inline,m_overwrite/3}).
+m_overwrite(_Prev, New, _TrUserData) -> New.
+
+-compile({nowarn_unused_function,cons/3}).
 -compile({inline,cons/3}).
 cons(Elem, Acc, _TrUserData) -> [Elem | Acc].
 
+-compile({nowarn_unused_function,lists_reverse/2}).
 -compile({inline,lists_reverse/2}).
 'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
+-compile({nowarn_unused_function,'erlang_++'/3}).
 -compile({inline,'erlang_++'/3}).
 'erlang_++'(A, B, _TrUserData) -> A ++ B.
 
@@ -1555,7 +1691,7 @@ get_package_name() -> undefined.
 
 
 gpb_version_as_string() ->
-    "4.2.1".
+    "4.3.1".
 
 gpb_version_as_list() ->
-    [4,2,1].
+    [4,3,1].
