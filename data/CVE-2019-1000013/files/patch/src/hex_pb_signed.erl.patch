@@ -1,6 +1,6 @@
 %% -*- coding: utf-8 -*-
 %% Automatically generated, do not edit
-%% Generated by gpb_compile version 4.2.1
+%% Generated by gpb_compile version 4.3.1
 -module(hex_pb_signed).
 
 -export([encode_msg/2, encode_msg/3]).
@@ -32,49 +32,128 @@
       #{payload                 => iodata()         % = 1
         %% signature            => iodata()         % = 2
        }.
+
 -export_type(['Signed'/0]).
 
--spec encode_msg('Signed'(),'Signed') -> binary().
-encode_msg(Msg, MsgName) ->
+-spec encode_msg('Signed'(), atom()) -> binary().
+encode_msg(Msg, MsgName) when is_atom(MsgName) ->
     encode_msg(Msg, MsgName, []).
 
-
--spec encode_msg('Signed'(),'Signed', list()) -> binary().
+-spec encode_msg('Signed'(), atom(), list()) -> binary().
 encode_msg(Msg, MsgName, Opts) ->
     verify_msg(Msg, MsgName, Opts),
     TrUserData = proplists:get_value(user_data, Opts),
     case MsgName of
-      'Signed' -> e_msg_Signed(Msg, TrUserData)
+      'Signed' ->
+	  e_msg_Signed(id(Msg, TrUserData), TrUserData)
     end.
 
 
-
 e_msg_Signed(Msg, TrUserData) ->
     e_msg_Signed(Msg, <<>>, TrUserData).
 
 
 e_msg_Signed(#{payload := F1} = M, Bin, TrUserData) ->
     B1 = begin
 	   TrF1 = id(F1, TrUserData),
-	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
+	   e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
 	 end,
     case M of
       #{signature := F2} ->
 	  begin
 	    TrF2 = id(F2, TrUserData),
-	    e_type_bytes(TrF2, <<B1/binary, 18>>)
+	    e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
 	  end;
       _ -> B1
     end.
 
-e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
+-compile({nowarn_unused_function,e_type_sint/3}).
+e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
+    e_varint(Value * 2, Bin);
+e_type_sint(Value, Bin, _TrUserData) ->
+    e_varint(Value * -2 - 1, Bin).
+
+-compile({nowarn_unused_function,e_type_int32/3}).
+e_type_int32(Value, Bin, _TrUserData)
+    when 0 =< Value, Value =< 127 ->
+    <<Bin/binary, Value>>;
+e_type_int32(Value, Bin, _TrUserData) ->
+    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
+    e_varint(N, Bin).
+
+-compile({nowarn_unused_function,e_type_int64/3}).
+e_type_int64(Value, Bin, _TrUserData)
+    when 0 =< Value, Value =< 127 ->
+    <<Bin/binary, Value>>;
+e_type_int64(Value, Bin, _TrUserData) ->
+    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
+    e_varint(N, Bin).
+
+-compile({nowarn_unused_function,e_type_bool/3}).
+e_type_bool(true, Bin, _TrUserData) ->
+    <<Bin/binary, 1>>;
+e_type_bool(false, Bin, _TrUserData) ->
+    <<Bin/binary, 0>>;
+e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
+e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.
+
+-compile({nowarn_unused_function,e_type_string/3}).
+e_type_string(S, Bin, _TrUserData) ->
+    Utf8 = unicode:characters_to_binary(S),
+    Bin2 = e_varint(byte_size(Utf8), Bin),
+    <<Bin2/binary, Utf8/binary>>.
+
+-compile({nowarn_unused_function,e_type_bytes/3}).
+e_type_bytes(Bytes, Bin, _TrUserData)
+    when is_binary(Bytes) ->
     Bin2 = e_varint(byte_size(Bytes), Bin),
     <<Bin2/binary, Bytes/binary>>;
-e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
+e_type_bytes(Bytes, Bin, _TrUserData)
+    when is_list(Bytes) ->
     BytesBin = iolist_to_binary(Bytes),
     Bin2 = e_varint(byte_size(BytesBin), Bin),
     <<Bin2/binary, BytesBin/binary>>.
 
+-compile({nowarn_unused_function,e_type_fixed32/3}).
+e_type_fixed32(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:32/little>>.
+
+-compile({nowarn_unused_function,e_type_sfixed32/3}).
+e_type_sfixed32(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:32/little-signed>>.
+
+-compile({nowarn_unused_function,e_type_fixed64/3}).
+e_type_fixed64(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:64/little>>.
+
+-compile({nowarn_unused_function,e_type_sfixed64/3}).
+e_type_sfixed64(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:64/little-signed>>.
+
+-compile({nowarn_unused_function,e_type_float/3}).
+e_type_float(V, Bin, _) when is_number(V) ->
+    <<Bin/binary, V:32/little-float>>;
+e_type_float(infinity, Bin, _) ->
+    <<Bin/binary, 0:16, 128, 127>>;
+e_type_float('-infinity', Bin, _) ->
+    <<Bin/binary, 0:16, 128, 255>>;
+e_type_float(nan, Bin, _) ->
+    <<Bin/binary, 0:16, 192, 127>>.
+
+-compile({nowarn_unused_function,e_type_double/3}).
+e_type_double(V, Bin, _) when is_number(V) ->
+    <<Bin/binary, V:64/little-float>>;
+e_type_double(infinity, Bin, _) ->
+    <<Bin/binary, 0:48, 240, 127>>;
+e_type_double('-infinity', Bin, _) ->
+    <<Bin/binary, 0:48, 240, 255>>;
+e_type_double(nan, Bin, _) ->
+    <<Bin/binary, 0:48, 248, 127>>.
+
+-compile({nowarn_unused_function,e_varint/3}).
+e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).
+
+-compile({nowarn_unused_function,e_varint/2}).
 e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
 e_varint(N, Bin) ->
     Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
@@ -111,7 +190,7 @@ decode_msg_1_catch(Bin, MsgName, TrUserData) ->
 -endif.
 
 decode_msg_2_doit('Signed', Bin, TrUserData) ->
-    d_msg_Signed(Bin, TrUserData).
+    id(d_msg_Signed(Bin, TrUserData), TrUserData).
 
 
 
@@ -183,7 +262,7 @@ d_field_Signed_payload(<<0:1, X:7, Rest/binary>>, N,
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Signed(RestF, 0, 0, NewFValue, F@_2,
 			      TrUserData).
@@ -198,7 +277,7 @@ d_field_Signed_signature(<<0:1, X:7, Rest/binary>>, N,
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Signed(RestF, 0, 0, F@_1, NewFValue,
 			      TrUserData).
@@ -298,7 +377,7 @@ read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
     <<_:Len/binary, Tl2/binary>> = Tl,
     read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).
 
-merge_msgs(Prev, New, MsgName) ->
+merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
     merge_msgs(Prev, New, MsgName, []).
 
 merge_msgs(Prev, New, MsgName, Opts) ->
@@ -307,6 +386,7 @@ merge_msgs(Prev, New, MsgName, Opts) ->
       'Signed' -> merge_msg_Signed(Prev, New, TrUserData)
     end.
 
+-compile({nowarn_unused_function,merge_msg_Signed/3}).
 merge_msg_Signed(#{} = PMsg,
 		 #{payload := NFpayload} = NMsg, _) ->
     S1 = #{payload => NFpayload},
@@ -319,22 +399,23 @@ merge_msg_Signed(#{} = PMsg,
     end.
 
 
-verify_msg(Msg, MsgName) ->
+verify_msg(Msg, MsgName) when is_atom(MsgName) ->
     verify_msg(Msg, MsgName, []).
 
 verify_msg(Msg, MsgName, Opts) ->
     TrUserData = proplists:get_value(user_data, Opts),
     case MsgName of
-      'Signed' -> v_msg_Signed(Msg, ['Signed'], TrUserData);
+      'Signed' -> v_msg_Signed(Msg, [MsgName], TrUserData);
       _ -> mk_type_error(not_a_known_message, Msg, [])
     end.
 
 
-v_msg_Signed(#{payload := F1} = M, Path, _) ->
-    v_type_bytes(F1, [payload | Path]),
+-compile({nowarn_unused_function,v_msg_Signed/3}).
+v_msg_Signed(#{payload := F1} = M, Path, TrUserData) ->
+    v_type_bytes(F1, [payload | Path], TrUserData),
     case M of
       #{signature := F2} ->
-	  v_type_bytes(F2, [signature | Path]);
+	  v_type_bytes(F2, [signature | Path], TrUserData);
       _ -> ok
     end,
     lists:foreach(fun (payload) -> ok;
@@ -351,28 +432,52 @@ v_msg_Signed(M, Path, _TrUserData) when is_map(M) ->
 v_msg_Signed(X, Path, _TrUserData) ->
     mk_type_error({expected_msg, 'Signed'}, X, Path).
 
-v_type_bytes(B, _Path) when is_binary(B) -> ok;
-v_type_bytes(B, _Path) when is_list(B) -> ok;
-v_type_bytes(X, Path) ->
+-compile({nowarn_unused_function,v_type_bytes/3}).
+v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
+    ok;
+v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
+    ok;
+v_type_bytes(X, Path, _TrUserData) ->
     mk_type_error(bad_binary_value, X, Path).
 
+-compile({nowarn_unused_function,mk_type_error/3}).
 -spec mk_type_error(_, _, list()) -> no_return().
 mk_type_error(Error, ValueSeen, Path) ->
     Path2 = prettify_path(Path),
     erlang:error({gpb_type_error,
 		  {Error, [{value, ValueSeen}, {path, Path2}]}}).
 
 
+-compile({nowarn_unused_function,prettify_path/1}).
 prettify_path([]) -> top_level;
 prettify_path(PathR) ->
     list_to_atom(string:join(lists:map(fun atom_to_list/1,
 				       lists:reverse(PathR)),
 			     ".")).
 
 
+-compile({nowarn_unused_function,id/2}).
 -compile({inline,id/2}).
 id(X, _TrUserData) -> X.
 
+-compile({nowarn_unused_function,v_ok/3}).
+-compile({inline,v_ok/3}).
+v_ok(_Value, _Path, _TrUserData) -> ok.
+
+-compile({nowarn_unused_function,m_overwrite/3}).
+-compile({inline,m_overwrite/3}).
+m_overwrite(_Prev, New, _TrUserData) -> New.
+
+-compile({nowarn_unused_function,cons/3}).
+-compile({inline,cons/3}).
+cons(Elem, Acc, _TrUserData) -> [Elem | Acc].
+
+-compile({nowarn_unused_function,lists_reverse/2}).
+-compile({inline,lists_reverse/2}).
+'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
+-compile({nowarn_unused_function,'erlang_++'/3}).
+-compile({inline,'erlang_++'/3}).
+'erlang_++'(A, B, _TrUserData) -> A ++ B.
 
 get_msg_defs() ->
     [{{msg, 'Signed'},
@@ -451,7 +556,7 @@ get_package_name() -> undefined.
 
 
 gpb_version_as_string() ->
-    "4.2.1".
+    "4.3.1".
 
 gpb_version_as_list() ->
-    [4,2,1].
+    [4,3,1].
