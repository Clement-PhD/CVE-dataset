@@ -1,6 +1,6 @@
 %% -*- coding: utf-8 -*-
 %% Automatically generated, do not edit
-%% Generated by gpb_compile version 4.2.1
+%% Generated by gpb_compile version 4.3.1
 -module(hex_pb_versions).
 
 -export([encode_msg/2, encode_msg/3]).
@@ -32,30 +32,31 @@
       #{packages                => ['Package'()],   % = 1
         repository              => iodata()         % = 2
        }.
+
 -type 'Package'() ::
       #{name                    => iodata(),        % = 1
         versions                => [iodata()],      % = 2
         retired                 => [integer()]      % = 3, 32 bits
-        %% repository           => iodata()         % = 4
        }.
+
 -export_type(['Versions'/0, 'Package'/0]).
 
--spec encode_msg('Versions'() | 'Package'(),'Versions' | 'Package') -> binary().
-encode_msg(Msg, MsgName) ->
+-spec encode_msg('Versions'() | 'Package'(), atom()) -> binary().
+encode_msg(Msg, MsgName) when is_atom(MsgName) ->
     encode_msg(Msg, MsgName, []).
 
-
--spec encode_msg('Versions'() | 'Package'(),'Versions' | 'Package', list()) -> binary().
+-spec encode_msg('Versions'() | 'Package'(), atom(), list()) -> binary().
 encode_msg(Msg, MsgName, Opts) ->
     verify_msg(Msg, MsgName, Opts),
     TrUserData = proplists:get_value(user_data, Opts),
     case MsgName of
-      'Versions' -> e_msg_Versions(Msg, TrUserData);
-      'Package' -> e_msg_Package(Msg, TrUserData)
+      'Versions' ->
+	  e_msg_Versions(id(Msg, TrUserData), TrUserData);
+      'Package' ->
+	  e_msg_Package(id(Msg, TrUserData), TrUserData)
     end.
 
 
-
 e_msg_Versions(Msg, TrUserData) ->
     e_msg_Versions(Msg, <<>>, TrUserData).
 
@@ -72,7 +73,7 @@ e_msg_Versions(#{repository := F2} = M, Bin,
 	 end,
     begin
       TrF2 = id(F2, TrUserData),
-      e_type_string(TrF2, <<B1/binary, 18>>)
+      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
     end.
 
 e_msg_Package(Msg, TrUserData) ->
@@ -82,7 +83,7 @@ e_msg_Package(Msg, TrUserData) ->
 e_msg_Package(#{name := F1} = M, Bin, TrUserData) ->
     B1 = begin
 	   TrF1 = id(F1, TrUserData),
-	   e_type_string(TrF1, <<Bin/binary, 10>>)
+	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
 	 end,
     B2 = case M of
 	   #{versions := F2} ->
@@ -92,21 +93,13 @@ e_msg_Package(#{name := F1} = M, Bin, TrUserData) ->
 	       end;
 	   _ -> B1
 	 end,
-    B3 = case M of
-	   #{retired := F3} ->
-	       TrF3 = id(F3, TrUserData),
-	       if TrF3 == [] -> B2;
-		  true -> e_field_Package_retired(TrF3, B2, TrUserData)
-	       end;
-	   _ -> B2
-	 end,
     case M of
-      #{repository := F4} ->
-	  begin
-	    TrF4 = id(F4, TrUserData),
-	    e_type_string(TrF4, <<B3/binary, 34>>)
+      #{retired := F3} ->
+	  TrF3 = id(F3, TrUserData),
+	  if TrF3 == [] -> B2;
+	     true -> e_field_Package_retired(TrF3, B2, TrUserData)
 	  end;
-      _ -> B3
+      _ -> B2
     end.
 
 e_mfield_Versions_packages(Msg, Bin, TrUserData) ->
@@ -125,7 +118,8 @@ e_field_Versions_packages([], Bin, _TrUserData) -> Bin.
 e_field_Package_versions([Elem | Rest], Bin,
 			 TrUserData) ->
     Bin2 = <<Bin/binary, 18>>,
-    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
+    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
+			 TrUserData),
     e_field_Package_versions(Rest, Bin3, TrUserData);
 e_field_Package_versions([], Bin, _TrUserData) -> Bin.
 
@@ -140,22 +134,98 @@ e_field_Package_retired([], Bin, _TrUserData) -> Bin.
 
 e_pfield_Package_retired([Value | Rest], Bin,
 			 TrUserData) ->
-    Bin2 = e_type_int32(id(Value, TrUserData), Bin),
+    Bin2 = e_type_int32(id(Value, TrUserData), Bin,
+			TrUserData),
     e_pfield_Package_retired(Rest, Bin2, TrUserData);
 e_pfield_Package_retired([], Bin, _TrUserData) -> Bin.
 
-e_type_int32(Value, Bin)
+-compile({nowarn_unused_function,e_type_sint/3}).
+e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
+    e_varint(Value * 2, Bin);
+e_type_sint(Value, Bin, _TrUserData) ->
+    e_varint(Value * -2 - 1, Bin).
+
+-compile({nowarn_unused_function,e_type_int32/3}).
+e_type_int32(Value, Bin, _TrUserData)
     when 0 =< Value, Value =< 127 ->
     <<Bin/binary, Value>>;
-e_type_int32(Value, Bin) ->
+e_type_int32(Value, Bin, _TrUserData) ->
     <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
     e_varint(N, Bin).
 
-e_type_string(S, Bin) ->
+-compile({nowarn_unused_function,e_type_int64/3}).
+e_type_int64(Value, Bin, _TrUserData)
+    when 0 =< Value, Value =< 127 ->
+    <<Bin/binary, Value>>;
+e_type_int64(Value, Bin, _TrUserData) ->
+    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
+    e_varint(N, Bin).
+
+-compile({nowarn_unused_function,e_type_bool/3}).
+e_type_bool(true, Bin, _TrUserData) ->
+    <<Bin/binary, 1>>;
+e_type_bool(false, Bin, _TrUserData) ->
+    <<Bin/binary, 0>>;
+e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
+e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.
+
+-compile({nowarn_unused_function,e_type_string/3}).
+e_type_string(S, Bin, _TrUserData) ->
     Utf8 = unicode:characters_to_binary(S),
     Bin2 = e_varint(byte_size(Utf8), Bin),
     <<Bin2/binary, Utf8/binary>>.
 
+-compile({nowarn_unused_function,e_type_bytes/3}).
+e_type_bytes(Bytes, Bin, _TrUserData)
+    when is_binary(Bytes) ->
+    Bin2 = e_varint(byte_size(Bytes), Bin),
+    <<Bin2/binary, Bytes/binary>>;
+e_type_bytes(Bytes, Bin, _TrUserData)
+    when is_list(Bytes) ->
+    BytesBin = iolist_to_binary(Bytes),
+    Bin2 = e_varint(byte_size(BytesBin), Bin),
+    <<Bin2/binary, BytesBin/binary>>.
+
+-compile({nowarn_unused_function,e_type_fixed32/3}).
+e_type_fixed32(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:32/little>>.
+
+-compile({nowarn_unused_function,e_type_sfixed32/3}).
+e_type_sfixed32(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:32/little-signed>>.
+
+-compile({nowarn_unused_function,e_type_fixed64/3}).
+e_type_fixed64(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:64/little>>.
+
+-compile({nowarn_unused_function,e_type_sfixed64/3}).
+e_type_sfixed64(Value, Bin, _TrUserData) ->
+    <<Bin/binary, Value:64/little-signed>>.
+
+-compile({nowarn_unused_function,e_type_float/3}).
+e_type_float(V, Bin, _) when is_number(V) ->
+    <<Bin/binary, V:32/little-float>>;
+e_type_float(infinity, Bin, _) ->
+    <<Bin/binary, 0:16, 128, 127>>;
+e_type_float('-infinity', Bin, _) ->
+    <<Bin/binary, 0:16, 128, 255>>;
+e_type_float(nan, Bin, _) ->
+    <<Bin/binary, 0:16, 192, 127>>.
+
+-compile({nowarn_unused_function,e_type_double/3}).
+e_type_double(V, Bin, _) when is_number(V) ->
+    <<Bin/binary, V:64/little-float>>;
+e_type_double(infinity, Bin, _) ->
+    <<Bin/binary, 0:48, 240, 127>>;
+e_type_double('-infinity', Bin, _) ->
+    <<Bin/binary, 0:48, 240, 255>>;
+e_type_double(nan, Bin, _) ->
+    <<Bin/binary, 0:48, 248, 127>>.
+
+-compile({nowarn_unused_function,e_varint/3}).
+e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).
+
+-compile({nowarn_unused_function,e_varint/2}).
 e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
 e_varint(N, Bin) ->
     Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
@@ -192,9 +262,9 @@ decode_msg_1_catch(Bin, MsgName, TrUserData) ->
 -endif.
 
 decode_msg_2_doit('Versions', Bin, TrUserData) ->
-    d_msg_Versions(Bin, TrUserData);
+    id(d_msg_Versions(Bin, TrUserData), TrUserData);
 decode_msg_2_doit('Package', Bin, TrUserData) ->
-    d_msg_Package(Bin, TrUserData).
+    id(d_msg_Package(Bin, TrUserData), TrUserData).
 
 
 
@@ -213,8 +283,10 @@ dfp_read_field_def_Versions(<<18, Rest/binary>>, Z1, Z2,
 				TrUserData);
 dfp_read_field_def_Versions(<<>>, 0, 0, R1, F@_2,
 			    TrUserData) ->
-    #{packages => lists_reverse(R1, TrUserData),
-      repository => F@_2};
+    S1 = #{repository => F@_2},
+    if R1 == '$undef' -> S1;
+       true -> S1#{packages => lists_reverse(R1, TrUserData)}
+    end;
 dfp_read_field_def_Versions(Other, Z1, Z2, F@_1, F@_2,
 			    TrUserData) ->
     dg_read_field_def_Versions(Other, Z1, Z2, F@_1, F@_2,
@@ -254,8 +326,10 @@ dg_read_field_def_Versions(<<0:1, X:7, Rest/binary>>, N,
     end;
 dg_read_field_def_Versions(<<>>, 0, 0, R1, F@_2,
 			   TrUserData) ->
-    #{packages => lists_reverse(R1, TrUserData),
-      repository => F@_2}.
+    S1 = #{repository => F@_2},
+    if R1 == '$undef' -> S1;
+       true -> S1#{packages => lists_reverse(R1, TrUserData)}
+    end.
 
 d_field_Versions_packages(<<1:1, X:7, Rest/binary>>, N,
 			  Acc, F@_1, F@_2, TrUserData)
@@ -284,7 +358,7 @@ d_field_Versions_repository(<<0:1, X:7, Rest/binary>>,
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Versions(RestF, 0, 0, F@_1,
 				NewFValue, TrUserData).
@@ -331,228 +405,197 @@ skip_64_Versions(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
 d_msg_Package(Bin, TrUserData) ->
     dfp_read_field_def_Package(Bin, 0, 0,
 			       id('$undef', TrUserData), id([], TrUserData),
-			       id([], TrUserData), id('$undef', TrUserData),
-			       TrUserData).
+			       id([], TrUserData), TrUserData).
 
 dfp_read_field_def_Package(<<10, Rest/binary>>, Z1, Z2,
-			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
+			   F@_1, F@_2, F@_3, TrUserData) ->
     d_field_Package_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
-			 F@_4, TrUserData);
+			 TrUserData);
 dfp_read_field_def_Package(<<18, Rest/binary>>, Z1, Z2,
-			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
+			   F@_1, F@_2, F@_3, TrUserData) ->
     d_field_Package_versions(Rest, Z1, Z2, F@_1, F@_2, F@_3,
-			     F@_4, TrUserData);
+			     TrUserData);
 dfp_read_field_def_Package(<<26, Rest/binary>>, Z1, Z2,
-			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
+			   F@_1, F@_2, F@_3, TrUserData) ->
     d_pfield_Package_retired(Rest, Z1, Z2, F@_1, F@_2, F@_3,
-			     F@_4, TrUserData);
+			     TrUserData);
 dfp_read_field_def_Package(<<24, Rest/binary>>, Z1, Z2,
-			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
+			   F@_1, F@_2, F@_3, TrUserData) ->
     d_field_Package_retired(Rest, Z1, Z2, F@_1, F@_2, F@_3,
-			    F@_4, TrUserData);
-dfp_read_field_def_Package(<<34, Rest/binary>>, Z1, Z2,
-			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
-    d_field_Package_repository(Rest, Z1, Z2, F@_1, F@_2,
-			       F@_3, F@_4, TrUserData);
+			    TrUserData);
 dfp_read_field_def_Package(<<>>, 0, 0, F@_1, R1, R2,
-			   F@_4, TrUserData) ->
-    S1 = #{name => F@_1,
-	   versions => lists_reverse(R1, TrUserData),
-	   retired => lists_reverse(R2, TrUserData)},
-    if F@_4 == '$undef' -> S1;
-       true -> S1#{repository => F@_4}
-    end;
+			   TrUserData) ->
+    #{name => F@_1,
+      versions => lists_reverse(R1, TrUserData),
+      retired => lists_reverse(R2, TrUserData)};
 dfp_read_field_def_Package(Other, Z1, Z2, F@_1, F@_2,
-			   F@_3, F@_4, TrUserData) ->
+			   F@_3, TrUserData) ->
     dg_read_field_def_Package(Other, Z1, Z2, F@_1, F@_2,
-			      F@_3, F@_4, TrUserData).
+			      F@_3, TrUserData).
 
 dg_read_field_def_Package(<<1:1, X:7, Rest/binary>>, N,
-			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
+			  Acc, F@_1, F@_2, F@_3, TrUserData)
     when N < 32 - 7 ->
     dg_read_field_def_Package(Rest, N + 7, X bsl N + Acc,
-			      F@_1, F@_2, F@_3, F@_4, TrUserData);
+			      F@_1, F@_2, F@_3, TrUserData);
 dg_read_field_def_Package(<<0:1, X:7, Rest/binary>>, N,
-			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
+			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
     Key = X bsl N + Acc,
     case Key of
       10 ->
-	  d_field_Package_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
+	  d_field_Package_name(Rest, 0, 0, F@_1, F@_2, F@_3,
 			       TrUserData);
       18 ->
 	  d_field_Package_versions(Rest, 0, 0, F@_1, F@_2, F@_3,
-				   F@_4, TrUserData);
+				   TrUserData);
       26 ->
 	  d_pfield_Package_retired(Rest, 0, 0, F@_1, F@_2, F@_3,
-				   F@_4, TrUserData);
+				   TrUserData);
       24 ->
 	  d_field_Package_retired(Rest, 0, 0, F@_1, F@_2, F@_3,
-				  F@_4, TrUserData);
-      34 ->
-	  d_field_Package_repository(Rest, 0, 0, F@_1, F@_2, F@_3,
-				     F@_4, TrUserData);
+				  TrUserData);
       _ ->
 	  case Key band 7 of
 	    0 ->
-		skip_varint_Package(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
+		skip_varint_Package(Rest, 0, 0, F@_1, F@_2, F@_3,
 				    TrUserData);
 	    1 ->
-		skip_64_Package(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
+		skip_64_Package(Rest, 0, 0, F@_1, F@_2, F@_3,
 				TrUserData);
 	    2 ->
 		skip_length_delimited_Package(Rest, 0, 0, F@_1, F@_2,
-					      F@_3, F@_4, TrUserData);
+					      F@_3, TrUserData);
 	    3 ->
 		skip_group_Package(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
-				   F@_4, TrUserData);
+				   TrUserData);
 	    5 ->
-		skip_32_Package(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
+		skip_32_Package(Rest, 0, 0, F@_1, F@_2, F@_3,
 				TrUserData)
 	  end
     end;
 dg_read_field_def_Package(<<>>, 0, 0, F@_1, R1, R2,
-			  F@_4, TrUserData) ->
-    S1 = #{name => F@_1,
-	   versions => lists_reverse(R1, TrUserData),
-	   retired => lists_reverse(R2, TrUserData)},
-    if F@_4 == '$undef' -> S1;
-       true -> S1#{repository => F@_4}
-    end.
+			  TrUserData) ->
+    #{name => F@_1,
+      versions => lists_reverse(R1, TrUserData),
+      retired => lists_reverse(R2, TrUserData)}.
 
 d_field_Package_name(<<1:1, X:7, Rest/binary>>, N, Acc,
-		     F@_1, F@_2, F@_3, F@_4, TrUserData)
+		     F@_1, F@_2, F@_3, TrUserData)
     when N < 57 ->
     d_field_Package_name(Rest, N + 7, X bsl N + Acc, F@_1,
-			 F@_2, F@_3, F@_4, TrUserData);
+			 F@_2, F@_3, TrUserData);
 d_field_Package_name(<<0:1, X:7, Rest/binary>>, N, Acc,
-		     _, F@_2, F@_3, F@_4, TrUserData) ->
+		     _, F@_2, F@_3, TrUserData) ->
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Package(RestF, 0, 0, NewFValue, F@_2,
-			       F@_3, F@_4, TrUserData).
+			       F@_3, TrUserData).
 
 d_field_Package_versions(<<1:1, X:7, Rest/binary>>, N,
-			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
+			 Acc, F@_1, F@_2, F@_3, TrUserData)
     when N < 57 ->
     d_field_Package_versions(Rest, N + 7, X bsl N + Acc,
-			     F@_1, F@_2, F@_3, F@_4, TrUserData);
+			     F@_1, F@_2, F@_3, TrUserData);
 d_field_Package_versions(<<0:1, X:7, Rest/binary>>, N,
-			 Acc, F@_1, Prev, F@_3, F@_4, TrUserData) ->
+			 Acc, F@_1, Prev, F@_3, TrUserData) ->
     {NewFValue, RestF} = begin
 			   Len = X bsl N + Acc,
 			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
+			   {id(binary:copy(Bytes), TrUserData), Rest2}
 			 end,
     dfp_read_field_def_Package(RestF, 0, 0, F@_1,
-			       cons(NewFValue, Prev, TrUserData), F@_3, F@_4,
+			       cons(NewFValue, Prev, TrUserData), F@_3,
 			       TrUserData).
 
 d_field_Package_retired(<<1:1, X:7, Rest/binary>>, N,
-			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
+			Acc, F@_1, F@_2, F@_3, TrUserData)
     when N < 57 ->
     d_field_Package_retired(Rest, N + 7, X bsl N + Acc,
-			    F@_1, F@_2, F@_3, F@_4, TrUserData);
+			    F@_1, F@_2, F@_3, TrUserData);
 d_field_Package_retired(<<0:1, X:7, Rest/binary>>, N,
-			Acc, F@_1, F@_2, Prev, F@_4, TrUserData) ->
+			Acc, F@_1, F@_2, Prev, TrUserData) ->
     {NewFValue, RestF} = {begin
 			    <<Res:32/signed-native>> = <<(X bsl N +
 							    Acc):32/unsigned-native>>,
-			    Res
+			    id(Res, TrUserData)
 			  end,
 			  Rest},
     dfp_read_field_def_Package(RestF, 0, 0, F@_1, F@_2,
-			       cons(NewFValue, Prev, TrUserData), F@_4,
-			       TrUserData).
+			       cons(NewFValue, Prev, TrUserData), TrUserData).
 
 d_pfield_Package_retired(<<1:1, X:7, Rest/binary>>, N,
-			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
+			 Acc, F@_1, F@_2, F@_3, TrUserData)
     when N < 57 ->
     d_pfield_Package_retired(Rest, N + 7, X bsl N + Acc,
-			     F@_1, F@_2, F@_3, F@_4, TrUserData);
+			     F@_1, F@_2, F@_3, TrUserData);
 d_pfield_Package_retired(<<0:1, X:7, Rest/binary>>, N,
-			 Acc, F@_1, F@_2, E, F@_4, TrUserData) ->
+			 Acc, F@_1, F@_2, E, TrUserData) ->
     Len = X bsl N + Acc,
     <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
     NewSeq = d_packed_field_Package_retired(PackedBytes, 0,
-					    0, E),
+					    0, E, TrUserData),
     dfp_read_field_def_Package(Rest2, 0, 0, F@_1, F@_2,
-			       NewSeq, F@_4, TrUserData).
+			       NewSeq, TrUserData).
 
 d_packed_field_Package_retired(<<1:1, X:7,
 				 Rest/binary>>,
-			       N, Acc, AccSeq)
+			       N, Acc, AccSeq, TrUserData)
     when N < 57 ->
     d_packed_field_Package_retired(Rest, N + 7,
-				   X bsl N + Acc, AccSeq);
+				   X bsl N + Acc, AccSeq, TrUserData);
 d_packed_field_Package_retired(<<0:1, X:7,
 				 Rest/binary>>,
-			       N, Acc, AccSeq) ->
+			       N, Acc, AccSeq, TrUserData) ->
     {NewFValue, RestF} = {begin
 			    <<Res:32/signed-native>> = <<(X bsl N +
 							    Acc):32/unsigned-native>>,
-			    Res
+			    id(Res, TrUserData)
 			  end,
 			  Rest},
     d_packed_field_Package_retired(RestF, 0, 0,
-				   [NewFValue | AccSeq]);
-d_packed_field_Package_retired(<<>>, 0, 0, AccSeq) ->
+				   [NewFValue | AccSeq], TrUserData);
+d_packed_field_Package_retired(<<>>, 0, 0, AccSeq, _) ->
     AccSeq.
 
-d_field_Package_repository(<<1:1, X:7, Rest/binary>>, N,
-			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
-    when N < 57 ->
-    d_field_Package_repository(Rest, N + 7, X bsl N + Acc,
-			       F@_1, F@_2, F@_3, F@_4, TrUserData);
-d_field_Package_repository(<<0:1, X:7, Rest/binary>>, N,
-			   Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
-    {NewFValue, RestF} = begin
-			   Len = X bsl N + Acc,
-			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
-			   {binary:copy(Bytes), Rest2}
-			 end,
-    dfp_read_field_def_Package(RestF, 0, 0, F@_1, F@_2,
-			       F@_3, NewFValue, TrUserData).
-
 skip_varint_Package(<<1:1, _:7, Rest/binary>>, Z1, Z2,
-		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
+		    F@_1, F@_2, F@_3, TrUserData) ->
     skip_varint_Package(Rest, Z1, Z2, F@_1, F@_2, F@_3,
-			F@_4, TrUserData);
+			TrUserData);
 skip_varint_Package(<<0:1, _:7, Rest/binary>>, Z1, Z2,
-		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
+		    F@_1, F@_2, F@_3, TrUserData) ->
     dfp_read_field_def_Package(Rest, Z1, Z2, F@_1, F@_2,
-			       F@_3, F@_4, TrUserData).
+			       F@_3, TrUserData).
 
 skip_length_delimited_Package(<<1:1, X:7, Rest/binary>>,
-			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
+			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
     when N < 57 ->
     skip_length_delimited_Package(Rest, N + 7,
-				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
-				  TrUserData);
+				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
 skip_length_delimited_Package(<<0:1, X:7, Rest/binary>>,
-			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
+			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
     Length = X bsl N + Acc,
     <<_:Length/binary, Rest2/binary>> = Rest,
     dfp_read_field_def_Package(Rest2, 0, 0, F@_1, F@_2,
-			       F@_3, F@_4, TrUserData).
+			       F@_3, TrUserData).
 
 skip_group_Package(Bin, FNum, Z2, F@_1, F@_2, F@_3,
-		   F@_4, TrUserData) ->
+		   TrUserData) ->
     {_, Rest} = read_group(Bin, FNum),
     dfp_read_field_def_Package(Rest, 0, Z2, F@_1, F@_2,
-			       F@_3, F@_4, TrUserData).
+			       F@_3, TrUserData).
 
 skip_32_Package(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
-		F@_2, F@_3, F@_4, TrUserData) ->
+		F@_2, F@_3, TrUserData) ->
     dfp_read_field_def_Package(Rest, Z1, Z2, F@_1, F@_2,
-			       F@_3, F@_4, TrUserData).
+			       F@_3, TrUserData).
 
 skip_64_Package(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
-		F@_2, F@_3, F@_4, TrUserData) ->
+		F@_2, F@_3, TrUserData) ->
     dfp_read_field_def_Package(Rest, Z1, Z2, F@_1, F@_2,
-			       F@_3, F@_4, TrUserData).
+			       F@_3, TrUserData).
 
 read_group(Bin, FieldNum) ->
     {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
@@ -612,7 +655,7 @@ read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
     <<_:Len/binary, Tl2/binary>> = Tl,
     read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).
 
-merge_msgs(Prev, New, MsgName) ->
+merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
     merge_msgs(Prev, New, MsgName, []).
 
 merge_msgs(Prev, New, MsgName, Opts) ->
@@ -622,6 +665,7 @@ merge_msgs(Prev, New, MsgName, Opts) ->
       'Package' -> merge_msg_Package(Prev, New, TrUserData)
     end.
 
+-compile({nowarn_unused_function,merge_msg_Versions/3}).
 merge_msg_Versions(#{} = PMsg,
 		   #{repository := NFrepository} = NMsg, TrUserData) ->
     S1 = #{repository => NFrepository},
@@ -637,6 +681,7 @@ merge_msg_Versions(#{} = PMsg,
       {_, _} -> S1
     end.
 
+-compile({nowarn_unused_function,merge_msg_Package/3}).
 merge_msg_Package(#{} = PMsg, #{name := NFname} = NMsg,
 		  TrUserData) ->
     S1 = #{name => NFname},
@@ -651,39 +696,32 @@ merge_msg_Package(#{} = PMsg, #{name := NFname} = NMsg,
 	       S1#{versions => PFversions};
 	   {_, _} -> S1
 	 end,
-    S3 = case {PMsg, NMsg} of
-	   {#{retired := PFretired}, #{retired := NFretired}} ->
-	       S2#{retired =>
-		       'erlang_++'(PFretired, NFretired, TrUserData)};
-	   {_, #{retired := NFretired}} ->
-	       S2#{retired => NFretired};
-	   {#{retired := PFretired}, _} ->
-	       S2#{retired => PFretired};
-	   {_, _} -> S2
-	 end,
     case {PMsg, NMsg} of
-      {_, #{repository := NFrepository}} ->
-	  S3#{repository => NFrepository};
-      {#{repository := PFrepository}, _} ->
-	  S3#{repository => PFrepository};
-      _ -> S3
+      {#{retired := PFretired}, #{retired := NFretired}} ->
+	  S2#{retired =>
+		  'erlang_++'(PFretired, NFretired, TrUserData)};
+      {_, #{retired := NFretired}} ->
+	  S2#{retired => NFretired};
+      {#{retired := PFretired}, _} ->
+	  S2#{retired => PFretired};
+      {_, _} -> S2
     end.
 
 
-verify_msg(Msg, MsgName) ->
+verify_msg(Msg, MsgName) when is_atom(MsgName) ->
     verify_msg(Msg, MsgName, []).
 
 verify_msg(Msg, MsgName, Opts) ->
     TrUserData = proplists:get_value(user_data, Opts),
     case MsgName of
       'Versions' ->
-	  v_msg_Versions(Msg, ['Versions'], TrUserData);
-      'Package' ->
-	  v_msg_Package(Msg, ['Package'], TrUserData);
+	  v_msg_Versions(Msg, [MsgName], TrUserData);
+      'Package' -> v_msg_Package(Msg, [MsgName], TrUserData);
       _ -> mk_type_error(not_a_known_message, Msg, [])
     end.
 
 
+-compile({nowarn_unused_function,v_msg_Versions/3}).
 v_msg_Versions(#{repository := F2} = M, Path,
 	       TrUserData) ->
     case M of
@@ -698,7 +736,7 @@ v_msg_Versions(#{repository := F2} = M, Path,
 	  end;
       _ -> ok
     end,
-    v_type_string(F2, [repository | Path]),
+    v_type_string(F2, [repository | Path], TrUserData),
     lists:foreach(fun (packages) -> ok;
 		      (repository) -> ok;
 		      (OtherKey) ->
@@ -713,12 +751,13 @@ v_msg_Versions(M, Path, _TrUserData) when is_map(M) ->
 v_msg_Versions(X, Path, _TrUserData) ->
     mk_type_error({expected_msg, 'Versions'}, X, Path).
 
-v_msg_Package(#{name := F1} = M, Path, _) ->
-    v_type_string(F1, [name | Path]),
+-compile({nowarn_unused_function,v_msg_Package/3}).
+v_msg_Package(#{name := F1} = M, Path, TrUserData) ->
+    v_type_string(F1, [name | Path], TrUserData),
     case M of
       #{versions := F2} ->
 	  if is_list(F2) ->
-		 _ = [v_type_string(Elem, [versions | Path])
+		 _ = [v_type_string(Elem, [versions | Path], TrUserData)
 		      || Elem <- F2],
 		 ok;
 	     true ->
@@ -730,7 +769,7 @@ v_msg_Package(#{name := F1} = M, Path, _) ->
     case M of
       #{retired := F3} ->
 	  if is_list(F3) ->
-		 _ = [v_type_int32(Elem, [retired | Path])
+		 _ = [v_type_int32(Elem, [retired | Path], TrUserData)
 		      || Elem <- F3],
 		 ok;
 	     true ->
@@ -739,15 +778,9 @@ v_msg_Package(#{name := F1} = M, Path, _) ->
 	  end;
       _ -> ok
     end,
-    case M of
-      #{repository := F4} ->
-	  v_type_string(F4, [repository | Path]);
-      _ -> ok
-    end,
     lists:foreach(fun (name) -> ok;
 		      (versions) -> ok;
 		      (retired) -> ok;
-		      (repository) -> ok;
 		      (OtherKey) ->
 			  mk_type_error({extraneous_key, OtherKey}, M, Path)
 		  end,
@@ -760,17 +793,20 @@ v_msg_Package(M, Path, _TrUserData) when is_map(M) ->
 v_msg_Package(X, Path, _TrUserData) ->
     mk_type_error({expected_msg, 'Package'}, X, Path).
 
-v_type_int32(N, _Path)
+-compile({nowarn_unused_function,v_type_int32/3}).
+v_type_int32(N, _Path, _TrUserData)
     when -2147483648 =< N, N =< 2147483647 ->
     ok;
-v_type_int32(N, Path) when is_integer(N) ->
+v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
     mk_type_error({value_out_of_range, int32, signed, 32},
 		  N, Path);
-v_type_int32(X, Path) ->
+v_type_int32(X, Path, _TrUserData) ->
     mk_type_error({bad_integer, int32, signed, 32}, X,
 		  Path).
 
-v_type_string(S, Path) when is_list(S); is_binary(S) ->
+-compile({nowarn_unused_function,v_type_string/3}).
+v_type_string(S, Path, _TrUserData)
+    when is_list(S); is_binary(S) ->
     try unicode:characters_to_binary(S) of
       B when is_binary(B) -> ok;
       {error, _, _} ->
@@ -779,31 +815,45 @@ v_type_string(S, Path) when is_list(S); is_binary(S) ->
       error:badarg ->
 	  mk_type_error(bad_unicode_string, S, Path)
     end;
-v_type_string(X, Path) ->
+v_type_string(X, Path, _TrUserData) ->
     mk_type_error(bad_unicode_string, X, Path).
 
+-compile({nowarn_unused_function,mk_type_error/3}).
 -spec mk_type_error(_, _, list()) -> no_return().
 mk_type_error(Error, ValueSeen, Path) ->
     Path2 = prettify_path(Path),
     erlang:error({gpb_type_error,
 		  {Error, [{value, ValueSeen}, {path, Path2}]}}).
 
 
+-compile({nowarn_unused_function,prettify_path/1}).
 prettify_path([]) -> top_level;
 prettify_path(PathR) ->
     list_to_atom(string:join(lists:map(fun atom_to_list/1,
 				       lists:reverse(PathR)),
 			     ".")).
 
 
+-compile({nowarn_unused_function,id/2}).
 -compile({inline,id/2}).
 id(X, _TrUserData) -> X.
 
+-compile({nowarn_unused_function,v_ok/3}).
+-compile({inline,v_ok/3}).
+v_ok(_Value, _Path, _TrUserData) -> ok.
+
+-compile({nowarn_unused_function,m_overwrite/3}).
+-compile({inline,m_overwrite/3}).
+m_overwrite(_Prev, New, _TrUserData) -> New.
+
+-compile({nowarn_unused_function,cons/3}).
 -compile({inline,cons/3}).
 cons(Elem, Acc, _TrUserData) -> [Elem | Acc].
 
+-compile({nowarn_unused_function,lists_reverse/2}).
 -compile({inline,lists_reverse/2}).
 'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
+-compile({nowarn_unused_function,'erlang_++'/3}).
 -compile({inline,'erlang_++'/3}).
 'erlang_++'(A, B, _TrUserData) -> A ++ B.
 
@@ -820,9 +870,7 @@ get_msg_defs() ->
        #{name => versions, fnum => 2, rnum => 3,
 	 type => string, occurrence => repeated, opts => []},
        #{name => retired, fnum => 3, rnum => 4, type => int32,
-	 occurrence => repeated, opts => [packed]},
-       #{name => repository, fnum => 4, rnum => 5,
-	 type => string, occurrence => optional, opts => []}]}].
+	 occurrence => repeated, opts => [packed]}]}].
 
 
 get_msg_names() -> ['Versions', 'Package'].
@@ -861,9 +909,7 @@ find_msg_def('Package') ->
      #{name => versions, fnum => 2, rnum => 3,
        type => string, occurrence => repeated, opts => []},
      #{name => retired, fnum => 3, rnum => 4, type => int32,
-       occurrence => repeated, opts => [packed]},
-     #{name => repository, fnum => 4, rnum => 5,
-       type => string, occurrence => optional, opts => []}];
+       occurrence => repeated, opts => [packed]}];
 find_msg_def(_) -> error.
 
 
@@ -904,7 +950,7 @@ get_package_name() -> undefined.
 
 
 gpb_version_as_string() ->
-    "4.2.1".
+    "4.3.1".
 
 gpb_version_as_list() ->
-    [4,2,1].
+    [4,3,1].
