@@ -18,14 +18,14 @@
 %% ```
 %% > hex_repo:get_names(hex_core:default_config()).
 %% {ok, {200, ...,
-%%     #{packages => [
+%%     [
 %%         #{name => <<"package1">>},
 %%         #{name => <<"package2">>},
-%%     ]}}}
+%%     ]}}
 %% '''
 %% @end
-get_names(Config) when is_map(Config) ->
-    Decoder = fun hex_registry:decode_names/1,
+get_names(#{repo_name := Repository} = Config) when is_map(Config) ->
+    Decoder = fun(Data) -> hex_registry:decode_names(Data, Repository) end,
     get_protobuf(Config, <<"/names">>, Decoder).
 
 %% @doc
@@ -36,16 +36,16 @@ get_names(Config) when is_map(Config) ->
 %% ```
 %% > hex_repo:get_versions(Config).
 %% {ok, {200, ...,
-%%     #{packages => [
+%%     [
 %%         #{name => <<"package1">>, retired => [],
 %%           versions => [<<"1.0.0">>]},
 %%         #{name => <<"package2">>, retired => [<<"0.5.0>>"],
 %%           versions => [<<"0.5.0">>, <<"1.0.0">>]},
-%%     ]}}}
+%%     ]}}
 %% '''
 %% @end
-get_versions(Config) when is_map(Config) ->
-    Decoder = fun hex_registry:decode_versions/1,
+get_versions(#{repo_name := Repository} = Config) when is_map(Config) ->
+    Decoder = fun(Data) -> hex_registry:decode_versions(Data, Repository) end,
     get_protobuf(Config, <<"/versions">>, Decoder).
 
 %% @doc
@@ -56,16 +56,16 @@ get_versions(Config) when is_map(Config) ->
 %% ```
 %% > hex_repo:get_package(hex_core:default_config(), <<"package1">>).
 %% {ok, {200, ...,
-%%     #{releases => [
+%%     {
 %%         #{checksum => ..., version => <<"0.5.0">>, dependencies => []},
 %%         #{checksum => ..., version => <<"1.0.0">>, dependencies => [
 %%             #{package => <<"package2">>, optional => true, requirement => <<"~> 0.1">>}
 %%         ]},
-%%     ]}}}
+%%     ]}}
 %% '''
 %% @end
-get_package(Config, Name) when is_binary(Name) and is_map(Config) ->
-    Decoder = fun hex_registry:decode_package/1,
+get_package(#{repo_name := Repository} = Config, Name) when is_binary(Name) and is_map(Config) ->
+    Decoder = fun(Data) -> hex_registry:decode_package(Data, Repository, Name) end,
     get_protobuf(Config, <<"/packages/", Name/binary>>, Decoder).
 
 %% @doc
@@ -124,13 +124,13 @@ decode(Signed, PublicKey, Decoder, Config) ->
         true ->
             case hex_registry:decode_and_verify_signed(Signed, PublicKey) of
                 {ok, Payload} ->
-                    {ok, Decoder(Payload)};
+                    Decoder(Payload);
                 Other ->
                     Other
             end;
         false ->
             #{payload := Payload} = hex_registry:decode_signed(Signed),
-            {ok, Decoder(Payload)}
+            Decoder(Payload)
     end.
 
 tarball_url(URI, Name, Version) ->