@@ -19,6 +19,7 @@ import org.gradle.authentication.http.BasicAuthentication
 import org.gradle.authentication.http.DigestAuthentication
 import org.gradle.integtests.fixtures.AbstractHttpDependencyResolutionTest
 import org.gradle.test.fixtures.server.http.AuthScheme
+import org.gradle.test.fixtures.server.http.HttpServer
 import org.hamcrest.CoreMatchers
 import spock.lang.Issue
 import spock.lang.Unroll
@@ -210,6 +211,58 @@ task listJars {
         server.allHeaders.every { it.get("TestHttpHeaderName") == "TestHttpHeaderValue" }
     }
 
+
+    @Unroll
+    @Issue("gradle/gradle#5571")
+    void "can resolve dependencies from HTTP Maven repository authenticating with HTTP header with redirect"() {
+        given:
+        HttpServer redirectServer = new HttpServer()
+        redirectServer.start()
+
+        def moduleA = mavenHttpRepo.module('group', 'projectA', '1.2').publish()
+        and:
+        buildFile << """
+repositories {
+    maven {
+        url "${redirectServer.uri}/repo"
+        credentials(org.gradle.api.credentials.HttpHeaderCredentials) {
+            name = "TestHttpHeaderName"
+            value = "TestHttpHeaderValue"
+        }
+        authentication { header(HttpHeaderAuthentication) }
+    }
+}
+configurations { compile }
+dependencies {
+    compile 'group:projectA:1.2'
+}
+task listJars {
+    doLast {
+        assert configurations.compile.collect { it.name } == ['projectA-1.2.jar']
+    }
+}
+"""
+
+        when:
+        redirectServer.authenticationScheme = HEADER
+
+        and:
+        redirectServer.expectGetRedirected(moduleA.pom.uri.path, moduleA.pom.uri.toString())
+        redirectServer.expectGetRedirected(moduleA.artifact.uri.path, moduleA.artifact.uri.toString())
+        moduleA.pom.expectGet()
+        moduleA.artifact.expectGet()
+
+        then:
+        succeeds('listJars')
+        and:
+        redirectServer.allHeaders.every { it.get("TestHttpHeaderName") == "TestHttpHeaderValue" }
+        // These headers should not be propagated to other hosts
+        server.allHeaders.every { it.get("TestHttpHeaderName") == null }
+
+        cleanup:
+        redirectServer.stop()
+    }
+
     @Unroll
     def "reports failure resolving with #credsName credentials from #authScheme authenticated HTTP ivy repository"() {
         given: