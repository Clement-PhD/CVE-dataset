@@ -21,6 +21,7 @@ import com.google.gson.JsonElement
 import groovy.xml.MarkupBuilder
 import org.gradle.api.artifacts.repositories.PasswordCredentials
 import org.gradle.internal.BiAction
+import org.gradle.internal.credentials.DefaultPasswordCredentials
 import org.gradle.internal.hash.HashUtil
 import org.gradle.test.fixtures.server.ExpectOne
 import org.gradle.test.fixtures.server.ServerExpectation
@@ -104,6 +105,15 @@ class HttpServer extends ServerWithExpectations implements HttpServerFixture {
         }
     }
 
+    @Override
+    String toString() {
+        if (server.started) {
+            return "HttpServer " + String.valueOf(getUri())
+        } else {
+            return "HttpServer (unstarted)"
+        }
+    }
+
     protected Logger getLogger() {
         logger
     }
@@ -325,7 +335,7 @@ class HttpServer extends ServerWithExpectations implements HttpServerFixture {
      * Allows one HEAD request for the given URL with http authentication.
      */
     void expectHead(String path, String username, String password, File srcFile, Long lastModified = null, Long contentLength = null) {
-        expect(path, false, ['HEAD'], withAuthentication(path, username, password, fileHandler(path, srcFile)))
+        expect(path, false, ['HEAD'], fileHandler(path, srcFile), new DefaultPasswordCredentials(username, password))
     }
 
     /**
@@ -353,7 +363,7 @@ class HttpServer extends ServerWithExpectations implements HttpServerFixture {
      * Expects one GET request for the given URL, with the given credentials. Reads the request content from the given file.
      */
     HttpResourceInteraction expectGet(String path, String username, String password, File srcFile) {
-        return expect(path, false, ['GET'], withAuthentication(path, username, password, fileHandler(path, srcFile)))
+        return expect(path, false, ['GET'], fileHandler(path, srcFile), new DefaultPasswordCredentials(username, password))
     }
 
     /**
@@ -379,30 +389,34 @@ class HttpServer extends ServerWithExpectations implements HttpServerFixture {
     /**
      * Expects one GET request for the given URL, responding with a redirect.
      */
-    void expectGetRedirected(String path, String location) {
-        expectRedirected('GET', path, location)
+    void expectGetRedirected(String path, String location, PasswordCredentials passwordCredentials=null) {
+        expectRedirected('GET', path, location, passwordCredentials)
     }
 
     /**
      * Expects one HEAD request for the given URL, responding with a redirect.
      */
-    void expectHeadRedirected(String path, String location) {
-        expectRedirected('HEAD', path, location)
+    void expectHeadRedirected(String path, String location, PasswordCredentials passwordCredentials=null) {
+        expectRedirected('HEAD', path, location, passwordCredentials)
     }
 
     /**
      * Expects one PUT request for the given URL, responding with a redirect.
      */
-    void expectPutRedirected(String path, String location) {
-        expectRedirected('PUT', path, location)
+    void expectPutRedirected(String path, String location, PasswordCredentials passwordCredentials=null) {
+        expectRedirected('PUT', path, location, passwordCredentials)
     }
 
-    private void expectRedirected(String method, String path, String location) {
-        expect(path, false, [method], new ActionSupport("redirect to $location") {
+    private void expectRedirected(String method, String path, String location, PasswordCredentials credentials) {
+        expect(path, false, [method], redirectTo(location), credentials)
+    }
+
+    private HttpServer.Action redirectTo(location) {
+        new ActionSupport("redirect to $location") {
             void handle(HttpServletRequest request, HttpServletResponse response) {
                 response.sendRedirect(location)
             }
-        })
+        }
     }
 
     /**
@@ -431,11 +445,15 @@ class HttpServer extends ServerWithExpectations implements HttpServerFixture {
      * Expects one GET request for the given URL, returning an apache-compatible directory listing with the given File names.
      */
     void expectGetDirectoryListing(String path, String username, String password, File directory) {
-        expect(path, false, ['GET'], withAuthentication(path, username, password, new ActionSupport("return listing of directory $directory.name") {
+        expect(path, false, ['GET'], listDirectory(directory), new DefaultPasswordCredentials(username, password))
+    }
+
+    private HttpServer.Action listDirectory(File directory) {
+        new ActionSupport("return listing of directory $directory.name") {
             void handle(HttpServletRequest request, HttpServletResponse response) {
                 sendDirectoryListing(response, directory)
             }
-        }))
+        }
     }
 
     private sendFile(HttpServletResponse response, File file, Long lastModified, Long contentLength, String contentType) {
@@ -527,17 +545,16 @@ class HttpServer extends ServerWithExpectations implements HttpServerFixture {
      * Expects one PUT request for the given URL, with the given credentials. Writes the request content to the given file.
      */
     void expectPut(String path, String username, String password, File destFile) {
-        expect(path, false, ['PUT'], withAuthentication(path, username, password, new ActionSupport("write request to $destFile.name") {
-            void handle(HttpServletRequest request, HttpServletResponse response) {
+        expect(path, false, ['PUT'], fileWriter(destFile), new DefaultPasswordCredentials(username, password))
+    }
 
-                if (request.remoteUser != username) {
-                    response.sendError(500, "unexpected username '${request.remoteUser}'")
-                    return
-                }
+    private Action fileWriter(File destFile) {
+        new ActionSupport("write request to $destFile.name") {
+            void handle(HttpServletRequest request, HttpServletResponse response) {
                 destFile.parentFile.mkdirs()
                 destFile.bytes = request.inputStream.bytes
             }
-        }))
+        }
     }
 
     /**
@@ -599,6 +616,8 @@ class HttpServer extends ServerWithExpectations implements HttpServerFixture {
     HttpResourceInteraction expect(String path, boolean matchPrefix, Collection<String> methods, Action action, PasswordCredentials credentials = null) {
         if (credentials != null) {
             action = withAuthentication(path, credentials.username, credentials.password, action)
+        } else {
+            action = refuseAuthentication(path, action)
         }
 
         HttpExpectOne expectation = new HttpExpectOne(action, methods, path)
@@ -617,6 +636,28 @@ class HttpServer extends ServerWithExpectations implements HttpServerFixture {
         return action.interaction
     }
 
+    private Action refuseAuthentication(String path, Action action) {
+        new Action() {
+            @Override
+            HttpResourceInteraction getInteraction() {
+                return action.interaction
+            }
+
+            String getDisplayName() {
+                return action.displayName
+            }
+
+            void handle(HttpServletRequest request, HttpServletResponse response) {
+
+                if (authenticationScheme.handler.containsUnexpectedAuthentication(request)) {
+                    response.sendError(500, "unexpected authentication in headers ")
+                    return
+                }
+                action.handle(request, response)
+            }
+        }
+    }
+
     private void allow(String path, boolean matchPrefix, Collection<String> methods, Action action) {
         add(path, matchPrefix, methods, new AbstractHandler() {
             void handle(String target, HttpServletRequest request, HttpServletResponse response, int dispatch) {