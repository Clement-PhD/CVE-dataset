@@ -1,6 +1,8 @@
 package org.jooby;
 
 import com.google.common.collect.ImmutableList;
+import com.google.common.escape.Escapers;
+import com.google.common.html.HtmlEscapers;
 import com.typesafe.config.Config;
 import static org.easymock.EasyMock.expect;
 import org.jooby.test.MockUnit;
@@ -15,6 +17,7 @@
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 @RunWith(PowerMockRunner.class)
@@ -66,6 +69,7 @@ private MockUnit.Block handleErr(Throwable ex, boolean stacktrace) {
       expect(conf.getBoolean("err.stacktrace")).andReturn(stacktrace);
       Env env = unit.get(Env.class);
       expect(env.name()).andReturn("dev");
+      expect(env.xss("html")).andReturn(HtmlEscapers.htmlEscaper()::escape);
 
       Request req = unit.get(Request.class);
 
@@ -112,13 +116,45 @@ public void handleWithErrMessage() throws Exception {
             });
   }
 
+  @SuppressWarnings({"unchecked"})
+  @Test
+  public void handleWithHtmlErrMessage() throws Exception {
+    Err ex = new Err(500, "Something something <em>dark</em>");
+
+    StringWriter writer = new StringWriter();
+    ex.printStackTrace(new PrintWriter(writer));
+    String[] stacktrace = writer.toString().replace("\r", "").split("\\n");
+
+    new MockUnit(Request.class, Response.class, Route.class, Env.class, Config.class)
+            .expect(handleErr(ex, true))
+            .run(unit -> {
+
+                      Request req = unit.get(Request.class);
+                      Response rsp = unit.get(Response.class);
+
+                      new Err.DefHandler().handle(req, rsp, ex);
+                    },
+                    unit -> {
+                      Result result = unit.captured(Result.class).iterator().next();
+                      View view = (View) result.ifGet(ImmutableList.of(MediaType.html)).get();
+                      assertEquals("err", view.name());
+                      checkErr(stacktrace, "Server Error(500): Something something &lt;em&gt;dark&lt;/em&gt;",
+                              (Map<String, Object>) view.model()
+                                      .get("err"));
+
+                      Object hash = result.ifGet(MediaType.ALL).get();
+                      assertEquals(4, ((Map<String, Object>) hash).size());
+                    });
+  }
+
   private void checkErr(final String[] stacktrace, final String message,
       final Map<String, Object> err) {
-    assertEquals(message, err.remove("message"));
-    assertEquals("Server Error", err.remove("reason"));
-    assertEquals(500, err.remove("status"));
-    assertArrayEquals(stacktrace, (String[]) err.remove("stacktrace"));
-    assertEquals(err.toString(), 0, err.size());
+    final Map<String, Object> copy = new LinkedHashMap<>(err);
+    assertEquals(message, copy.remove("message"));
+    assertEquals("Server Error", copy.remove("reason"));
+    assertEquals(500, copy.remove("status"));
+    assertArrayEquals(stacktrace, (String[]) copy.remove("stacktrace"));
+    assertEquals(copy.toString(), 0, copy.size());
   }
 
 }