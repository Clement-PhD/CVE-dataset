@@ -4,6 +4,7 @@ import React from 'react'
 import { connect } from 'react-redux'
 
 import Expression from '../../../../../../../../common/exprParser/expression'
+import * as DataSort from '../../../../../../../../common/surveyRdb/dataSort'
 
 import Popup from '../../../../../../../commonComponents/popup'
 import * as ExpressionVariables from '../../../../../../../commonComponents/expression/expressionVariables'
@@ -14,8 +15,6 @@ import Survey from '../../../../../../../../common/survey/survey'
 
 import * as SurveyState from '../../../../../../../survey/surveyState'
 
-import * as DataSort from './dataSort'
-
 class SortExpressionComponent extends React.Component {
 
   constructor (props) {
@@ -41,7 +40,7 @@ class SortExpressionComponent extends React.Component {
     // Only show selected variables in the dropdown menu
     if (availableVariables !== prevAvailableVariables) {
       // reset available variables and remove unavailable variables from criteria
-      const newSortCriteria = DataSort.getNewCriteria(sortCriteria, availableVariables)
+      const newSortCriteria = DataSort.getNewCriteria(availableVariables)(sortCriteria)
 
       this.setState({ sortCriteria: newSortCriteria },
         () => this.refreshUnchosenVariables())
@@ -52,7 +51,7 @@ class SortExpressionComponent extends React.Component {
     const { sortCriteria } = this.state
 
     this.setState({
-      sortCriteria: DataSort.updateVariable(sortCriteria, pos, variable),
+      sortCriteria: DataSort.updateVariable(pos, variable)(sortCriteria),
       updated: true,
     },
     () => this.refreshUnchosenVariables())
@@ -62,7 +61,7 @@ class SortExpressionComponent extends React.Component {
     const { sortCriteria } = this.state
 
     this.setState({
-      sortCriteria: DataSort.updateOrder(sortCriteria, pos, order),
+      sortCriteria: DataSort.updateOrder(pos, order)(sortCriteria),
       updated: true,
     })
   }
@@ -71,14 +70,14 @@ class SortExpressionComponent extends React.Component {
     const { availableVariables } = this.props
     const { sortCriteria } = this.state
 
-    this.setState({ unchosenVariables: DataSort.getUnchosenVariables(sortCriteria, availableVariables) })
+    this.setState({ unchosenVariables: DataSort.getUnchosenVariables(availableVariables)(sortCriteria) })
   }
 
   addCriteria ({ value: variable, label }) {
     const { sortCriteria } = this.state
 
     this.setState({
-      sortCriteria: DataSort.addCriteria(sortCriteria, variable, label, 'asc'),
+      sortCriteria: DataSort.addCriteria(variable, label, DataSort.keys.order.asc)(sortCriteria),
       updated: true,
     },
     () => this.refreshUnchosenVariables())
@@ -88,7 +87,7 @@ class SortExpressionComponent extends React.Component {
     const { sortCriteria } = this.state
 
     this.setState({
-      sortCriteria: DataSort.deleteCriteria(sortCriteria, pos),
+      sortCriteria: DataSort.deleteCriteria(pos)(sortCriteria),
       updated: true,
     },
     () => this.refreshUnchosenVariables())
@@ -123,7 +122,7 @@ class SortExpressionComponent extends React.Component {
               <SortRow
                 key={criteria.variable}
                 variables={unchosenVariables}
-                selectedVariable={DataSort.getVariable(availableVariables, criteria.variable)}
+                selectedVariable={DataSort.findVariableByValue(criteria.variable)(availableVariables)}
                 onSelectVariable={item => this.onSelectVariable(pos, item)}
                 selectedOrder={criteria.order}
                 onSelectOrder={order => this.onSelectOrder(pos, order)}