@@ -1,27 +1,26 @@
 <?php
-class Db
-{
-	private $_pdo=null;
+
+class Db {
+	private $_pdo=null, $_connected;
 	private $_workdir='';
 	private $_filename='';
 	public $error=false;
 	public $error_message='';
-	
+
+
 	/*
-		$place = base (это базовый набор баз данных: local, nodes и т.д.)
-		$place = file (указываем конкретную базу данных по полному пути)
+		$place = base (This is a basic set of databases: local, nodes, etc)
+		$place = file (specify a specific database for the full pathth)
 	*/
-	function __destruct()
-	{
+	function __destruct(){
 		//if($this->_pdo) $this->_pdo->close();
 	}
 	
-	function __construct($place='base',$database='')
-	{
+	function __construct($place='base',$database=''){
+		$this->_connected=false;
 		$this->_workdir=getenv('WORKDIR');	// /usr/jails/
 		
-		switch($place)
-		{
+		switch($place){
 			case 'base':
 				$file_name=$this->_workdir.'/var/db/'.$database.'.sqlite';
 				$connect='sqlite:'.$file_name;
@@ -31,15 +30,15 @@ function __construct($place='base',$database='')
 				$connect='sqlite:'.$file_name;
 				break;
 			case 'helper':
-				if(is_array($database))
-				{
+				if(is_array($database)){
 					///usr/jails/jails-system/cbsdpuppet1/helpers/redis.sqlite
 					$file_name=$this->_workdir.'/jails-system/'.$database['jname'].'/helpers/'.$database['helper'].".sqlite";
 					$connect='sqlite:'.$file_name;
-				}else{
-					$file_name=$this->_workdir.'/formfile/'.$database.".sqlite";
-					$connect='sqlite:'.$file_name;
+					break;
 				}
+
+				$file_name=$this->_workdir.'/formfile/'.$database.".sqlite";
+				$connect='sqlite:'.$file_name;
 				break;
 			case 'cbsd-settings':
 				$file_name=$this->_workdir.'/jails-system/CBSDSYS/helpers/cbsd.sqlite';
@@ -65,26 +64,21 @@ function __construct($place='base',$database='')
 			'jails'=>'local',
 		);
 		
-		switch($driver)
-		{
+		switch($driver){
 			case 'sqlite_webdev':
 				$connect='sqlite:/var/db/webdev/webdev.sqlite';
 				break;
 			case 'forms':
 				$connect='sqlite:/var/db/webdev/forms.sqlite';
 				break;
 			case 'helpers':
-				if(is_array($database))
-				{
+				if(is_array($database)){
 					$connect='sqlite:'.$this->_workdir.'/jails-system/'.
 						$database['jname'].'/helpers/'.$database['helper'].".sqlite";
-				}else{
-					$connect='';
-				}
+				}else $connect='';
 				break;
 			case 'sqlite_cbsd':
-				if($database!='')
-				{
+				if($database!=''){
 					if(!isset($databases[$database])) break;
 					$db=$databases[$database];
 					$connect='sqlite:'.$this->_workdir.'/var/db/'.$db.'.sqlite';
@@ -109,88 +103,62 @@ function __construct($place='base',$database='')
 		$this->_filename=$file_name;
 		//echo $file_name,PHP_EOL,PHP_EOL;
 		
-		if(!isset($file_name) || empty($file_name) || !file_exists($file_name))
-		{
+		if(!isset($file_name) || empty($file_name) || !file_exists($file_name)){
 			$this->error=true;
 			$this->error_message='DB file not found!';
 			return false;
 		}
 		
-		if(!empty($connect))
-		{
-			try
-			{
-				$this->_pdo = new PDO($connect);
-				$this->_pdo->setAttribute(PDO::ATTR_TIMEOUT,5000);
-			}catch (PDOException $e){
-				$this->error=true;
-				$this->error_message=$e->getMessage();	//'DB Error';
-				return false;
-			}
-		}else{
+		if(empty($connect)) return false; // Return from __construct doesn't work!
+
+		try {
+			$this->_pdo = new PDO($connect);
+			$this->_pdo->setAttribute(PDO::ATTR_TIMEOUT,5000);
+			$this->_connected=true;
+
+		}catch (PDOException $e){
+			$this->error=true;
+			$this->error_message=$e->getMessage();	//'DB Error';
 			return false;
 		}
 	}
 	
-	function getWorkdir()
-	{
-		return $this->_workdir;
-	}
-	
-	function getFileName()
-	{
-		return $this->_filename;
-	}
-	
-	function select($query)
-	{
-		if($quer=$this->_pdo->query($query))
-		{
+	function select($query){
+		if($quer=$this->_pdo->query($query)){
 			$res=$quer->fetchAll(PDO::FETCH_ASSOC);
 			return $res;
 		}
 		return array();
 	}
 	
-	function selectAssoc($query)
-	{
-		if($quer=$this->_pdo->query($query))
-		{
+	function selectAssoc($query){
+		if($quer=$this->_pdo->query($query)){
 			$res=$quer->fetch(PDO::FETCH_ASSOC);
 			return $res;
 		}
 		return array();
 	}
 	
-	function insert($query)
-	{
-		if($quer=$this->_pdo->query($query))
-		{
+	function insert($query){
+		if($quer=$this->_pdo->query($query)){
 			$lastID=$this->_pdo->lastInsertId();
 			return array('error'=>false,'lastID'=>$lastID);
-		}else{
-			$error=array('error'=>true,'info'=>$this->_pdo->errorInfo());
-			return $error;
 		}
-		return false;
+		$error=array('error'=>true,'info'=>$this->_pdo->errorInfo());
+		return $error;
 	}
 	
-	function update($query)
-	{
-		if($quer=$this->_pdo->query($query))
-		{
+	function update($query) {
+		if($quer=$this->_pdo->query($query)){
 			$rowCount=$quer->rowCount();
 			return array('rowCount'=>$rowCount);
-		}else{
-			$error=$this->_pdo->errorInfo();
-			return $error;
 		}
-		return false;
+		$error=$this->_pdo->errorInfo();
+		return $error;	
 	}
 	
-	function query_protect($query)
-	{
-		// Добавить сюда защиту запроса от инъекций и других ошибок.
-		return $query;
-	}
-}
\ No newline at end of file
+	function isConnected(){ return($this->_connected); }
+	function getWorkdir(){  return $this->_workdir;    }
+	function getFileName(){ return $this->_filename;   }
+	function escape($str){  return SQLite3::escapeString($str); } // For now sqlite only!
+}
