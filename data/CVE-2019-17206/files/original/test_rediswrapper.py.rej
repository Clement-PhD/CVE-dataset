--- /dev/null
+++ /dev/null
@@ -142,102 +140,106 @@ def test_list_set_slice(self):
             data[::-1] = [1, 3]
 
     def test_list_del_item(self):
-        data = redis["f"]
+        data = redis['f']
         del data[1]
-        assert len(redis["f"]) == 4
+        assert len(redis['f']) == 4
         del data[-1]
-        assert redis["f"] == [0, 2, 3]
+        assert redis['f'] == [0, 2, 3]
         with pytest.raises(IndexError):
             del data[10]
         with pytest.raises(TypeError):
-            del data["1"]
+            del data['1']
 
     def test_list_del_slice(self):
-        data = redis["f"]
+        data = redis['f']
         del data[1:1]
-        assert len(redis["f"]) == 5
+        assert len(redis['f']) == 5
         del data[1:5:2]
-        assert redis["f"] == [0, 2, 4]
+        assert redis['f'] == [0, 2, 4]
         del data[:]
-        assert "f" not in redis
+        assert len(redis['f']) == 0
 
     def test_list_insert(self):
-        data = redis["f"]
-        data.insert(0, "a")
-        assert data == ["a", 0, 1, 2, 3, 4]
-        data.insert(2, "b")
-        assert data == ["a", 0, "b", 1, 2, 3, 4]
-        data.insert(10, "c")
-        assert data == ["a", 0, "b", 1, 2, 3, 4, "c"]
+        data = redis['f']
+        data.insert(0, 'a')
+        assert data == ['a', 0, 1, 2, 3, 4]
+        data.insert(2, 'b')
+        assert data == ['a', 0, 'b', 1, 2, 3, 4]
+        data.insert(10, 'c')
+        assert data == ['a', 0, 'b', 1, 2, 3, 4, 'c']
 
     def test_list_append_pop(self):
-        data = redis["f"]
-        data.append("a")
-        assert data.pop() == "a"
+        data = redis['f']
+        data.append('a')
+        assert data.pop() == 'a'
         assert data.pop(0) == 0
         assert len(data) == 4
 
     def test_hash_contains(self):
-        assert "a" in redis["g"]
-        assert 2 not in redis["g"]
+        assert 'a' in redis['g']
+        assert 2 not in redis['g']
 
     def test_hash_get_item(self):
-        assert redis["g"]["b"] == 1
-        assert redis["g"].get("c") == 2
+        assert redis['g']['b'] == 1
+        assert redis['g'].get('c') == 2
         with pytest.raises(KeyError):
-            redis["g"][5]
+            redis['g'][5]
 
     def test_hash_set_item(self):
-        redis["g"][1] = True
-        assert redis["g"][1] is True
-        redis["g"]["c"] = "c"
-        assert redis["g"]["c"] == "c"
-        redis["g"]["other"] = [1, 2]
-        assert redis["g"]["other"] == [1, 2]
+        redis['g'][1] = True
+        assert redis['g'][1] is True
+        redis['g']['c'] = 'c'
+        assert redis['g']['c'] == 'c'
+        redis['g']['other'] = [1, 2]
+        assert redis['g']['other'] == [1, 2]
 
     def test_hash_del_item(self):
-        del redis["g"]["d"]
-        assert "d" not in redis["g"]
+        del redis['g']['d']
+        assert 'd' not in redis['g']
         with pytest.raises(KeyError):
-            del redis["g"][5]
+            del redis['g'][5]
 
     def test_hash_representation(self):
-        assert redis["g"] == {"a": 0, "b": 1, "c": 2, "d": 3}
+        assert redis['g'] == {'a': 0,
+                              'b': 1,
+                              'c': 2,
+                              'd': 3}
 
     def test_hash_keys(self):
-        assert cmp_no_order(redis["g"].keys(), list("abcd"))
+        assert cmp_no_order(redis['g'].keys(), list('abcd'))
 
     def test_hash_get_attr(self):
-        assert callable(redis["g"].get)
-        assert redis["g"].c == 2
+        assert callable(redis['g'].get)
+        assert redis['g'].c == 2
         with pytest.raises(AttributeError):
-            redis["g"].other
+            redis['g'].other
 
     def test_set_contains(self):
-        assert "a" in redis["h"]
-        assert 5 not in redis["h"]
+        assert 'a' in redis['h']
+        assert 5 not in redis['h']
 
     def test_set_representation(self):
-        assert set(redis["h"]) == set(["a", "b", "c"])
+        assert set(redis['h']) == set(['a', 'b', 'c'])
 
     def test_set_add(self):
-        redis["h"].add("a")
-        assert len(redis["h"]) == 3
-        redis["h"].add("d")
-        assert "d" in redis["h"]
+        redis['h'].add('a')
+        assert len(redis['h']) == 3
+        redis['h'].add('d')
+        assert 'd' in redis['h']
 
     def test_set_discard(self):
-        redis["h"].discard("d")
-        assert len(redis["h"]) == 3
-        redis["h"].discard("b")
-        assert len(redis["h"]) == 2
+        redis['h'].discard('d')
+        assert len(redis['h']) == 3
+        redis['h'].discard('b')
+        assert len(redis['h']) == 2
 
     def test_set_op(self):
-        assert redis["h"] == set(["a", "b", "c"])
-        assert redis["h"] < set(["a", "b", "c", "d", "e"])
-        assert redis["h"] & set(["a"]) == set(["a"])
-        assert redis["h"] | set(["a", "e"]) == set(["a", "b", "c", "e"])
+        assert redis['h'] == set(['a', 'b', 'c'])
+        assert redis['h'] < set(['a', 'b', 'c', 'd', 'e'])
+        assert redis['h'] & set(['a']) == set(['a'])
+        assert redis['h'] | set(['a', 'e']) \
+            == set(['a', 'b', 'c', 'e'])
 
 
-if __name__ == "__main__":
+if __name__ == '__main__':
 
