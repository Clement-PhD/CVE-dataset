@@ -4,6 +4,8 @@
 
 package io.ktor.http
 
+import io.ktor.util.*
+
 @Suppress("unused", "KDocMissingDocumentation", "PublicApiImplicitType", "MayBeConstant")
 object HttpHeaders {
     // Permanently registered standard HTTP headers
@@ -114,17 +116,77 @@ object HttpHeaders {
     val XTotalCount = "X-Total-Count"
 
     /**
-     * Check if [header] is unsafe. Header is unsafe if listed in [UnsafeHeaders]
+     * Check if [header] is unsafe. Header is unsafe if listed in [UnsafeHeadersList]
+     */
+    fun isUnsafe(header: String): Boolean = UnsafeHeadersArray.any { it.equals(header, ignoreCase = true) }
+
+    private val UnsafeHeadersArray: Array<String> = arrayOf(ContentLength, ContentType, TransferEncoding, Upgrade)
+
+    @Deprecated("Use UnsafeHeadersList instead.", replaceWith = ReplaceWith("HttpHeaders.UnsafeHeadersList"))
+    val UnsafeHeaders: Array<String> get() = UnsafeHeadersArray.copyOf()
+
+    /**
+     * A list of header names that are not safe to use unless it is low-level engine implementation.
      */
-    fun isUnsafe(header: String): Boolean = UnsafeHeaders.any { it.equals(header, ignoreCase = true) }
+    val UnsafeHeadersList: List<String> = UnsafeHeadersArray.asList()
 
-    val UnsafeHeaders: Array<String> = arrayOf(ContentLength, ContentType, TransferEncoding, Upgrade)
+    /**
+     * Validates header [name] throwing [IllegalHeaderNameException] when the name is not valid.
+     */
+    @KtorExperimentalAPI
+    fun checkHeaderName(name: String) {
+        name.forEachIndexed { index, ch ->
+            if (ch <= ' ' || isDelimiter(ch)) {
+                throw IllegalHeaderNameException(name, index)
+            }
+        }
+    }
+
+    /**
+     * Validates header [value] throwing [IllegalHeaderValueException] when the value is not valid.
+     */
+    @KtorExperimentalAPI
+    fun checkHeaderValue(value: String) {
+        value.forEachIndexed { index, ch ->
+            if (ch == ' ' || ch == '\u0009') return@forEachIndexed
+            if (ch < ' ') {
+                throw IllegalHeaderValueException(value, index)
+            }
+        }
+    }
 }
 
 /**
- * Thrown when an attempt to set unsafe header detected. A header is unsafe if listed in [HttpHeaders.UnsafeHeaders].
+ * Thrown when an attempt to set unsafe header detected. A header is unsafe if listed in [HttpHeaders.UnsafeHeadersList].
  */
 class UnsafeHeaderException(header: String) : IllegalArgumentException(
     "Header $header is controlled by the engine and " +
         "cannot be set explicitly"
 )
+
+/**
+ * Thrown when an illegal header name was used.
+ * A header name should only consist from visible characters
+ * without delimiters "double quote" and the following characters: `(),/:;<=>?@[\]{}`.
+ * @property headerName that was tried to use
+ * @property position at which validation failed
+ */
+@KtorExperimentalAPI
+class IllegalHeaderNameException(val headerName: String, val position: Int) : IllegalArgumentException(
+    "Header name '$headerName' contains illegal character '${headerName[position]}'" +
+        " (code ${(headerName[position].toInt() and 0xff)})"
+)
+
+/**
+ * Thrown when an illegal header value was used.
+ * A header value should only consist from visible characters, spaces and/or HTAB (0x09).
+ * @property headerValue that was tried to use
+ * @property position at which validation failed
+ */
+@KtorExperimentalAPI
+class IllegalHeaderValueException(val headerValue: String, val position: Int) : IllegalArgumentException(
+    "Header value '$headerValue' contains illegal character '${headerValue[position]}'" +
+        " (code ${(headerValue[position].toInt() and 0xff)})"
+)
+
+private fun isDelimiter(ch: Char): Boolean = ch in "\"(),/:;<=>?@[\\]{}"
