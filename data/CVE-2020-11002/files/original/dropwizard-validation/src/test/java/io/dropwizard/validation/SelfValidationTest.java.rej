--- /dev/null
+++ /dev/null
@@ -271,47 +233,13 @@ public void giveWarningIfNoValidationMethods() {
     }
 
     @Test
-    public void violationMessagesAreEscapedByDefault() {
+    public void violationMessagesAreEscaped() {
         assertThat(ConstraintViolations.format(validator.validate(new InjectionExample()))).containsExactly(
-                " $\\A{1+1}",
                 " ${'value'}",
-                " {value}",
                 "${'property'} ${'value'}",
                 "${'property'}[${'key'}] ${'value'}",
                 "${'property'}[1] ${'value'}"
         );
         assertThat(TestLoggerFactory.getAllLoggingEvents()).isEmpty();
     }
-
-    @Test
-    public void violationMessagesAreInterpolatedIfEscapingDisabled() {
-        assertThat(ConstraintViolations.format(validator.validate(new EscapingDisabledExample()))).containsExactly(
-                " A2",
-                " TEST",
-                " value",
-                "${'property'} value",
-                "${'property'}[${'key'}] value",
-                "${'property'}[1] value"
-        );
-        assertThat(TestLoggerFactory.getAllLoggingEvents()).isEmpty();
-    }
-
-    @Test
-    public void messageParametersExample() {
-        assertThat(ConstraintViolations.format(validator.validate(new MessageParametersExample()))).containsExactly(
-                " Mixed value VALUE",
-                " Nested ${'nested'}",
-                " No parameter",
-                " VALUE",
-                " VALUE {unsetParameter}",
-                " value}",
-                " {  value  }",
-                " {1+1}",
-                " {value",
-                "{property} VALUE",
-                "{property}[1] VALUE",
-                "{property}[{key}] VALUE"
-        );
-        assertThat(TestLoggerFactory.getAllLoggingEvents()).isEmpty();
-    }
 
