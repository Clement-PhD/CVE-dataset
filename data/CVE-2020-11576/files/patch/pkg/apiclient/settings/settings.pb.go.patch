@@ -86,7 +86,7 @@ type Settings struct {
 	// Help settings
 	Help                 *Help     `protobuf:"bytes,9,opt,name=help,proto3" json:"help,omitempty"`
 	Plugins              []*Plugin `protobuf:"bytes,10,rep,name=plugins,proto3" json:"plugins,omitempty"`
-	DisableAdmin         bool      `protobuf:"varint,11,opt,name=disableAdmin,proto3" json:"disableAdmin,omitempty"`
+	UserLoginsDisabled   bool      `protobuf:"varint,11,opt,name=userLoginsDisabled,proto3" json:"userLoginsDisabled,omitempty"`
 	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
 	XXX_unrecognized     []byte    `json:"-"`
 	XXX_sizecache        int32     `json:"-"`
@@ -195,9 +195,9 @@ func (m *Settings) GetPlugins() []*Plugin {
 	return nil
 }
 
-func (m *Settings) GetDisableAdmin() bool {
+func (m *Settings) GetUserLoginsDisabled() bool {
 	if m != nil {
-		return m.DisableAdmin
+		return m.UserLoginsDisabled
 	}
 	return false
 }
@@ -570,61 +570,61 @@ func init() { proto.RegisterFile("server/settings/settings.proto", fileDescripto
 
 var fileDescriptor_a480d494da040caa = []byte{
 	// 877 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x5f, 0x6f, 0x1b, 0x45,
-	0x10, 0xd7, 0xc5, 0xa9, 0x63, 0x8f, 0x9b, 0x3a, 0x59, 0x20, 0x3a, 0xac, 0xca, 0x36, 0xf7, 0x50,
-	0x99, 0x07, 0xee, 0x88, 0xfb, 0x00, 0x42, 0x20, 0xa8, 0xed, 0xaa, 0x35, 0x09, 0x0a, 0x6c, 0x1b,
-	0x1e, 0x90, 0x50, 0xb4, 0xb9, 0x5b, 0x2e, 0x8b, 0xcf, 0xbb, 0xa7, 0xdd, 0x3d, 0x53, 0xf3, 0xc8,
-	0x1b, 0x4f, 0x08, 0xf1, 0xa5, 0x78, 0x44, 0xe2, 0xdd, 0x42, 0x16, 0x1f, 0x04, 0xdd, 0xde, 0x9f,
-	0x5c, 0x6c, 0xab, 0x42, 0xea, 0xdb, 0xec, 0xcc, 0xfc, 0x66, 0x66, 0x67, 0x7f, 0x3b, 0x03, 0x5d,
-	0x45, 0xe5, 0x82, 0x4a, 0x4f, 0x51, 0xad, 0x19, 0x0f, 0x55, 0x29, 0xb8, 0xb1, 0x14, 0x5a, 0xa0,
-	0x03, 0x3f, 0x4a, 0x94, 0xa6, 0xb2, 0xf3, 0x76, 0x28, 0x42, 0x61, 0x74, 0x5e, 0x2a, 0x65, 0xe6,
-	0xce, 0xc3, 0x50, 0x88, 0x30, 0xa2, 0x1e, 0x89, 0x99, 0x47, 0x38, 0x17, 0x9a, 0x68, 0x26, 0x78,
-	0x0e, 0xee, 0x4c, 0x43, 0xa6, 0x6f, 0x92, 0x6b, 0xd7, 0x17, 0x73, 0x8f, 0x48, 0x03, 0xff, 0xd1,
-	0x08, 0x1f, 0xf8, 0x81, 0x17, 0xcf, 0xc2, 0x14, 0xa6, 0x3c, 0x12, 0xc7, 0x11, 0xf3, 0x0d, 0xd0,
-	0x5b, 0x9c, 0x92, 0x28, 0xbe, 0x21, 0xa7, 0x5e, 0x48, 0x39, 0x95, 0x44, 0xd3, 0x20, 0x0f, 0xf5,
-	0xd9, 0xeb, 0x42, 0x6d, 0xde, 0x41, 0xb0, 0xc0, 0xf7, 0xfc, 0x88, 0xb0, 0x79, 0x5e, 0x89, 0xd3,
-	0x86, 0xc3, 0x17, 0xb9, 0xf5, 0x9b, 0x84, 0xca, 0xa5, 0xf3, 0x5b, 0x1d, 0x1a, 0x85, 0x06, 0xbd,
-	0x0b, 0xb5, 0x44, 0x46, 0xb6, 0xd5, 0xb7, 0x06, 0xcd, 0xd1, 0xc1, 0x7a, 0xd5, 0xab, 0x5d, 0xe2,
-	0x73, 0x9c, 0xea, 0xd0, 0x87, 0xd0, 0x0c, 0xe8, 0xab, 0xb1, 0xe0, 0x3f, 0xb0, 0xd0, 0xde, 0xeb,
-	0x5b, 0x83, 0xd6, 0x10, 0xb9, 0x79, 0x4f, 0xdc, 0x49, 0x61, 0xc1, 0xb7, 0x4e, 0x68, 0x0c, 0x90,
-	0xe6, 0xcf, 0x21, 0x35, 0x03, 0x79, 0xab, 0x84, 0x5c, 0x4c, 0x27, 0xe3, 0xcc, 0x34, 0x7a, 0xb0,
-	0x5e, 0xf5, 0xe0, 0xf6, 0x8c, 0x2b, 0x30, 0xd4, 0x87, 0x16, 0x89, 0xe3, 0x73, 0x72, 0x4d, 0xa3,
-	0x33, 0xba, 0xb4, 0xf7, 0xd3, 0xca, 0x70, 0x55, 0x85, 0xbe, 0x85, 0x63, 0x49, 0x95, 0x48, 0xa4,
-	0x4f, 0x2f, 0x16, 0x54, 0x4a, 0x16, 0x50, 0x65, 0xdf, 0xeb, 0xd7, 0x06, 0xad, 0xe1, 0xa0, 0xcc,
-	0x56, 0xdc, 0xd0, 0xc5, 0x9b, 0xae, 0x4f, 0xb9, 0x96, 0x4b, 0xbc, 0x1d, 0x02, 0xb9, 0x80, 0x94,
-	0x26, 0x3a, 0x51, 0x23, 0x12, 0x84, 0xf4, 0x29, 0x27, 0xd7, 0x11, 0x0d, 0xec, 0x7a, 0xdf, 0x1a,
-	0x34, 0xf0, 0x0e, 0x0b, 0x7a, 0x0e, 0xed, 0x8c, 0x03, 0x4f, 0x38, 0x89, 0x96, 0x9a, 0xf9, 0xca,
-	0x3e, 0x30, 0x77, 0xee, 0x96, 0x55, 0x3c, 0xbb, 0x6b, 0xcf, 0xaf, 0xbb, 0x09, 0x43, 0x3f, 0xc1,
-	0xd1, 0x2c, 0x51, 0x5a, 0xcc, 0xd9, 0xcf, 0xf4, 0x22, 0x36, 0x3c, 0xb2, 0x1b, 0x26, 0xd4, 0x99,
-	0x7b, 0xfb, 0xfa, 0x6e, 0xf1, 0xfa, 0x46, 0xb8, 0xf2, 0x03, 0x37, 0x9e, 0x85, 0x6e, 0x4a, 0x24,
-	0xb7, 0x42, 0x24, 0xb7, 0x20, 0x92, 0x7b, 0xb6, 0x11, 0x12, 0x6f, 0x25, 0x41, 0xef, 0xc1, 0xfe,
-	0x0d, 0x8d, 0x62, 0xbb, 0x69, 0x92, 0x1d, 0x96, 0x75, 0x3f, 0xa7, 0x51, 0x8c, 0x8d, 0x09, 0xbd,
-	0x0f, 0x07, 0x71, 0x94, 0x84, 0x8c, 0x2b, 0x1b, 0x4c, 0x8f, 0xdb, 0xa5, 0xd7, 0xd7, 0x46, 0x8f,
-	0x0b, 0x3b, 0x72, 0xe0, 0x7e, 0xc0, 0x54, 0xda, 0x9c, 0x27, 0xc1, 0x9c, 0x71, 0xbb, 0x65, 0x5a,
-	0x77, 0x47, 0xd7, 0xf9, 0xdd, 0x82, 0x93, 0xdd, 0x4f, 0x82, 0x8e, 0xa0, 0x36, 0xa3, 0xcb, 0x8c,
-	0x8b, 0x38, 0x15, 0x11, 0x81, 0x7b, 0x0b, 0x12, 0x25, 0x34, 0xa7, 0xdf, 0x9b, 0x34, 0x63, 0x33,
-	0x27, 0xce, 0x22, 0x7f, 0xb2, 0xf7, 0xb1, 0xe5, 0x5c, 0xc1, 0x3b, 0x3b, 0x1f, 0x0a, 0x75, 0x01,
-	0xb4, 0x24, 0xfe, 0x8c, 0xf1, 0x70, 0x3a, 0xc9, 0x0b, 0xab, 0x68, 0xd0, 0x23, 0x78, 0x40, 0xb8,
-	0xe0, 0xcb, 0xb4, 0xa5, 0x97, 0x8a, 0x4a, 0x65, 0x0a, 0x6d, 0xe0, 0x0d, 0xad, 0xf3, 0x29, 0xec,
-	0xa7, 0x1d, 0x45, 0x36, 0x1c, 0xf8, 0x37, 0x44, 0x5f, 0x16, 0x3f, 0x0e, 0x17, 0x47, 0xd4, 0x81,
-	0x46, 0x2a, 0xbe, 0xa4, 0xaf, 0xb4, 0x89, 0xd1, 0xc4, 0xe5, 0xd9, 0x79, 0x08, 0xf5, 0xac, 0xd3,
-	0x08, 0xc1, 0x3e, 0x27, 0x73, 0x9a, 0x83, 0x8d, 0xec, 0x7c, 0x0e, 0xcd, 0xf2, 0x33, 0xa2, 0x21,
-	0x80, 0x2f, 0x38, 0xa7, 0xbe, 0x16, 0x52, 0xd9, 0x96, 0x79, 0xaf, 0xdb, 0x4f, 0x3b, 0x2e, 0x4c,
-	0xb8, 0xe2, 0xe5, 0x3c, 0x86, 0x66, 0x69, 0xd8, 0x95, 0x21, 0xd5, 0xe9, 0x65, 0x4c, 0xf3, 0xba,
-	0x8c, 0xec, 0xfc, 0x5a, 0x83, 0xca, 0x07, 0xde, 0x09, 0x3b, 0x81, 0x3a, 0x53, 0x2a, 0xa1, 0x32,
-	0x07, 0xe6, 0x27, 0x34, 0x80, 0x86, 0x1f, 0x31, 0xca, 0xf5, 0x74, 0x62, 0x66, 0x44, 0x73, 0x74,
-	0x7f, 0xbd, 0xea, 0x35, 0xc6, 0xb9, 0x0e, 0x97, 0x56, 0x74, 0x0a, 0x2d, 0x3f, 0x62, 0x85, 0x21,
-	0x1b, 0x05, 0xa3, 0xf6, 0x7a, 0xd5, 0x6b, 0x8d, 0xcf, 0xa7, 0xa5, 0x7f, 0xd5, 0x27, 0x4d, 0xaa,
-	0x7c, 0x11, 0xe7, 0x03, 0xa1, 0x89, 0xf3, 0x13, 0xba, 0x82, 0x43, 0x16, 0xbc, 0x14, 0x33, 0xca,
-	0xc7, 0x66, 0x38, 0xda, 0x75, 0xd3, 0x9b, 0x47, 0x3b, 0xa6, 0x93, 0x3b, 0xad, 0x3a, 0x1a, 0x6a,
-	0x8e, 0x8e, 0xd7, 0xab, 0xde, 0xe1, 0x74, 0x52, 0xd1, 0xe3, 0xbb, 0xf1, 0x3a, 0x4b, 0x40, 0xdb,
-	0xb8, 0x1d, 0x94, 0xfe, 0xea, 0x2e, 0xa5, 0x3f, 0x7a, 0x2d, 0xa5, 0xb3, 0xe9, 0xee, 0x96, 0x8b,
-	0x29, 0x1d, 0x93, 0xae, 0x89, 0x5f, 0xa1, 0xef, 0xf0, 0x7b, 0x68, 0x17, 0xd3, 0xee, 0x05, 0x95,
-	0x0b, 0xe6, 0x53, 0xf4, 0x25, 0xd4, 0x9e, 0x51, 0x8d, 0x4e, 0xb6, 0xc6, 0xa1, 0x59, 0x01, 0x9d,
-	0xe3, 0x2d, 0xbd, 0x63, 0xff, 0xf2, 0xf7, 0xbf, 0x7f, 0xec, 0x21, 0x74, 0x64, 0x16, 0xda, 0xe2,
-	0xb4, 0x5c, 0x29, 0xa3, 0x2f, 0xfe, 0x5c, 0x77, 0xad, 0xbf, 0xd6, 0x5d, 0xeb, 0x9f, 0x75, 0xd7,
-	0xfa, 0x6e, 0xf8, 0x3f, 0x16, 0x5b, 0xf6, 0x80, 0x65, 0x84, 0xeb, 0xba, 0xd9, 0x44, 0x8f, 0xff,
-	0x0b, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x8d, 0x32, 0x73, 0x72, 0x07, 0x00, 0x00,
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x6e, 0x23, 0x45,
+	0x10, 0xd6, 0xc4, 0x59, 0xff, 0x94, 0xc9, 0x3a, 0x69, 0x20, 0x1a, 0xac, 0x95, 0x6d, 0xe6, 0xb0,
+	0x32, 0x07, 0x66, 0x88, 0xf7, 0x00, 0x42, 0x20, 0xc0, 0xf6, 0x6a, 0xd7, 0x24, 0x28, 0xd0, 0xbb,
+	0xe1, 0x80, 0x84, 0xa2, 0xce, 0x4c, 0x33, 0x69, 0x3c, 0xe9, 0x1e, 0x75, 0xf7, 0x98, 0x35, 0x47,
+	0x6e, 0x1c, 0x11, 0x47, 0x5e, 0x88, 0x23, 0x12, 0x77, 0x0b, 0x59, 0x3c, 0x08, 0x9a, 0x9e, 0x9f,
+	0x4c, 0x6c, 0x2b, 0x42, 0xda, 0x5b, 0x75, 0x7d, 0xf5, 0x55, 0x55, 0x57, 0x57, 0x57, 0x41, 0x4f,
+	0x51, 0xb9, 0xa0, 0xd2, 0x53, 0x54, 0x6b, 0xc6, 0x43, 0x55, 0x0a, 0x6e, 0x2c, 0x85, 0x16, 0xa8,
+	0xe1, 0x47, 0x89, 0xd2, 0x54, 0x76, 0xdf, 0x0a, 0x45, 0x28, 0x8c, 0xce, 0x4b, 0xa5, 0x0c, 0xee,
+	0x3e, 0x0a, 0x85, 0x08, 0x23, 0xea, 0x91, 0x98, 0x79, 0x84, 0x73, 0xa1, 0x89, 0x66, 0x82, 0xe7,
+	0xe4, 0xee, 0x2c, 0x64, 0xfa, 0x3a, 0xb9, 0x72, 0x7d, 0x71, 0xe3, 0x11, 0x69, 0xe8, 0x3f, 0x1a,
+	0xe1, 0x7d, 0x3f, 0xf0, 0xe2, 0x79, 0x98, 0xd2, 0x94, 0x47, 0xe2, 0x38, 0x62, 0xbe, 0x21, 0x7a,
+	0x8b, 0x13, 0x12, 0xc5, 0xd7, 0xe4, 0xc4, 0x0b, 0x29, 0xa7, 0x92, 0x68, 0x1a, 0xe4, 0xae, 0x3e,
+	0xbd, 0xcf, 0xd5, 0xe6, 0x1d, 0x04, 0x0b, 0x7c, 0xcf, 0x8f, 0x08, 0xbb, 0xc9, 0x33, 0x71, 0x3a,
+	0x70, 0xf0, 0x22, 0x47, 0xbf, 0x49, 0xa8, 0x5c, 0x3a, 0x7f, 0xd4, 0xa1, 0x59, 0x68, 0xd0, 0x3b,
+	0x50, 0x4b, 0x64, 0x64, 0x5b, 0x03, 0x6b, 0xd8, 0x1a, 0x37, 0xd6, 0xab, 0x7e, 0xed, 0x02, 0x9f,
+	0xe1, 0x54, 0x87, 0x3e, 0x80, 0x56, 0x40, 0x5f, 0x4d, 0x04, 0xff, 0x81, 0x85, 0xf6, 0xde, 0xc0,
+	0x1a, 0xb6, 0x47, 0xc8, 0xcd, 0x6b, 0xe2, 0x4e, 0x0b, 0x04, 0xdf, 0x1a, 0xa1, 0x09, 0x40, 0x1a,
+	0x3f, 0xa7, 0xd4, 0x0c, 0xe5, 0xcd, 0x92, 0x72, 0x3e, 0x9b, 0x4e, 0x32, 0x68, 0xfc, 0x70, 0xbd,
+	0xea, 0xc3, 0xed, 0x19, 0x57, 0x68, 0x68, 0x00, 0x6d, 0x12, 0xc7, 0x67, 0xe4, 0x8a, 0x46, 0xa7,
+	0x74, 0x69, 0xef, 0xa7, 0x99, 0xe1, 0xaa, 0x0a, 0x7d, 0x0b, 0x47, 0x92, 0x2a, 0x91, 0x48, 0x9f,
+	0x9e, 0x2f, 0xa8, 0x94, 0x2c, 0xa0, 0xca, 0x7e, 0x30, 0xa8, 0x0d, 0xdb, 0xa3, 0x61, 0x19, 0xad,
+	0xb8, 0xa1, 0x8b, 0x37, 0x4d, 0x9f, 0x72, 0x2d, 0x97, 0x78, 0xdb, 0x05, 0x72, 0x01, 0x29, 0x4d,
+	0x74, 0xa2, 0xc6, 0x24, 0x08, 0xe9, 0x53, 0x4e, 0xae, 0x22, 0x1a, 0xd8, 0xf5, 0x81, 0x35, 0x6c,
+	0xe2, 0x1d, 0x08, 0x7a, 0x0e, 0x9d, 0xac, 0x07, 0xbe, 0xe0, 0x24, 0x5a, 0x6a, 0xe6, 0x2b, 0xbb,
+	0x61, 0xee, 0xdc, 0x2b, 0xb3, 0x78, 0x76, 0x17, 0xcf, 0xaf, 0xbb, 0x49, 0x43, 0x3f, 0xc1, 0xe1,
+	0x3c, 0x51, 0x5a, 0xdc, 0xb0, 0x9f, 0xe9, 0x79, 0x6c, 0xfa, 0xc8, 0x6e, 0x1a, 0x57, 0xa7, 0xee,
+	0xed, 0xeb, 0xbb, 0xc5, 0xeb, 0x1b, 0xe1, 0xd2, 0x0f, 0xdc, 0x78, 0x1e, 0xba, 0x69, 0x23, 0xb9,
+	0x95, 0x46, 0x72, 0x8b, 0x46, 0x72, 0x4f, 0x37, 0x5c, 0xe2, 0xad, 0x20, 0xe8, 0x5d, 0xd8, 0xbf,
+	0xa6, 0x51, 0x6c, 0xb7, 0x4c, 0xb0, 0x83, 0x32, 0xef, 0xe7, 0x34, 0x8a, 0xb1, 0x81, 0xd0, 0x7b,
+	0xd0, 0x88, 0xa3, 0x24, 0x64, 0x5c, 0xd9, 0x60, 0x6a, 0xdc, 0x29, 0xad, 0xbe, 0x36, 0x7a, 0x5c,
+	0xe0, 0x69, 0x01, 0x13, 0x45, 0xe5, 0x99, 0x48, 0x4f, 0x53, 0xa6, 0xb2, 0x02, 0xb6, 0xb3, 0x02,
+	0x6e, 0x23, 0xdd, 0xdf, 0x2c, 0x38, 0xde, 0xfd, 0x3c, 0xe8, 0x10, 0x6a, 0x73, 0xba, 0xcc, 0xfa,
+	0x12, 0xa7, 0x22, 0x22, 0xf0, 0x60, 0x41, 0xa2, 0x84, 0xe6, 0xad, 0xf8, 0x3a, 0x85, 0xd9, 0x8c,
+	0x89, 0x33, 0xcf, 0x1f, 0xef, 0x7d, 0x64, 0x39, 0x97, 0xf0, 0xf6, 0xce, 0x47, 0x43, 0x3d, 0x00,
+	0x2d, 0x89, 0x3f, 0x67, 0x3c, 0x9c, 0x4d, 0xf3, 0xc4, 0x2a, 0x1a, 0xf4, 0x18, 0x1e, 0x12, 0x2e,
+	0xf8, 0x32, 0x2d, 0xef, 0x85, 0xa2, 0x52, 0x99, 0x44, 0x9b, 0x78, 0x43, 0xeb, 0x7c, 0x02, 0xfb,
+	0x69, 0x75, 0x91, 0x0d, 0x0d, 0xff, 0x9a, 0xe8, 0x8b, 0xe2, 0xf7, 0xe1, 0xe2, 0x88, 0xba, 0xd0,
+	0x4c, 0xc5, 0x97, 0xf4, 0x95, 0x36, 0x3e, 0x5a, 0xb8, 0x3c, 0x3b, 0x8f, 0xa0, 0x9e, 0x55, 0x1d,
+	0x21, 0xd8, 0xe7, 0xe4, 0x86, 0xe6, 0x64, 0x23, 0x3b, 0x9f, 0x41, 0xab, 0xfc, 0x98, 0x68, 0x04,
+	0xe0, 0x0b, 0xce, 0xa9, 0xaf, 0x85, 0x54, 0xb6, 0x65, 0xde, 0xee, 0xf6, 0x03, 0x4f, 0x0a, 0x08,
+	0x57, 0xac, 0x9c, 0x27, 0xd0, 0x2a, 0x81, 0x5d, 0x11, 0x52, 0x9d, 0x5e, 0xc6, 0x34, 0xcf, 0xcb,
+	0xc8, 0xce, 0xaf, 0x35, 0xa8, 0x7c, 0xe6, 0x9d, 0xb4, 0x63, 0xa8, 0x33, 0xa5, 0x12, 0x2a, 0x73,
+	0x62, 0x7e, 0x42, 0x43, 0x68, 0xfa, 0x11, 0xa3, 0x5c, 0xcf, 0xa6, 0x66, 0x5e, 0xb4, 0xc6, 0x6f,
+	0xac, 0x57, 0xfd, 0xe6, 0x24, 0xd7, 0xe1, 0x12, 0x45, 0x27, 0xd0, 0xf6, 0x23, 0x56, 0x00, 0xd9,
+	0x58, 0x18, 0x77, 0xd6, 0xab, 0x7e, 0x7b, 0x72, 0x36, 0x2b, 0xed, 0xab, 0x36, 0x69, 0x50, 0xe5,
+	0x8b, 0x38, 0x1f, 0x0e, 0x2d, 0x9c, 0x9f, 0xd0, 0x25, 0x1c, 0xb0, 0xe0, 0xa5, 0x98, 0x53, 0x3e,
+	0x31, 0x83, 0xd2, 0xae, 0x9b, 0xda, 0x3c, 0xde, 0x31, 0xa9, 0xdc, 0x59, 0xd5, 0xd0, 0xb4, 0xe6,
+	0xf8, 0x68, 0xbd, 0xea, 0x1f, 0xcc, 0xa6, 0x15, 0x3d, 0xbe, 0xeb, 0xaf, 0xbb, 0x04, 0xb4, 0xcd,
+	0xdb, 0xd1, 0xd2, 0x5f, 0xdd, 0x6d, 0xe9, 0x0f, 0xef, 0x6d, 0xe9, 0x6c, 0xd2, 0xbb, 0xe5, 0x92,
+	0x4a, 0x47, 0xa6, 0x6b, 0xfc, 0x57, 0xda, 0x77, 0xf4, 0x3d, 0x74, 0x8a, 0xc9, 0xf7, 0x82, 0xca,
+	0x05, 0xf3, 0x29, 0xfa, 0x12, 0x6a, 0xcf, 0xa8, 0x46, 0xc7, 0x5b, 0xa3, 0xd1, 0xac, 0x83, 0xee,
+	0xd1, 0x96, 0xde, 0xb1, 0x7f, 0xf9, 0xfb, 0xdf, 0xdf, 0xf7, 0x10, 0x3a, 0x34, 0xcb, 0x6d, 0x71,
+	0x52, 0xae, 0x97, 0xf1, 0xe7, 0x7f, 0xae, 0x7b, 0xd6, 0x5f, 0xeb, 0x9e, 0xf5, 0xcf, 0xba, 0x67,
+	0x7d, 0x37, 0xfa, 0x1f, 0x4b, 0x2e, 0x7b, 0xc0, 0xd2, 0xc3, 0x55, 0xdd, 0x6c, 0xa5, 0x27, 0xff,
+	0x05, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x47, 0xbe, 0x4d, 0x7e, 0x07, 0x00, 0x00,
 }
 
 // Reference imports to suppress errors if they are not otherwise used.
@@ -760,9 +760,9 @@ func (m *Settings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
 		i -= len(m.XXX_unrecognized)
 		copy(dAtA[i:], m.XXX_unrecognized)
 	}
-	if m.DisableAdmin {
+	if m.UserLoginsDisabled {
 		i--
-		if m.DisableAdmin {
+		if m.UserLoginsDisabled {
 			dAtA[i] = 1
 		} else {
 			dAtA[i] = 0
@@ -1267,7 +1267,7 @@ func (m *Settings) Size() (n int) {
 			n += 1 + l + sovSettings(uint64(l))
 		}
 	}
-	if m.DisableAdmin {
+	if m.UserLoginsDisabled {
 		n += 2
 	}
 	if m.XXX_unrecognized != nil {
@@ -1934,7 +1934,7 @@ func (m *Settings) Unmarshal(dAtA []byte) error {
 			iNdEx = postIndex
 		case 11:
 			if wireType != 0 {
-				return fmt.Errorf("proto: wrong wireType = %d for field DisableAdmin", wireType)
+				return fmt.Errorf("proto: wrong wireType = %d for field UserLoginsDisabled", wireType)
 			}
 			var v int
 			for shift := uint(0); ; shift += 7 {
@@ -1951,7 +1951,7 @@ func (m *Settings) Unmarshal(dAtA []byte) error {
 					break
 				}
 			}
-			m.DisableAdmin = bool(v != 0)
+			m.UserLoginsDisabled = bool(v != 0)
 		default:
 			iNdEx = preIndex
 			skippy, err := skipSettings(dAtA[iNdEx:])