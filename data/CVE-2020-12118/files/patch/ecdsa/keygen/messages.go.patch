@@ -13,6 +13,7 @@ import (
 
 	"github.com/binance-chain/tss-lib/common"
 	cmt "github.com/binance-chain/tss-lib/crypto/commitments"
+	"github.com/binance-chain/tss-lib/crypto/dlnproof"
 	"github.com/binance-chain/tss-lib/crypto/paillier"
 	"github.com/binance-chain/tss-lib/crypto/vss"
 	"github.com/binance-chain/tss-lib/tss"
@@ -45,20 +46,31 @@ func NewKGRound1Message(
 	ct cmt.HashCommitment,
 	paillierPK *paillier.PublicKey,
 	nTildeI, h1I, h2I *big.Int,
-) tss.ParsedMessage {
+	dlnProof1, dlnProof2 *dlnproof.Proof,
+) (tss.ParsedMessage, error) {
 	meta := tss.MessageRouting{
 		From:        from,
 		IsBroadcast: true,
 	}
+	dlnProof1Bz, err := dlnProof1.Serialize()
+	if err != nil {
+		return nil, err
+	}
+	dlnProof2Bz, err := dlnProof2.Serialize()
+	if err != nil {
+		return nil, err
+	}
 	content := &KGRound1Message{
 		Commitment: ct.Bytes(),
 		PaillierN:  paillierPK.N.Bytes(),
 		NTilde:     nTildeI.Bytes(),
 		H1:         h1I.Bytes(),
 		H2:         h2I.Bytes(),
+		Dlnproof_1: dlnProof1Bz,
+		Dlnproof_2: dlnProof2Bz,
 	}
 	msg := tss.NewMessageWrapper(meta, content)
-	return tss.NewMessage(meta, content, msg)
+	return tss.NewMessage(meta, content, msg), nil
 }
 
 func (m *KGRound1Message) ValidateBasic() bool {
@@ -67,7 +79,10 @@ func (m *KGRound1Message) ValidateBasic() bool {
 		common.NonEmptyBytes(m.GetPaillierN()) &&
 		common.NonEmptyBytes(m.GetNTilde()) &&
 		common.NonEmptyBytes(m.GetH1()) &&
-		common.NonEmptyBytes(m.GetH2())
+		common.NonEmptyBytes(m.GetH2()) &&
+		// expected len of dln proof = sizeof(int64) + len(alpha) + len(t)
+		common.NonEmptyMultiBytes(m.GetDlnproof_1(), 2+(dlnproof.Iterations*2)) &&
+		common.NonEmptyMultiBytes(m.GetDlnproof_2(), 2+(dlnproof.Iterations*2))
 }
 
 func (m *KGRound1Message) UnmarshalCommitment() *big.Int {
@@ -90,6 +105,14 @@ func (m *KGRound1Message) UnmarshalH2() *big.Int {
 	return new(big.Int).SetBytes(m.GetH2())
 }
 
+func (m *KGRound1Message) UnmarshalDLNProof1() (*dlnproof.Proof, error) {
+	return dlnproof.UnmarshalDLNProof(m.GetDlnproof_1())
+}
+
+func (m *KGRound1Message) UnmarshalDLNProof2() (*dlnproof.Proof, error) {
+	return dlnproof.UnmarshalDLNProof(m.GetDlnproof_2())
+}
+
 // ----- //
 
 func NewKGRound2Message1(