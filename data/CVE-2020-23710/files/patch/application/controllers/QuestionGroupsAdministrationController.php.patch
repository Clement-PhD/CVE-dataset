@@ -1,49 +1,216 @@
 <?php
 
-if (!defined('BASEPATH')) {
-    exit('No direct script access allowed');
-}
-/*
- * LimeSurvey
- * Copyright (C) 2007-2011 The LimeSurvey Project Team / Carsten Schmitz
- * All rights reserved.
- * License: GNU/GPL License v2 or later, see LICENSE.php
- * LimeSurvey is free software. This version may have been modified pursuant
- * to the GNU General Public License, and as distributed it includes or
- * is derivative of works licensed under the GNU General Public License or
- * other free or open source software licenses.
- * See COPYRIGHT.php for copyright notices and details.
- *
- */
-
-/**
- * questiongroup
- *
- * @package LimeSurvey
- * @author
- * @copyright 2011
- * @access public
- */
-class questiongroups extends Survey_Common_Action
+
+class QuestionGroupsAdministrationController extends LSBaseController
 {
 
     /**
-     * questiongroup::import()
+     * It's import to have the accessRules set (security issue).
+     * Only logged in users should have access to actions. All other permissions
+     * should be checked in the action itself.
+     *
+     * @return array
+     */
+    public function accessRules()
+    {
+        return array(
+            array(
+                'allow',
+                'actions' => array(),
+                'users' => array('*'), //everybody
+            ),
+            array(
+                'allow',
+                'actions' => array(
+                    'view',
+                    'delete',
+                    'add',
+                    'getQuestionGroupTopBar',
+                    'getQuestionsForGroup',
+                    'import',
+                    'importView',
+                    'loadQuestionGroup',
+                    'saveQuestionGroupData',
+                    'updateOrder'
+                ),
+                'users' => array('@'), //only login users
+            ),
+            array('deny'), //always deny all actions not mentioned above
+        );
+    }
+
+    /**
+     * This part comes from _renderWrappedTemplate
+     *
+     * @param string $view
+     * @return bool
+     */
+    protected function beforeRender($view)
+    {
+        $this->aData['topBar']['type'] = 'group';
+        $this->aData['topBar']['showSaveButton'] = true;
+
+        if (isset($this->aData['surveyid'])) {
+            $this->aData['oSurvey'] = Survey::model()->findByPk($this->aData['surveyid']);
+
+            // Needed to evaluate EM expressions in question summary
+            // See bug #11845
+            LimeExpressionManager::SetSurveyId($this->aData['surveyid']);
+            LimeExpressionManager::StartProcessingPage(false, true);
+
+            $this->layout = 'layout_questioneditor';
+        }
+
+        return parent::beforeRender($view);
+    }
+
+    /**
+     * Renders the html for the question group view.
+     *
+     * @param int $surveyid
+     * @param int $gid
+     * @param string $landOnSideMenuTab
+     *
+     * * @return void
+     */
+    public function actionView($surveyid, $gid, $landOnSideMenuTab = 'structure')
+    {
+        //check permissions for view and create groups ...
+        if ($gid === null) { //this is the case when new questiongroup should be created
+            if (!Permission::model()->hasSurveyPermission($surveyid, 'surveycontent', 'create')) {
+                App()->user->setFlash('error', gT("Access denied"));
+                $this->redirect(App()->request->urlReferrer);
+            }
+        } elseif (!Permission::model()->hasSurveyPermission($surveyid, 'surveycontent', 'read')) {
+                App()->user->setFlash('error', gT("Access denied"));
+                $this->redirect(App()->request->urlReferrer);
+        }
+
+        $aData = array();
+        $aData['surveyid'] = $iSurveyID = $surveyid;
+        $survey = Survey::model()->findByPk($iSurveyID);
+        $aData['gid'] = $gid;
+        $baselang = $survey->language;
+        if ($gid!==null) {
+            $condarray = getGroupDepsForConditions($surveyid, "all", $gid, "by-targgid");
+        }
+        $aData['condarray'] = $condarray ?? [];
+
+        App()->getClientScript()->registerPackage('ace');
+        App()->getClientScript()->registerPackage('questiongroupeditor');
+
+        $oQuestionGroup = $this->getQuestionGroupObject($iSurveyID, $gid);
+        $grow           = $oQuestionGroup->attributes;
+
+        $grow = array_map('flattenText', $grow);
+
+        $aData['oQuestionGroup'] = $oQuestionGroup;
+        $aData['surveyid'] = $surveyid;
+        $aData['sid'] = $aData['surveyid']; //importend for frontend to render topbar
+        $aData['gid'] = $gid;
+        $aData['grow'] = $grow;
+
+        $aData['title_bar']['title'] = $survey->currentLanguageSettings->surveyls_title
+            . " (".gT("ID").":".$iSurveyID.")";
+        $aData['questiongroupbar']['buttons']['view'] = true;
+
+        $aData['questiongroupbar']['buttonspreview'] = true;
+        $aData['questiongroupbar']['savebutton']['form'] = true;
+        $aData['questiongroupbar']['saveandclosebutton']['form'] = true;
+        if (sanitize_paranoid_string(App()->request->getParam('sa') == 'add')) {
+            $aData['questiongroupbar']['importbutton'] = true;
+        }
+
+        ///////////
+        // sidemenu
+        $aData['sidemenu']['state'] = true;
+        $aData['sidemenu']['questiongroups'] = true;
+        $aData['sidemenu']['group_name'] = $oQuestionGroup->questiongroupl10ns[$baselang]->group_name ?? '';
+        $aData['sidemenu']['explorer']['state'] = true;
+        $aData['sidemenu']['explorer']['gid'] = (isset($gid)) ? $gid : false;
+        $aData['sidemenu']['explorer']['qid'] = false;
+        $aData['sidemenu']['landOnSideMenuTab'] = $landOnSideMenuTab;
+
+        $aData['jsData'] = [
+            'surveyid' => $iSurveyID,
+            'gid' => $gid,
+            'startInEditView' => SettingsUser::getUserSettingValue('noViewMode', App()->user->id) == '1',
+            'openQuestionUrl' => $this->createUrl(
+                'questionAdministration/view/',
+                ['surveyid'=>$iSurveyID, 'gid'=>$gid, 'qid' => '']
+            ),
+            'createQuestionUrl' => $this->createUrl(
+                "questionAdministration/view/",
+                ["surveyid" =>  $surveyid, 'gid' => $gid]
+            ),
+            'i10N' => [
+                'Question group' => gT('Question group'),
+                'Group overview' => gT('Group overview'),
+                'Question list' => gT('Question list'),
+                'Create new question group' => gT('Create new question group'),
+                'Question group overview' => gT('Question group overview'),
+                'Question group editor' => gT('Question group editor'),
+                'General Settings' => gT("General Settings"),
+                'Group summary' => gT('Group summary'),
+                'Random Group' => gT('Random Group'),
+                'Title' => gT('Title'),
+                'Condition' => gT('Condition'),
+                'Description' => gT('Description'),
+                'Quick actions' => gT('Quick actions'),
+                'Subquestions' => gT('Subquestions'),
+                'Answeroptions' => gT('Answer options'),
+                'Question type' => gT('Question type'),
+                'Default answer' => gT('Default answer'),
+                'Create question' => gT('Create question'),
+                'Order' => gT('Order'),
+                'Question code' => gT('Code'),
+                'Question' => gT('Question'),
+                'QuestionType' => gT('Question type'),
+                'Mandatory' => gT('Mandatory'),
+                'Encrypted' => gT('Encrypted'),
+                'Actions' => gT('Actions'),
+            ]
+        ];
+
+        $this->aData = $aData;
+
+        $this->render('group_view', [
+            'jsData' => $this->aData['jsData'],
+            'gid' => $this->aData['gid']
+        ]);
+    }
+
+    /**
+     * Render view to add new question group.
+     * Redirects to the action view
+     *
+     * todo: this could be a call to the action view directly ?!?
+     *
+     * @param int $surveyid
+     *
+     * @return void
+     */
+    public function actionAdd($surveyid)
+    {
+        $this->actionView($surveyid, null, 'structure');
+    }
+
+    /**
      * Function responsible to import a question group.
      *
      * @access public
      * @return void
-     * @throws CHttpException
      */
-    public function import()
+    public function actionImport()
     {
         $action = $_POST['action'];
         $iSurveyID = $surveyid = $aData['surveyid'] = (int) $_POST['sid'];
         $survey = Survey::model()->findByPk($iSurveyID);
 
         if (!Permission::model()->hasSurveyPermission($surveyid, 'surveycontent', 'import')) {
             App()->user->setFlash('error', gT("Access denied"));
-            $this->getController()->redirect(array('admin/survey/sa/listquestiongroups/surveyid/'.$surveyid));
+            //todo: action listquestiongroups could go into this controller ??
+            $this->redirect(array('admin/survey/sa/listquestiongroups/surveyid/'.$surveyid));
         }
 
         if ($action == 'importgroup') {
@@ -57,9 +224,7 @@ public function import()
             if ($_FILES['the_file']['error'] == 1 || $_FILES['the_file']['error'] == 2) {
                 $fatalerror = sprintf(
                     gT("Sorry, this file is too large. Only files up to %01.2f MB are allowed."),
-                    getMaximumFileUploadSize()
-                    / 1024
-                    / 1024
+                    getMaximumFileUploadSize() / 1024 / 1024
                 )
                     .'<br>';
             } elseif (!@move_uploaded_file($_FILES['the_file']['tmp_name'], $sFullFilepath)) {
@@ -70,14 +235,14 @@ public function import()
             }
 
             // validate that we have a SID
-            if (!returnGlobal('sid')) {
+            if (!returnGlobal('sid')) { //todo: use Yii::getParam ...
                 $fatalerror .= gT("No SID (Survey) has been provided. Cannot import question.");
             }
 
             if (isset($fatalerror)) {
                 @unlink($sFullFilepath);
                 App()->user->setFlash('error', $fatalerror);
-                $this->getController()->redirect(array('admin/questiongroups/sa/importview/surveyid/'.$surveyid));
+                $this->redirect(array('questionGroupsAdministration/importview/surveyid/'.$surveyid));
             }
 
             App()->loadHelper('admin/import');
@@ -91,40 +256,47 @@ public function import()
                 );
             } else {
                 App()->user->setFlash('error', gT("Unknown file extension"));
-                $this->getController()->redirect(array('admin/questiongroups/sa/importview/surveyid/'.$surveyid));
+                $this->redirect(array('questionGroupsAdministration/importview/surveyid/'.$surveyid));
             }
             LimeExpressionManager::SetDirtyFlag(); // so refreshes syntax highlighting
             fixLanguageConsistency($iSurveyID);
 
             if (isset($aImportResults['fatalerror'])) {
                 unlink($sFullFilepath);
                 App()->user->setFlash('error', $aImportResults['fatalerror']);
-                $this->getController()->redirect(array('admin/questiongroups/sa/importview/surveyid/'.$surveyid));
+                $this->redirect(array('questionGroupsAdministration/importview/surveyid/'.$surveyid));
             }
 
             unlink($sFullFilepath);
 
             $aData['display'] = $importgroup;
             $aData['surveyid'] = $iSurveyID;
+            $aData['sid'] = $aData['surveyid']; //frontend needs this to render topbar in getAjaxMenuArray
             $aData['aImportResults'] = $aImportResults;
             $aData['sExtension'] = $sExtension;
             $aData['sidemenu']['state'] = false;
 
             $aData['title_bar']['title'] = $survey->currentLanguageSettings->surveyls_title
                 ." (".gT("ID").":".$iSurveyID.")";
 
-            $this->_renderWrappedTemplate('survey/QuestionGroups', 'import_view', $aData);
+            $this->aData = $aData;
+            $this->render('import_view', [
+                'aImportResults' => $this->aData['aImportResults'],
+                'sExtension' => $this->aData['sExtension'],
+                'surveyid' => $this->aData['surveyid']
+            ]);
         }
     }
 
     /**
-     * Import a question group
+     * Import a question group. If user has no permission for that, it redirects to
+     * list of questionGroupsAdministration
      *
      * @param integer $surveyid
      *
-     * @throws CHttpException
+     * @return void
      */
-    public function importView($surveyid)
+    public function actionImportView($surveyid)
     {
         $iSurveyID = $surveyid = sanitize_int($surveyid);
         $survey = Survey::model()->findByPk($iSurveyID);
@@ -145,92 +317,19 @@ public function importView($surveyid)
             $aData['title_bar']['title'] = $survey->currentLanguageSettings->surveyls_title
                 ." (".gT("ID").":".$iSurveyID.")";
 
-            $this->_renderWrappedTemplate('survey/QuestionGroups', 'importGroup_view', $aData);
+            $this->aData = $aData;
+            $this->render('importGroup_view', [
+                'surveyid' => $this->aData['surveyid']
+            ]);
         } else {
             App()->user->setFlash('error', gT("Access denied"));
-            $this->getController()->redirect(array('admin/survey/sa/listquestiongroups/surveyid/'.$surveyid));
-        }
-    }
-
-    /**
-     * questiongroup::add()
-     * Load add new question group screen.
-     * @return
-     */
-    public function add($surveyid)
-    {
-        return $this->view($surveyid, null, 'structure');
-    }
-
-    /**
-     * Insert the new group to the database
-     *
-     * @access public
-     * @param int $surveyid
-     * @return void
-     */
-    public function insert($surveyid)
-    {
-        if (Permission::model()->hasSurveyPermission($surveyid, 'surveycontent', 'create')) {
-            App()->loadHelper('surveytranslator');
-
-            $oGroup = new QuestionGroup;
-            $oGroup->sid = $surveyid;
-            $oGroup->group_order = getMaxGroupOrder($surveyid);
-
-            $oGroup->randomization_group = App()->request->getPost('randomization_group');
-            $oGroup->grelevance = App()->request->getPost('grelevance');
-            if ($oGroup->save()) {
-                $newGroupID = $oGroup->gid;
-            } else {
-                App()->setFlashMessage(CHtml::errorSummary($oGroup), 'error');
-                $this->getController()->redirect(array("admin/questiongroups/sa/add/surveyid/$surveyid"));
-            }
-            $sSurveyLanguages = Survey::model()->findByPk($surveyid)->getAllLanguages();
-            foreach ($sSurveyLanguages as $sLanguage) {
-                $oGroupLS = new QuestionGroupL10n;
-                $oGroupLS->gid = $newGroupID;
-                $oGroupLS->group_name = App()->request->getPost('group_name_'.$sLanguage, "");
-                $oGroupLS->description = App()->request->getPost('description_'.$sLanguage, "");
-                $oGroupLS->language = $sLanguage;
-                $oGroupLS->save();
-            }
-            App()->setFlashMessage(gT("New question group was saved."));
-            App()->setFlashMessage(
-                sprintf(
-                    gT('You can now %sadd a question%s in this group.'),
-                    '<a href="'
-                    .App()->createUrl("admin/questions/sa/newquestion/surveyid/$surveyid/gid/$newGroupID")
-                    .'">',
-                    '</a>'
-                ),
-                'info'
-            );
-            if (App()->request->getPost('close-after-save') === 'true') {
-                $this->getController()->redirect(
-                    array("admin/questiongroups/sa/view/surveyid/$surveyid/gid/$newGroupID")
-                );
-            } elseif (App()->request->getPost('saveandnew', '') !== '') {
-                $this->getController()->redirect(array("admin/questiongroups/sa/add/surveyid/$surveyid"));
-            } elseif (App()->request->getPost('saveandnewquestion', '') !== '') {
-                $this->getController()->redirect(
-                    array("admin/questions/sa/newquestion/",
-                        'surveyid' => $surveyid, 'gid' => $newGroupID)
-                );
-            } else {
-                // After save, go to edit
-                $this->getController()->redirect(
-                    array("admin/questiongroups/sa/edit/surveyid/$surveyid/gid/$newGroupID")
-                );
-            }
-        } else {
-            App()->user->setFlash('error', gT("Access denied"));
-            $this->getController()->redirect(App()->request->urlReferrer);
+            $this->redirect(array('admin/survey/sa/listquestiongroups/surveyid/'.$surveyid));
         }
     }
 
     /**
      * Action to delete a question group.
+     * Could be an ajaxRequest OR a redirect to list question groups
      *
      * @access public
      *
@@ -239,9 +338,9 @@ public function insert($surveyid)
      * @param boolean $asJson    Value of to Render as JSON
      *
      * @return void
-     * @throws CHttpException
+     * @throws CHttpException if not authorized or invalid question group
      */
-    public function delete($iSurveyId = null, $iGroupId = null, $asJson = false)
+    public function actionDelete($iSurveyId = null, $iGroupId = null, $asJson = false)
     {
         if (is_null($iGroupId)) {
             $iGroupId = App()->getRequest()->getPost('gid');
@@ -271,7 +370,7 @@ public function delete($iSurveyId = null, $iGroupId = null, $asJson = false)
                     'success' => $success,
                     'deletedGroups' => $iGroupsDeleted,
                     'message' => ($success ?gT('The question group was deleted.') : gT('Group could not be deleted')),
-                    'redirect' => $this->getController()->createUrl(
+                    'redirect' => $this->createUrl(
                         'admin/survey/sa/listquestiongroups/',
                         ['surveyid' => $iSurveyId]
                     )
@@ -288,121 +387,20 @@ public function delete($iSurveyId = null, $iGroupId = null, $asJson = false)
         }
 
         LimeExpressionManager::UpgradeConditionsToRelevance($iSurveyId);
-        $this->getController()->redirect(array('admin/survey/sa/listquestiongroups/surveyid/'.$iSurveyId));
+        $this->redirect(array('admin/survey/sa/listquestiongroups/surveyid/'.$iSurveyId));
     }
 
-    /**
-     * View the current question list.
-     *
-     * @param integer $surveyid           Survey ID
-     * @param integer $gid                Group ID
-     * @param string  $landOnSideMenuTab  Name of side menu tab. Default behavior is to land on the structure tab.
-     * @return void
-     * @throws CHttpException
-     */
-    public function view($surveyid, $gid, $landOnSideMenuTab = 'structure')
-    {
-        $aData = array();
-        $aData['surveyid'] = $iSurveyID = $surveyid;
-        $survey = Survey::model()->findByPk($iSurveyID);
-        $aData['gid'] = $gid;
-        $baselang = $survey->language;
-        if ($gid!==null) {
-            $condarray = getGroupDepsForConditions($surveyid, "all", $gid, "by-targgid");
-        }
-        $aData['condarray'] = $condarray ?? [];
-
-        App()->getClientScript()->registerPackage('ace');
-        App()->getClientScript()->registerPackage('questiongroupeditor');
-
-        $oQuestionGroup = $this->_getQuestionGroupObject($gid);
-        $grow           = $oQuestionGroup->attributes;
-
-        $grow = array_map('flattenText', $grow);
-
-        $aData['oQuestionGroup'] = $oQuestionGroup;
-        $aData['surveyid'] = $surveyid;
-        $aData['gid'] = $gid;
-        $aData['grow'] = $grow;
-
-        $aData['title_bar']['title'] = $survey->currentLanguageSettings->surveyls_title
-            . " (".gT("ID").":".$iSurveyID.")";
-        $aData['questiongroupbar']['buttons']['view'] = true;
-
-        $aData['questiongroupbar']['buttonspreview'] = true;
-        $aData['questiongroupbar']['savebutton']['form'] = true;
-        $aData['questiongroupbar']['saveandclosebutton']['form'] = true;
-        if (sanitize_paranoid_string(App()->request->getParam('sa') == 'add')) {
-            $aData['questiongroupbar']['importbutton'] = true;
-        }
-
-        ///////////
-        // sidemenu
-        // TODO: Code duplication (Line 611 - 614) side menu state
-        $aData['sidemenu']['state'] = true;
-        $aData['sidemenu']['questiongroups'] = true;
-        $aData['sidemenu']['group_name'] = $oQuestionGroup->questiongroupl10ns[$baselang]->group_name ?? '';
-        $aData['sidemenu']['explorer']['state'] = true;
-        $aData['sidemenu']['explorer']['gid'] = (isset($gid)) ? $gid : false;
-        $aData['sidemenu']['explorer']['qid'] = false;
-        $aData['sidemenu']['landOnSideMenuTab'] = $landOnSideMenuTab;
-
-        $aData['jsData'] = [
-            'surveyid' => $iSurveyID,
-            'gid' => $gid,
-            'startInEditView' => SettingsUser::getUserSettingValue('noViewMode', App()->user->id) == '1',
-            'connectorBaseUrl' => $this->getController()->createUrl(
-                'admin/questiongroups',
-                ['sid' => $iSurveyID, 'sa' => '']
-            ),
-            'openQuestionUrl' => $this->getController()->createUrl(
-                'questionEditor/view/',
-                ['surveyid'=>$iSurveyID, 'gid'=>$gid, 'qid' => '']
-            ),
-            'createQuestionUrl' => $this->getController()->createUrl(
-                "questionEditor/view/",
-                ["surveyid" =>  $surveyid, 'gid' => $gid]
-            ),
-            'i10N' => [
-                'Question group' => gT('Question group'),
-                'Group overview' => gT('Group overview'),
-                'Question list' => gT('Question list'),
-                'Create new question group' => gT('Create new question group'),
-                'Question group overview' => gT('Question group overview'),
-                'Question group editor' => gT('Question group editor'),
-                'General Settings' => gT("General Settings"),
-                'Group summary' => gT('Group summary'),
-                'Random Group' => gT('Random Group'),
-                'Title' => gT('Title'),
-                'Condition' => gT('Condition'),
-                'Description' => gT('Description'),
-                'Quick actions' => gT('Quick actions'),
-                'Question list' => gT('Question list'),
-                'Subquestions' => gT('Subquestions'),
-                'Answeroptions' => gT('Answer options'),
-                'Question type' => gT('Question type'),
-                'Default answer' => gT('Default answer'),
-                'Create question' => gT('Create question'),
-                'Order' => gT('Order'),
-                'Question code' => gT('Code'),
-                'Question' => gT('Question'),
-                'QuestionType' => gT('Question type'),
-                'Mandatory' => gT('Mandatory'),
-                'Encrypted' => gT('Encrypted'),
-                'Actions' => gT('Actions'),
-               ]
-        ];
-
-        $this->_renderWrappedTemplate('survey/QuestionGroups', 'group_view', $aData);
-    }
 
     /**
-     * @todo document me.
+     * Ajax request
+     *
+     * Returns the data for a question group. If question group
+     * does not exists a new question group will be returned (not saved)
      *
-     * @param $surveyid
+     * @param int $surveyid
      * @param null $iQuestionGroupId
      */
-    public function loadQuestionGroup($surveyid, $iQuestionGroupId = null)
+    public function actionLoadQuestionGroup($surveyid, $iQuestionGroupId = null)
     {
         $oQuestionGroup = QuestionGroup::model()->findByPk($iQuestionGroupId);
         $oSurvey = Survey::model()->findByPk($surveyid);
@@ -479,15 +477,15 @@ public function loadQuestionGroup($surveyid, $iQuestionGroupId = null)
     }
 
     /**
-     * @todo document me.
-     * @todo unused $surveyid param
+     * Ajax request
+     *
+     * Returns all questions that belong to the group.
      *
-     * @param $surveyid         integer ID of survey
      * @param $iQuestionGroupId integer ID of question group
      *
      * @return void
      */
-    public function getQuestionsForGroup($surveyid, $iQuestionGroupId)
+    public function actionGetQuestionsForGroup($iQuestionGroupId)
     {
         $iQuestionGroupId = (int) $iQuestionGroupId;
         $oQuestionGroup = QuestionGroup::model()->findByPk($iQuestionGroupId);
@@ -505,35 +503,52 @@ public function getQuestionsForGroup($surveyid, $iQuestionGroupId)
     }
 
     /**
-     * @todo document me.
+     * Ajax request
+     *
+     * Creates and updates question groups
      *
      * @param integer $sid ID of survey
      *
      * @throws CException
+     *
+     * @return void
+     *
      */
-    public function saveQuestionGroupData($sid)
+    public function actionSaveQuestionGroupData($sid)
     {
         $questionGroup = App()->request->getPost('questionGroup', []);
         $questionGroupI10N = App()->request->getPost('questionGroupI10N', []);
         $iSurveyId = (int) $sid;
 
         $oQuestionGroup = QuestionGroup::model()->findByPk($questionGroup['gid']);
+
+        //permission check ...
+        if ($oQuestionGroup == null) {
+            if (!Permission::model()->hasSurveyPermission($sid, 'surveycontent', 'create')) {
+                App()->user->setFlash('error', gT("Access denied"));
+                $this->redirect(App()->request->urlReferrer);
+            }
+        } elseif (!Permission::model()->hasSurveyPermission($sid, 'surveycontent', 'update')) {
+            App()->user->setFlash('error', gT("Access denied"));
+            $this->redirect(App()->request->urlReferrer);
+        }
+
         if ($oQuestionGroup == null) {
-            $oQuestionGroup = $this->_newQuestionGroup($questionGroup);
+            $oQuestionGroup = $this->newQuestionGroup($iSurveyId, $questionGroup);
         } else {
-            $oQuestionGroup = $this->_editQuestionGroup($oQuestionGroup, $questionGroup);
+            $oQuestionGroup = $this->editQuestionGroup($oQuestionGroup, $questionGroup);
         }
 
         $landOnSideMenuTab = 'structure';
-        $sRedirectUrl = $this->getController()->createUrl(
-            'admin/questiongroups/sa/view/',
+        $sRedirectUrl = $this->createUrl(
+            'questionGroupsAdministration/view/',
             [
                 'surveyid' => $iSurveyId,
                 'gid' => $oQuestionGroup->gid,
                 'landOnSideMenuTab' => $landOnSideMenuTab]
         );
 
-        $success = $this->_applyI10N($oQuestionGroup, $questionGroupI10N);
+        $success = $this->applyI10N($oQuestionGroup, $questionGroupI10N);
 
         $aQuestionGroup = $oQuestionGroup->attributes;
         LimeExpressionManager::ProcessString('{' . $aQuestionGroup['grelevance'] . '}');
@@ -554,126 +569,19 @@ public function saveQuestionGroupData($sid)
         App()->close();
     }
 
-    /**
-     * questiongroup::edit()
-     * Load editing of a question group screen.
-     *
-     * @access public
-     * @param int $surveyid
-     * @param int $gid
-     *
-     * @return void
-     * @throws CHttpException
-     */
-    public function edit($surveyid, $gid)
-    {
-        $surveyid = $iSurveyID = sanitize_int($surveyid);
-        $survey = Survey::model()->findByPk($surveyid);
-        $gid = sanitize_int($gid);
-        // TODO: unused variable $aViewUrls
-        $aViewUrls = $aData = array();
-
-        if (Permission::model()->hasSurveyPermission($surveyid, 'surveycontent', 'update')) {
-            App()->session['FileManagerContext'] = "edit:group:{$surveyid}";
-
-            App()->loadHelper('admin/htmleditor');
-            App()->loadHelper('surveytranslator');
-
-            // TODO: This is not an array, but a string "en"
-            $aBaseLanguage = $survey->language;
-
-            $aLanguages = $survey->allLanguages;
-
-            $grplangs = array_flip($aLanguages);
-
-            // Check out the intgrity of the language versions of this group
-            $egresult = QuestionGroupL10n::model()->findAllByAttributes(array('gid' => $gid));
-            foreach ($egresult as $esrow) {
-                $esrow = $esrow->attributes;
-
-                // Language Exists, BUT ITS NOT ON THE SURVEY ANYMORE
-                if (!in_array($esrow['language'], $aLanguages)) {
-                    QuestionGroupL10n::model()->deleteAllByAttributes(
-                        array('gid' => $gid, 'language' => $esrow['language'])
-                    );
-                } else {
-                    $grplangs[$esrow['language']] = 'exists';
-                }
-
-                if ($esrow['language'] == $aBaseLanguage) {
-                    $basesettings = $esrow;
-                }
-            }
-
-            // Create groups in missing languages
-            foreach ($grplangs as $key => $value) {
-                if ($value != 'exists') {
-                    $basesettings['language'] = $key;
-                    $groupLS = new QuestionGroupL10n;
-                    foreach ($basesettings as $k => $v) {
-                        // TODO: undefined variable $group
-                        $group->$k = $v;
-                    }
-                    $groupLS->save();
-                }
-            }
-            $first = true;
-            $oQuestionGroup = QuestionGroup::model()->findByAttributes(array('gid' => $gid));
-            foreach ($aLanguages as $sLanguage) {
-                $oResult = QuestionGroupL10n::model()->findByAttributes(array('gid' => $gid, 'language' => $sLanguage));
-                $aData['aGroupData'][$sLanguage] = array_merge($oResult->attributes, $oQuestionGroup->attributes);
-                $aTabTitles[$sLanguage] = getLanguageNameFromCode($sLanguage, false);
-                if ($first) {
-                    $aTabTitles[$sLanguage] .= ' ('.gT("Base language").')';
-                    $first = false;
-                }
-            }
-            $aData['oQuestionGroup'] = $oQuestionGroup;
-            $aData['sidemenu']['questiongroups'] = true;
-            $aData['questiongroupbar']['buttonspreview'] = true;
-            $aData['questiongroupbar']['savebutton']['form'] = true;
-            $aData['questiongroupbar']['saveandclosebutton']['form'] = true;
-            $aData['questiongroupbar']['closebutton']['url'] = 'admin/questiongroups/sa/view/surveyid/'.$surveyid.'/gid/'.$gid; // Close button
-
-            $aData['topBar']['sid'] = $iSurveyID;
-            $aData['topBar']['gid'] = $gid;
-            $aData['topBar']['showSaveButton'] = true;
-            $aData['action'] = $aData['display']['menu_bars']['gid_action'] = 'editgroup';
-            $aData['subaction'] = gT('Edit group');
-            $aData['surveyid'] = $surveyid;
-            $aData['gid'] = $gid;
-            $aData['tabtitles'] = $aTabTitles;
-            $aData['aBaseLanguage'] = $aBaseLanguage;
-
-            $aData['title_bar']['title'] = $survey->currentLanguageSettings->surveyls_title.":".$iSurveyID.")";
-
-            ///////////
-            // sidemenu
-            // TODO: Duplicated code Line (349 - 352)
-            $aData['sidemenu']['state'] = false;
-            $aData['sidemenu']['explorer']['state'] = true;
-            $aData['sidemenu']['explorer']['gid'] = (isset($gid)) ? $gid : false;
-            $aData['sidemenu']['explorer']['qid'] = false;
-
-            $this->_renderWrappedTemplate('survey/QuestionGroups', 'editGroup_view', $aData);
-        } else {
-            App()->user->setFlash('error', gT("Access denied"));
-            $this->getController()->redirect(App()->request->urlReferrer);
-        }
-    }
-
     /**
      * Reorder the questiongroups based on the new order in the adminsidepanel
      *
      * @param integer $surveyid
      *
-     * @return void
+     * @return false|null|string|string[]
      * @throws CException
      */
-    public function updateOrder($surveyid)
+    public function actionUpdateOrder($surveyid)
     {
         $oSurvey = Survey::model()->findByPk($surveyid);
         $success = true;
+        $grouparray  = [];
         if (!$oSurvey->isActive) {
             $grouparray = App()->request->getPost('grouparray', []);
             if (!empty($grouparray)) {
@@ -725,7 +633,7 @@ function ($oSubQuestion) use ($aQuestion, $success) {
 
             QuestionGroup::model()->cleanOrder($surveyid);
 
-            return App()->getController()->renderPartial(
+            return $this->renderPartial(
                 '/admin/super/_renderJson',
                 array(
                     'data' => [
@@ -737,7 +645,7 @@ function ($oSubQuestion) use ($aQuestion, $success) {
                 false
             );
         }
-        return App()->getController()->renderPartial(
+        return $this->renderPartial(
             '/admin/super/_renderJson',
             array(
                 'data' => [
@@ -752,110 +660,15 @@ function ($oSubQuestion) use ($aQuestion, $success) {
     }
 
     /**
-     * Reorder the questiongroups based on the new order in the adminsidepanel
-     *
-     * @param integer $surveyid ID of survey
-     *
-     * @return void
-     */
-    public function updateOrderWithQuestions($surveyid)
-    {
-        $grouparray = App()->request->getPost('grouparray', []);
-        foreach ($grouparray as $aQuestiongroup) {
-            $oQuestiongroups = QuestionGroup::model()->findAll(
-                "gid=:gid AND sid=:sid",
-                [':gid'=> $aQuestiongroup['gid'], ':sid'=> $surveyid]
-            );
-            array_map(function ($oQuestiongroup) use ($aQuestiongroup) {
-                $oQuestiongroup->group_order = $aQuestiongroup['group_order'];
-                $oQuestiongroup->save();
-            }, $oQuestiongroups);
-        }
-    }
-
-    /**
-     * Provides an interface for updating a group
-     *
-     * @access public
-     * @param int $gid
-     * @return void
-     */
-    public function update($gid)
-    {
-        $gid = (int) $gid;
-        $group = QuestionGroup::model()->findByAttributes(array('gid' => $gid));
-        $surveyid = $group->sid;
-        $survey = Survey::model()->findByPk($surveyid);
-
-        if (Permission::model()->hasSurveyPermission($surveyid, 'surveycontent', 'update')) {
-            App()->loadHelper('surveytranslator');
-
-            foreach ($survey->allLanguages as $grplang) {
-                if (isset($grplang) && $grplang != "") {
-                    $group_name = $_POST['group_name_'.$grplang];
-                    $group_description = $_POST['description_'.$grplang];
-
-                    $group_name = html_entity_decode($group_name, ENT_QUOTES, "UTF-8");
-                    $group_description = html_entity_decode($group_description, ENT_QUOTES, "UTF-8");
-
-                    // Fix bug with FCKEditor saving strange BR types
-                    $group_name = fixCKeditorText($group_name);
-                    $group_description = fixCKeditorText($group_description);
-
-                    $aData = array(
-                        'randomization_group' => $_POST['randomization_group'],
-                        'grelevance' => $_POST['grelevance'],
-                    );
-                    $group = QuestionGroup::model()->findByPk($gid);
-                    foreach ($aData as $k => $v) {
-                        $group->$k = $v;
-                    }
-
-                    // TODO: unused variable $ugresult
-                    $ugresult = $group->save();
-
-                    $aData = array(
-                        'group_name' => $group_name,
-                        'description' => $group_description,
-                    );
-                    $condition = array(
-                        'language' => $grplang,
-                        'gid' => $gid,
-                    );
-                    $oGroupLS = QuestionGroupL10n::model()->findByAttributes($condition);
-                    foreach ($aData as $k => $v) {
-                        $oGroupLS->$k = $v;
-                    }
-                    // TODO: unused variable $ugresult2
-                    $ugresult2 = $oGroupLS->save();
-                }
-            }
-
-            Yii::app()->setFlashMessage(gT("Question group successfully saved."));
-
-            if (App()->request->getPost('close-after-save') === 'true') {
-                $this->getController()->redirect(
-                    array('admin/questiongroups/sa/view/surveyid/'.$surveyid.'/gid/'.$gid)
-                );
-            }
-
-            $this->getController()->redirect(array('admin/questiongroups/sa/edit/surveyid/'.$surveyid.'/gid/'.$gid));
-        } else {
-            App()->user->setFlash('error', gT("Access denied"));
-            $this->getController()->redirect(App()->request->urlReferrer);
-        }
-    }
-
-    /**
-     * @todo document me.
+     * Returns the rendered question group topbar.
      *
      * @param integer $sid ID of survey
-     * @param null    $gid ID of group
+     * @param null |integer   $gid ID of group
      *
      * @return mixed
      * @throws CException
      */
-    public function getQuestionGroupTopBar($sid, $gid = null)
+    public function actionGetQuestionGroupTopBar($sid, $gid = null)
     {
         $oSurvey = Survey::model()->findByPk($sid);
         $oQuestionGroup = null;
@@ -872,8 +685,8 @@ public function getQuestionGroupTopBar($sid, $gid = null)
         $ownsSaveButton = true;
         $ownsSaveAndCloseButton = true;
 
-        return App()->getController()->renderPartial(
-            '/admin/survey/topbar/question_group_topbar',
+        return $this->renderPartial(
+            'question_group_topbar',
             array(
                 'oSurvey' => $oSurvey,
                 'oQuestionGroup' => $oQuestionGroup,
@@ -890,16 +703,18 @@ public function getQuestionGroupTopBar($sid, $gid = null)
         );
     }
 
+    /** ++++++++++++  the following functions should be moved to model or a service class ++++++++++++++++++++++++++ */
+
     /**
-     * @todo document me.
+     * Returns the QuestionGroup (existing one or new created one)
      *
-     * @param null $iQuestionGroupId ID of group
+     * @param int $iSurveyId
+     * @param int | null $iQuestionGroupId ID of group
      *
-     * @return array|mixed|QuestionGroup|null
+     * @return QuestionGroup
      */
-    private function _getQuestionGroupObject($iQuestionGroupId = null)
+    private function getQuestionGroupObject($iSurveyId, $iQuestionGroupId = null)
     {
-        $iSurveyId = App()->request->getParam('sid') ?? App()->request->getParam('surveyid');
         $oQuestionGroup =  QuestionGroup::model()->findByPk($iQuestionGroupId);
         if ($oQuestionGroup == null) {
             $oQuestionGroup = new QuestionGroup();
@@ -912,18 +727,18 @@ private function _getQuestionGroupObject($iQuestionGroupId = null)
     /**
      * Method to store and filter questionData for a new question
      *
-     * @param $aQuestionGroupData
+     * @param int $iSurveyId
+     * @param array $aQuestionGroupData
      *
      * @return QuestionGroup
      * @throws CException
      */
-    private function _newQuestionGroup($aQuestionGroupData = null)
+    private function newQuestionGroup($iSurveyId, $aQuestionGroupData = null)
     {
-        $iSurveyId = App()->request->getParam('sid') ?? App()->request->getParam('surveyid');
         $oSurvey = Survey::model()->findByPk($iSurveyId);
 
         $aQuestionGroupData = array_merge([
-                'sid' => $iSurveyId,
+            'sid' => $iSurveyId,
         ], $aQuestionGroupData);
         unset($aQuestionGroupData['gid']);
 
@@ -961,15 +776,15 @@ private function _newQuestionGroup($aQuestionGroupData = null)
     /**
      * Method to store and filter questionGroupData for editing a questionGroup
      *
-     * @param $oQuestionGroup
-     * @param $aQuestionGroupData
+     * @param QuestionGroup $oQuestionGroup
+     * @param array $aQuestionGroupData
+     *
+     * @return QuestionGroup
      *
-     * @return void
      * @throws CException
      */
-    private function _editQuestionGroup(&$oQuestionGroup, $aQuestionGroupData)
+    private function editQuestionGroup(&$oQuestionGroup, $aQuestionGroupData)
     {
-        $aOldQuestionGroupData = $oQuestionGroup->attributes;
         $oQuestionGroup->setAttributes($aQuestionGroupData, false);
         if ($oQuestionGroup == null) {
             throw new CException("Object update failed, input array malformed or invalid");
@@ -986,11 +801,13 @@ private function _editQuestionGroup(&$oQuestionGroup, $aQuestionGroupData)
     }
 
     /**
-     * @param $oQuestionGroup
-     * @param $dataSet
-     * @return bool
+     * Stores questiongroup languages.
+     *
+     * @param QuestionGroup $oQuestionGroup
+     * @param array $dataSet array with languages
+     * @return bool true if ALL languages could be safed, false otherwise
      */
-    private function _applyI10N(&$oQuestionGroup, $dataSet)
+    private function applyI10N(&$oQuestionGroup, $dataSet)
     {
         $storeValid = true;
 
@@ -1008,20 +825,4 @@ private function _applyI10N(&$oQuestionGroup, $dataSet)
         return $storeValid;
     }
 
-    /**
-     * Renders template(s) wrapped in header and footer
-     *
-     * @param string  $sAction      Current action, the folder to fetch views from
-     * @param array   $aViewUrls    View url(s)
-     * @param array   $aData        Data to be passed on. Optional.
-     * @param boolean $sRenderFile  Value of rendering file as JSON.
-     *
-     * @throws CHttpException
-     */
-    protected function _renderWrappedTemplate($sAction = 'survey/QuestionGroups', $aViewUrls = array(), $aData = array(), $sRenderFile = false)
-    {
-        $aData['topBar']['type'] = 'group';
-        $aData['topBar']['showSaveButton'] = true;
-        parent::_renderWrappedTemplate($sAction, $aViewUrls, $aData, $sRenderFile);
-    }
 }
