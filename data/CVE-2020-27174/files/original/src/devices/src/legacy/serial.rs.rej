--- /dev/null
+++ /dev/null
@@ -414,31 +346,4 @@ mod tests {
         // metric stays the same.
         assert_eq!(missed_writes_before, missed_writes_after - 1);
     }
-
-    #[test]
-    fn test_serial_avail_buffer_capacity() {
-        let mut serial = Serial::new_sink(EventFd::new(libc::EFD_NONBLOCK).unwrap(), None);
-
-        let bytes = vec![0u8; FIFO_SIZE];
-        serial.in_buffer.extend(bytes.clone());
-        assert_eq!(serial.avail_buffer_capacity(), 0);
-
-        let mut data = [0u8; 1];
-        for i in 0..FIFO_SIZE {
-            assert_eq!(serial.avail_buffer_capacity(), i);
-            serial.read(DATA as u64, &mut data);
-        }
-        assert_eq!(serial.avail_buffer_capacity(), FIFO_SIZE);
-    }
-
-    #[test]
-    #[should_panic]
-    fn test_serial_avail_buffer_capacity_overflow() {
-        let mut serial = Serial::new_sink(EventFd::new(libc::EFD_NONBLOCK).unwrap(), None);
-
-        let bytes = vec![0u8; FIFO_SIZE + 1];
-        serial.in_buffer.extend(bytes);
-        // Panic since serial device buffer size its greater than what is expected.
-        serial.avail_buffer_capacity();
-    }
 
