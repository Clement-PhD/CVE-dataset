@@ -4,6 +4,15 @@
  * Defines a small templater functionality for creating functions body.
  */
 
+function sanitizeString(str) {
+  if (typeof str !== 'string') {
+    return str;
+  }
+
+  const sanitzedStr = String.prototype.replace.call(str, /[^a-z0-9áéíóúñü .,_-]/gim, '');
+  return String.prototype.trim.call(sanitzedStr);
+}
+
 /**
  * @name template
  * @type function
@@ -21,7 +30,7 @@ function template(state, options) {
     tpl.lines.push(
       expression
         .replace(/%i/g, () => 'i')
-        .replace(/\$(\d)/g, (match, index) => `${args[index - 1]}`)
+        .replace(/\$(\d)/g, (match, index) => `${sanitizeString(args[index - 1])}`)
         .replace(/(%[sd])/g, () => {
           if (args.length) {
             last = args.shift();
@@ -45,7 +54,7 @@ function template(state, options) {
         path
           .replace(/\[i([0-9]*)\]/ig, '/items')
           .replace(/\['([^']+)'\]/ig, '/properties/$1')
-      }/${errorType}`;
+        }/${errorType}`;
 
       return `return {
         keyword: '${errorType}',