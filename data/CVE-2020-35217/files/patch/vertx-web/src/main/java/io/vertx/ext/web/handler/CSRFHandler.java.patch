@@ -20,16 +20,12 @@
 @VertxGen
 public interface CSRFHandler extends Handler<RoutingContext> {
 
-  String ERROR_MESSAGE = "Invalid or missing csrf token";
-
   String DEFAULT_COOKIE_NAME = "XSRF-TOKEN";
 
   String DEFAULT_COOKIE_PATH = "/";
 
   String DEFAULT_HEADER_NAME = "X-XSRF-TOKEN";
 
-  String DEFAULT_RESPONSE_BODY = null;
-
   /**
    * Instantiate a new CSRFHandlerImpl with a secret
    * <p>
@@ -43,6 +39,16 @@ static CSRFHandler create(Vertx vertx, String secret) {
     return new CSRFHandlerImpl(vertx, secret);
   }
 
+  /**
+   * Set the origin for this server. When this value is set, extra validation will occur. The request
+   * must match the origin server, port and protocol.
+   *
+   * @param origin the origin for this server e.g.: {@code https://www.foo.com}.
+   * @return fluent
+   */
+  @Fluent
+  CSRFHandler setOrigin(String origin);
+
   /**
    * Set the cookie name. By default XSRF-TOKEN is used as it is the expected name by AngularJS however other frameworks
    * might use other names.
@@ -62,6 +68,18 @@ static CSRFHandler create(Vertx vertx, String secret) {
   @Fluent
   CSRFHandler setCookiePath(String path);
 
+  /**
+   * Set the cookie {@code httpOnly} attribute. When setting to {@code false} the CSRF handler will behave in
+   * Double Submit Cookie mode. When set to {@code true} then it will operate in Cookie-to-header mode.
+   *
+   * For more information <a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie">https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie</a>
+   *
+   * @param httpOnly a new name for the header.
+   * @return fluent
+   */
+  @Fluent
+  CSRFHandler setCookieHttpOnly(boolean httpOnly);
+
   /**
    * Set the header name. By default X-XSRF-TOKEN is used as it is the expected name by AngularJS however other
    * frameworks might use other names.
@@ -81,16 +99,6 @@ static CSRFHandler create(Vertx vertx, String secret) {
   @Fluent
   CSRFHandler setNagHttps(boolean nag);
 
-  /**
-   * Set the body returned by the handler when the XSRF token is missing or invalid.
-   *
-   * @param responseBody the body of the response. If null, no response body will be returned.
-   * @return fluent
-   */
-  @Fluent
-  CSRFHandler setResponseBody(String responseBody);
-
-
   /**
    * Set the timeout for tokens generated by the handler, by default it uses the default from the session handler.
    *