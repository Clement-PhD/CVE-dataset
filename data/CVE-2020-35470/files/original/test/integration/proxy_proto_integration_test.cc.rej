--- /dev/null
+++ /dev/null
@@ -201,59 +181,4 @@ TEST_P(ProxyProtoIntegrationTest, ClusterProvided) {
   testRouterRequestAndResponseWithBody(1024, 512, false, false, &creator);
 }
 
-ProxyProtoTcpIntegrationTest::ProxyProtoTcpIntegrationTest()
-    : BaseIntegrationTest(GetParam(), ConfigHelper::tcpProxyConfig()) {
-  config_helper_.addConfigModifier(insertProxyProtocolFilterConfigModifier);
-  config_helper_.renameListener("tcp_proxy");
-}
-
-INSTANTIATE_TEST_SUITE_P(IpVersions, ProxyProtoTcpIntegrationTest,
-                         testing::ValuesIn(TestEnvironment::getIpVersionsForTest()),
-                         TestUtility::ipTestParamsToString);
-
-// This tests that the StreamInfo contains the correct addresses.
-TEST_P(ProxyProtoTcpIntegrationTest, AccessLog) {
-  std::string access_log_path = TestEnvironment::temporaryPath(
-      fmt::format("access_log{}.txt", version_ == Network::Address::IpVersion::v4 ? "v4" : "v6"));
-  config_helper_.addConfigModifier([&](envoy::config::bootstrap::v3::Bootstrap& bootstrap) -> void {
-    auto* listener = bootstrap.mutable_static_resources()->mutable_listeners(0);
-    auto* filter_chain = listener->mutable_filter_chains(0);
-    auto* config_blob = filter_chain->mutable_filters(0)->mutable_typed_config();
-
-    ASSERT_TRUE(
-        config_blob
-            ->Is<API_NO_BOOST(envoy::extensions::filters::network::tcp_proxy::v3::TcpProxy)>());
-    auto tcp_proxy_config = MessageUtil::anyConvert<API_NO_BOOST(
-        envoy::extensions::filters::network::tcp_proxy::v3::TcpProxy)>(*config_blob);
-
-    auto* access_log = tcp_proxy_config.add_access_log();
-    access_log->set_name("accesslog");
-    envoy::extensions::access_loggers::file::v3::FileAccessLog access_log_config;
-    access_log_config.set_path(access_log_path);
-    access_log_config.mutable_log_format()->set_text_format(
-        "remote=%DOWNSTREAM_REMOTE_ADDRESS% local=%DOWNSTREAM_LOCAL_ADDRESS%");
-    access_log->mutable_typed_config()->PackFrom(access_log_config);
-    config_blob->PackFrom(tcp_proxy_config);
-  });
-  initialize();
-
-  IntegrationTcpClientPtr tcp_client = makeTcpConnection(lookupPort("tcp_proxy"));
-  ASSERT_TRUE(tcp_client->write("PROXY TCP4 1.2.3.4 254.254.254.254 12345 1234\r\nhello", false));
-
-  FakeRawConnectionPtr fake_upstream_connection;
-  ASSERT_TRUE(fake_upstreams_[0]->waitForRawConnection(fake_upstream_connection));
-  ASSERT_TRUE(fake_upstream_connection->waitForData(5));
-  ASSERT_TRUE(fake_upstream_connection->close());
-  tcp_client->close();
-  ASSERT_TRUE(fake_upstream_connection->waitForDisconnect());
-
-  std::string log_result;
-  // Access logs only get flushed to disk periodically, so poll until the log is non-empty
-  do {
-    log_result = api_->fileSystem().fileReadToEnd(access_log_path);
-  } while (log_result.empty());
-
-  EXPECT_EQ(log_result, "remote=1.2.3.4:12345 local=254.254.254.254:1234");
-}
-
 
