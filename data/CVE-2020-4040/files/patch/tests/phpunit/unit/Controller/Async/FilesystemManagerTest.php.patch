@@ -25,9 +25,10 @@ class FilesystemManagerTest extends ControllerUnitTest
 {
     const FILESYSTEM = 'files';
 
-    const FILE_NAME = '__phpunit_test_file_delete_me';
+    const FILE_NAME = '__phpunit_test_file_delete_me.txt';
     const FILE_NAME_NOT_ALLOWED = '__phpunit_test_file_delete_me.exe';
-    const FILE_NAME_2 = '__phpunit_test_file_2_delete_me';
+    const FILE_NAME_NOT_ALLOWED_2 = '__phpunit_test_file_delete_me';
+    const FILE_NAME_2 = '__phpunit_test_file_2_delete_me.txt';
     const FOLDER_NAME = '__phpunit_test_folder_delete_me';
     const FOLDER_NAME_2 = '__phpunit_test_folder_2_delete_me';
 
@@ -153,6 +154,23 @@ public function testCreateFileInvalidExtension()
         $this->assertFalse($this->getService('filesystem')->has(self::FILESYSTEM . '://' . self::FILE_NAME_NOT_ALLOWED));
     }
 
+    public function testCreateFileInvalidExtension2()
+    {
+        $this->setRequest(Request::create('/async/file/create', 'POST', [
+            'namespace'  => self::FILESYSTEM,
+            'parentPath' => '',
+            'filename'   => self::FILE_NAME_NOT_ALLOWED_2,
+            'token'      => $this->token,
+        ]));
+        $response = $this->controller()->createFile($this->getRequest());
+
+        $this->assertInstanceOf(JsonResponse::class, $response);
+        $this->assertEquals(Response::HTTP_BAD_REQUEST, $response->getStatusCode());
+
+        // Test whether the new file is not saved
+        $this->assertFalse($this->getService('filesystem')->has(self::FILESYSTEM . '://' . self::FILE_NAME_NOT_ALLOWED));
+    }
+
     /**
      * Duplicating a file five times should create FILENAME_copy1-5.EXT. This should work for both regular filenames
      * and dotfiles.
@@ -255,7 +273,7 @@ public function testInvalidRename()
              * Object doesn't exist
              */
             $this->createObject($object, $data['old']);
-            $response = $this->renameObject($object, $data['old'] . '_nonexistent', $data['new']);
+            $response = $this->renameObject($object, $data['old'] . '_nonexistent.txt', $data['new']);
 
             $this->assertInstanceOf(JsonResponse::class, $response);
             $this->assertEquals(Response::HTTP_NOT_FOUND, $response->getStatusCode());