@@ -721,10 +721,12 @@ LineBufferTask::execute ()
 
                     int width = (_ifd->maxX - _ifd->minX + 1);
 
+                    ptrdiff_t base = reinterpret_cast<ptrdiff_t>(&_ifd->sampleCount[0][0]);
+                    base -= sizeof(unsigned int)*_ifd->minX;
+                    base -= sizeof(unsigned int)*static_cast<ptrdiff_t>(_ifd->minY) * static_cast<ptrdiff_t>(width);
+
                     copyIntoDeepFrameBuffer (readPtr, slice.base,
-                                             (char*) (&_ifd->sampleCount[0][0]
-                                                      - _ifd->minX
-                                                      - _ifd->minY * width),
+                                             reinterpret_cast<char*>(base),
                                              sizeof(unsigned int) * 1,
                                              sizeof(unsigned int) * width,
                                              y, _ifd->minX, _ifd->maxX,
@@ -1026,6 +1028,79 @@ DeepScanLineInputFile::DeepScanLineInputFile
 }
 
 
+
+DeepScanLineInputFile::DeepScanLineInputFile
+    (OPENEXR_IMF_INTERNAL_NAMESPACE::IStream &is, int numThreads)
+:
+     _data (new Data (numThreads))
+{
+    _data->_deleteStream = false;
+    _data->_streamData = nullptr;
+
+    try
+    {
+        readMagicNumberAndVersionField(is, _data->version);
+        //
+        // Backward compatibility to read multpart file.
+        // multiPartInitialize will create _streamData
+        if (isMultiPart(_data->version))
+        {
+            compatibilityInitialize(is);
+            return;
+        }
+    }
+    catch (IEX_NAMESPACE::BaseExc &e)
+    {
+        if (_data)       delete _data;
+
+        REPLACE_EXC (e, "Cannot read image file "
+                     "\"" << is.fileName() << "\". " << e.what());
+        throw;
+    }
+
+    //
+    // not multiPart - allocate stream data and intialise as normal
+    //
+    try
+    {
+        _data->_streamData = new InputStreamMutex();
+        _data->_streamData->is = &is;
+        _data->memoryMapped = is.isMemoryMapped();
+        _data->header.readFrom (*_data->_streamData->is, _data->version);
+        _data->header.sanityCheck (isTiled (_data->version));
+
+        initialize(_data->header);
+
+        readLineOffsets (*_data->_streamData->is,
+                         _data->lineOrder,
+                         _data->lineOffsets,
+                         _data->fileIsComplete);
+    }
+    catch (IEX_NAMESPACE::BaseExc &e)
+    {
+        if (_data && _data->_streamData)
+        {
+            delete _data->_streamData;
+        }
+        if (_data)       delete _data;
+
+        REPLACE_EXC (e, "Cannot read image file "
+                     "\"" << is.fileName() << "\". " << e.what());
+        throw;
+    }
+    catch (...)
+    {
+        if (_data && _data->_streamData)
+        {
+            delete _data->_streamData;
+        }
+        if (_data)       delete _data;
+
+        throw;
+    }
+}
+
+
 DeepScanLineInputFile::DeepScanLineInputFile
     (const Header &header,
      OPENEXR_IMF_INTERNAL_NAMESPACE::IStream *is,