@@ -6,15 +6,28 @@ import {
   TextEditorEdit,
   env,
   workspace,
+  ExtensionContext,
 } from 'vscode'
-import { CodeAction, TextDocumentIdentifier } from 'vscode-languageclient/node'
+import {
+  CodeAction,
+  LanguageClient,
+  TextDocumentIdentifier,
+  ServerOptions,
+  LanguageClientOptions,
+} from 'vscode-languageclient/node'
 import {
   denyListDarkColorThemes,
   denyListLightColorThemes,
 } from './denyListColorThemes'
 import { homedir } from 'os'
 import { readdirSync } from 'fs'
 import path from 'path'
+import {
+  BinaryStorage,
+  checkAndAskForBinaryExecution,
+  printBinaryCheckWarning,
+  PRISMA_ALLOWED_BINS_KEY,
+} from './binaryValidator'
 
 export function isDebugOrTestSession(): boolean {
   return env.sessionId === 'someValue.sessionId'
@@ -117,3 +130,39 @@ export function applySnippetWorkspaceEdit(): (
     }
   }
 }
+
+export function createLanguageServer(
+  serverOptions: ServerOptions,
+  clientOptions: LanguageClientOptions,
+): LanguageClient {
+  return new LanguageClient(
+    'prisma',
+    'Prisma Language Server',
+    serverOptions,
+    clientOptions,
+  )
+}
+export const restartClient = async (
+  context: ExtensionContext,
+  client: LanguageClient,
+  serverOptions: ServerOptions,
+  clientOptions: LanguageClientOptions,
+): Promise<LanguageClient> => {
+  client?.diagnostics?.dispose()
+  if (client) await client.stop()
+  // try to create a new client if options are passed
+  const allowed = await checkAndAskForBinaryExecution(
+    context,
+    workspace.getConfiguration('prisma').get('prismaFmtBinPath'),
+    context.globalState.get<BinaryStorage>(PRISMA_ALLOWED_BINS_KEY),
+  )
+  if (allowed) {
+    client = createLanguageServer(serverOptions, clientOptions)
+    context.subscriptions.push(client.start())
+    await client.onReady()
+    return client
+  } else {
+    await printBinaryCheckWarning()
+    return client
+  }
+}
