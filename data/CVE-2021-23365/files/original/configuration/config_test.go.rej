--- /dev/null
+++ /dev/null
@@ -34,60 +31,67 @@ func TestOverrideConfigWithEnvVars(t *testing.T) {
 		}
 		hostsStr += fmt.Sprintf("%s:%s", key, value)
 	}
-	is.NoErr(os.Setenv("TYK_IB_BACKEND_IDENTITYBACKENDSETTINGS_MAXIDLE", strconv.Itoa(maxIdle)))
-	is.NoErr(os.Setenv("TYK_IB_BACKEND_IDENTITYBACKENDSETTINGS_MAXACTIVE", strconv.Itoa(maxActive)))
-	is.NoErr(os.Setenv("TYK_IB_BACKEND_IDENTITYBACKENDSETTINGS_DATABASE", strconv.Itoa(database)))
-	is.NoErr(os.Setenv("TYK_IB_BACKEND_IDENTITYBACKENDSETTINGS_PASSWORD", password))
-	is.NoErr(os.Setenv("TYK_IB_BACKEND_IDENTITYBACKENDSETTINGS_ENABLECLUSTER", "true"))
-	is.NoErr(os.Setenv("TYK_IB_BACKEND_IDENTITYBACKENDSETTINGS_HOSTS", hostsStr))
+	_ = os.Setenv("TYK_IB_BACKEND_IDENTITYBACKENDSETTINGS_MAXIDLE", strconv.Itoa(maxIdle))
+	_ = os.Setenv("TYK_IB_BACKEND_IDENTITYBACKENDSETTINGS_MAXACTIVE", strconv.Itoa(maxActive))
+	_ = os.Setenv("TYK_IB_BACKEND_IDENTITYBACKENDSETTINGS_DATABASE", strconv.Itoa(database))
+	_ = os.Setenv("TYK_IB_BACKEND_IDENTITYBACKENDSETTINGS_PASSWORD", password)
+	_ = os.Setenv("TYK_IB_BACKEND_IDENTITYBACKENDSETTINGS_ENABLECLUSTER", "true")
+	_ = os.Setenv("TYK_IB_BACKEND_IDENTITYBACKENDSETTINGS_HOSTS", hostsStr)
 
 	// TykAPISettings.GatewayConfig
 	gwEndpoint := "http://dummyhost"
 	gwPort := "7890"
 	gwAdminSecret := "76543"
-	is.NoErr(os.Setenv("TYK_IB_TYKAPISETTINGS_GATEWAYCONFIG_ENDPOINT", gwEndpoint))
-	is.NoErr(os.Setenv("TYK_IB_TYKAPISETTINGS_GATEWAYCONFIG_PORT", gwPort))
-	is.NoErr(os.Setenv("TYK_IB_TYKAPISETTINGS_GATEWAYCONFIG_ADMINSECRET", gwAdminSecret))
+	_ = os.Setenv("TYK_IB_TYKAPISETTINGS_GATEWAYCONFIG_ENDPOINT", gwEndpoint)
+	_ = os.Setenv("TYK_IB_TYKAPISETTINGS_GATEWAYCONFIG_PORT", gwPort)
+	_ = os.Setenv("TYK_IB_TYKAPISETTINGS_GATEWAYCONFIG_ADMINSECRET", gwAdminSecret)
 
 	// TykAPISettings.DashboardConfig
 	dbEndpoint := "http://dummyhost2"
 	dbPort := "9876"
 	dbAdminSecret := "87654"
-	is.NoErr(os.Setenv("TYK_IB_TYKAPISETTINGS_DASHBOARDCONFIG_ENDPOINT", dbEndpoint))
-	is.NoErr(os.Setenv("TYK_IB_TYKAPISETTINGS_DASHBOARDCONFIG_PORT", dbPort))
-	is.NoErr(os.Setenv("TYK_IB_TYKAPISETTINGS_DASHBOARDCONFIG_ADMINSECRET", dbAdminSecret))
+	_ = os.Setenv("TYK_IB_TYKAPISETTINGS_DASHBOARDCONFIG_ENDPOINT", dbEndpoint)
+	_ = os.Setenv("TYK_IB_TYKAPISETTINGS_DASHBOARDCONFIG_PORT", dbPort)
+	_ = os.Setenv("TYK_IB_TYKAPISETTINGS_DASHBOARDCONFIG_ADMINSECRET", dbAdminSecret)
 
 	// HttpServerOptions
 	certFile := "./certs/server.pem"
 	keyFile := "./certs/key.pem"
-	is.NoErr(os.Setenv("TYK_IB_HTTPSERVEROPTIONS_USESSL", "true"))
-	is.NoErr(os.Setenv("TYK_IB_HTTPSERVEROPTIONS_CERTFILE", certFile))
-	is.NoErr(os.Setenv("TYK_IB_HTTPSERVEROPTIONS_KEYFILE", keyFile))
+	_ = os.Setenv("TYK_IB_HTTPSERVEROPTIONS_USESSL", "true")
+	_ = os.Setenv("TYK_IB_HTTPSERVEROPTIONS_CERTFILE", certFile)
+	_ = os.Setenv("TYK_IB_HTTPSERVEROPTIONS_KEYFILE", keyFile)
 
 	// Assertions
 	var conf Configuration
-	LoadConfig("testdata/tib_test.conf", &conf)
+	loadConfig("tib_sample.conf", &conf)
+
+	assert(t, secret, conf.Secret)
+	assert(t, port, conf.Port)
+	assert(t, profileDir, conf.ProfileDir)
+	assert(t, true, conf.SSLInsecureSkipVerify)
 
-	is.Equal(secret, conf.Secret)
-	is.Equal(port, conf.Port)
-	is.Equal(profileDir, conf.ProfileDir)
-	is.Equal(true, conf.SSLInsecureSkipVerify)
+	assert(t, maxIdle, conf.BackEnd.IdentityBackendSettings.MaxIdle)
+	assert(t, maxActive, conf.BackEnd.IdentityBackendSettings.MaxActive)
+	assert(t, database, conf.BackEnd.IdentityBackendSettings.Database)
+	assert(t, password, conf.BackEnd.IdentityBackendSettings.Password)
+	assert(t, true, conf.BackEnd.IdentityBackendSettings.EnableCluster)
+	assert(t, hosts, conf.BackEnd.IdentityBackendSettings.Hosts)
 
-	is.Equal(maxIdle, conf.BackEnd.IdentityBackendSettings.MaxIdle)
-	is.Equal(maxActive, conf.BackEnd.IdentityBackendSettings.MaxActive)
-	is.Equal(database, conf.BackEnd.IdentityBackendSettings.Database)
-	is.Equal(password, conf.BackEnd.IdentityBackendSettings.Password)
-	is.Equal(true, conf.BackEnd.IdentityBackendSettings.EnableCluster)
-	is.Equal(hosts, conf.BackEnd.IdentityBackendSettings.Hosts)
+	assert(t, gwEndpoint, conf.TykAPISettings.GatewayConfig.Endpoint)
+	assert(t, gwPort, conf.TykAPISettings.GatewayConfig.Port)
+	assert(t, gwAdminSecret, conf.TykAPISettings.GatewayConfig.AdminSecret)
+	assert(t, dbEndpoint, conf.TykAPISettings.DashboardConfig.Endpoint)
+	assert(t, dbPort, conf.TykAPISettings.DashboardConfig.Port)
+	assert(t, dbAdminSecret, conf.TykAPISettings.DashboardConfig.AdminSecret)
 
-	is.Equal(gwEndpoint, conf.TykAPISettings.GatewayConfig.Endpoint)
-	is.Equal(gwPort, conf.TykAPISettings.GatewayConfig.Port)
-	is.Equal(gwAdminSecret, conf.TykAPISettings.GatewayConfig.AdminSecret)
-	is.Equal(dbEndpoint, conf.TykAPISettings.DashboardConfig.Endpoint)
-	is.Equal(dbPort, conf.TykAPISettings.DashboardConfig.Port)
-	is.Equal(dbAdminSecret, conf.TykAPISettings.DashboardConfig.AdminSecret)
+	assert(t, true, conf.HttpServerOptions.UseSSL)
+	assert(t, certFile, conf.HttpServerOptions.CertFile)
+	assert(t, keyFile, conf.HttpServerOptions.KeyFile)
 
-	is.Equal(true, conf.HttpServerOptions.UseSSL)
-	is.Equal(certFile, conf.HttpServerOptions.CertFile)
-	is.Equal(keyFile, conf.HttpServerOptions.KeyFile)
+}
+
+func assert(t *testing.T, expected interface{}, actual interface{}) {
+	if !reflect.DeepEqual(expected, actual) {
+		t.Errorf("Expected %v, actual %v", expected, actual)
+	}
 
