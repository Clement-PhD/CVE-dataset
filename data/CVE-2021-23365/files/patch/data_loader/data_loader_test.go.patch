@@ -1,29 +1,30 @@
-package data_loader
+// +build test_mongo
+
+package data_loader_test
 
 import (
-	"github.com/TykTechnologies/tyk-identity-broker/configuration"
-	"reflect"
 	"testing"
-)
 
-func TestCreateDataMongoLoader(t *testing.T){
+	"github.com/TykTechnologies/tyk-identity-broker/configuration"
+	"github.com/TykTechnologies/tyk-identity-broker/data_loader"
+)
 
+func TestCreateDataMongoLoader(t *testing.T) {
 	conf := configuration.Configuration{
-		Storage:               &configuration.Storage{
-			StorageType:       configuration.MONGO,
-			MongoConf:         &configuration.MongoConf{
-				MongoURL:                   "mongodb://tyk-mongo:27017/tyk_tib",
+		Storage: &configuration.Storage{
+			StorageType: configuration.MONGO,
+			MongoConf: &configuration.MongoConf{
+				MongoURL: "mongodb://tyk-mongo:27017/tyk_tib",
 			},
 		},
 	}
-	dataLoader, err := CreateDataLoader(conf, nil)
 
+	dataLoader, err := data_loader.CreateDataLoader(conf, nil)
 	if err != nil {
-		t.Error("creating mongo data loader: "+err.Error())
+		t.Fatalf("creating Mongo data loader: %v", err)
 	}
 
-	loaderType := reflect.TypeOf(dataLoader)
-	if loaderType.String() != "*data_loader.MongoLoader"{
-		t.Error("type of data loader is not correct. Expected *data_loader.MongoLoader but get:"+loaderType.String())
+	if _, ok := dataLoader.(*data_loader.MongoLoader); !ok {
+		t.Fatalf("type of data loader is not correct; expected '*data_loader.MongoLoader' but got '%T'", dataLoader)
 	}
 }