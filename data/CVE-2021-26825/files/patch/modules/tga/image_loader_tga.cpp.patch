@@ -55,6 +55,10 @@ Error ImageLoaderTGA::decode_tga_rle(const uint8_t *p_compressed_buffer, size_t
 		compressed_pos += 1;
 		count = (c & 0x7f) + 1;
 
+		if (output_pos + count * p_pixel_size > output_pos) {
+			return ERR_PARSE_ERROR;
+		}
+
 		if (c & 0x80) {
 			for (size_t i = 0; i < p_pixel_size; i++) {
 				pixels_w.ptr()[i] = p_compressed_buffer[compressed_pos];
@@ -78,7 +82,7 @@ Error ImageLoaderTGA::decode_tga_rle(const uint8_t *p_compressed_buffer, size_t
 	return OK;
 }
 
-Error ImageLoaderTGA::convert_to_image(Ref<Image> p_image, const uint8_t *p_buffer, const tga_header_s &p_header, const uint8_t *p_palette, const bool p_is_monochrome) {
+Error ImageLoaderTGA::convert_to_image(Ref<Image> p_image, const uint8_t *p_buffer, const tga_header_s &p_header, const uint8_t *p_palette, const bool p_is_monochrome, size_t p_output_size) {
 
 #define TGA_PUT_PIXEL(r, g, b, a)             \
 	int image_data_ofs = ((y * width) + x);   \
@@ -130,6 +134,9 @@ Error ImageLoaderTGA::convert_to_image(Ref<Image> p_image, const uint8_t *p_buff
 		if (p_is_monochrome) {
 			while (y != y_end) {
 				while (x != x_end) {
+					if (i > p_output_size) {
+						return ERR_PARSE_ERROR;
+					}
 					uint8_t shade = p_buffer[i];
 
 					TGA_PUT_PIXEL(shade, shade, shade, 0xff)
@@ -143,6 +150,9 @@ Error ImageLoaderTGA::convert_to_image(Ref<Image> p_image, const uint8_t *p_buff
 		} else {
 			while (y != y_end) {
 				while (x != x_end) {
+					if (i > p_output_size) {
+						return ERR_PARSE_ERROR;
+					}
 					uint8_t index = p_buffer[i];
 					uint8_t r = 0x00;
 					uint8_t g = 0x00;
@@ -171,6 +181,10 @@ Error ImageLoaderTGA::convert_to_image(Ref<Image> p_image, const uint8_t *p_buff
 	} else if (p_header.pixel_depth == 24) {
 		while (y != y_end) {
 			while (x != x_end) {
+				if (i + 2 > p_output_size) {
+					return ERR_PARSE_ERROR;
+				}
+
 				uint8_t r = p_buffer[i + 2];
 				uint8_t g = p_buffer[i + 1];
 				uint8_t b = p_buffer[i + 0];
@@ -186,6 +200,10 @@ Error ImageLoaderTGA::convert_to_image(Ref<Image> p_image, const uint8_t *p_buff
 	} else if (p_header.pixel_depth == 32) {
 		while (y != y_end) {
 			while (x != x_end) {
+				if (i + 3 > p_output_size) {
+					return ERR_PARSE_ERROR;
+				}
+
 				uint8_t a = p_buffer[i + 3];
 				uint8_t r = p_buffer[i + 2];
 				uint8_t g = p_buffer[i + 1];
@@ -280,7 +298,7 @@ Error ImageLoaderTGA::load_image(Ref<Image> p_image, FileAccess *f, bool p_force
 		PoolVector<uint8_t>::Read src_image_r = src_image.read();
 
 		const size_t pixel_size = tga_header.pixel_depth >> 3;
-		const size_t buffer_size = (tga_header.image_width * tga_header.image_height) * pixel_size;
+		size_t buffer_size = (tga_header.image_width * tga_header.image_height) * pixel_size;
 
 		PoolVector<uint8_t> uncompressed_buffer;
 		uncompressed_buffer.resize(buffer_size);
@@ -299,11 +317,12 @@ Error ImageLoaderTGA::load_image(Ref<Image> p_image, FileAccess *f, bool p_force
 			}
 		} else {
 			buffer = src_image_r.ptr();
+			buffer_size = src_image_len;
 		};
 
 		if (err == OK) {
 			PoolVector<uint8_t>::Read palette_r = palette.read();
-			err = convert_to_image(p_image, buffer, tga_header, palette_r.ptr(), is_monochrome);
+			err = convert_to_image(p_image, buffer, tga_header, palette_r.ptr(), is_monochrome, buffer_size);
 		}
 	}
 