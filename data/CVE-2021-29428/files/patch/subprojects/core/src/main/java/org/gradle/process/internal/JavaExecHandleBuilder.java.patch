@@ -20,6 +20,7 @@
 import org.gradle.api.file.FileCollection;
 import org.gradle.api.internal.file.FileCollectionFactory;
 import org.gradle.api.internal.file.FileResolver;
+import org.gradle.api.internal.file.TemporaryFileProvider;
 import org.gradle.api.jvm.ModularitySpec;
 import org.gradle.api.logging.Logger;
 import org.gradle.api.logging.Logging;
@@ -58,6 +59,7 @@
 public class JavaExecHandleBuilder extends AbstractExecHandleBuilder implements JavaExecSpec, ProcessArgumentsSpec.HasExecutable {
     private static final Logger LOGGER = Logging.getLogger(JavaExecHandleBuilder.class);
     private final FileCollectionFactory fileCollectionFactory;
+    private final TemporaryFileProvider temporaryFileProvider;
     private final JavaModuleDetector javaModuleDetector;
     private final Property<String> mainModule;
     private final Property<String> mainClass;
@@ -66,9 +68,19 @@ public class JavaExecHandleBuilder extends AbstractExecHandleBuilder implements
     private final ProcessArgumentsSpec applicationArgsSpec = new ProcessArgumentsSpec(this);
     private final ModularitySpec modularity;
 
-    public JavaExecHandleBuilder(FileResolver fileResolver, FileCollectionFactory fileCollectionFactory, ObjectFactory objectFactory, Executor executor, BuildCancellationToken buildCancellationToken, @Nullable JavaModuleDetector javaModuleDetector, JavaForkOptions javaOptions) {
+    public JavaExecHandleBuilder(
+        FileResolver fileResolver,
+        FileCollectionFactory fileCollectionFactory,
+        ObjectFactory objectFactory,
+        Executor executor,
+        BuildCancellationToken buildCancellationToken,
+        TemporaryFileProvider temporaryFileProvider,
+        @Nullable JavaModuleDetector javaModuleDetector,
+        JavaForkOptions javaOptions
+    ) {
         super(fileResolver, executor, buildCancellationToken);
         this.fileCollectionFactory = fileCollectionFactory;
+        this.temporaryFileProvider = temporaryFileProvider;
         this.javaModuleDetector = javaModuleDetector;
         this.classpath = fileCollectionFactory.configurableFiles("classpath");
         this.mainModule = objectFactory.property(String.class);
@@ -385,7 +397,7 @@ protected List<String> getEffectiveArguments() {
     }
 
     private File writePathingJarFile(FileCollection classPath) throws IOException {
-        File pathingJarFile = File.createTempFile("gradle-javaexec-classpath", ".jar");
+        File pathingJarFile = temporaryFileProvider.createTemporaryFile("gradle-javaexec-classpath", ".jar");
         try (FileOutputStream fileOutputStream = new FileOutputStream(pathingJarFile);
              JarOutputStream jarOutputStream = new JarOutputStream(fileOutputStream, toManifest(classPath))) {
             jarOutputStream.putNextEntry(new ZipEntry("META-INF/"));