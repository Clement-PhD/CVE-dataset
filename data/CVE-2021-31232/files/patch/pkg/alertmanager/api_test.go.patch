@@ -14,6 +14,10 @@ import (
 	"github.com/prometheus/client_golang/prometheus"
 	"gopkg.in/yaml.v2"
 
+	"github.com/pkg/errors"
+	"github.com/prometheus/alertmanager/config"
+	commoncfg "github.com/prometheus/common/config"
+	"github.com/stretchr/testify/assert"
 	"github.com/thanos-io/thanos/pkg/objstore"
 
 	"github.com/cortexproject/cortex/pkg/util/flagext"
@@ -35,7 +39,7 @@ func TestAMConfigValidationAPI(t *testing.T) {
 		err      error
 	}{
 		{
-			name: "It is not a valid payload without receivers",
+			name: "Should return error if the alertmanager config contains no receivers",
 			cfg: `
 alertmanager_config: |
   route:
@@ -48,7 +52,7 @@ alertmanager_config: |
 			err: fmt.Errorf("error validating Alertmanager config: undefined receiver \"default-receiver\" used in route"),
 		},
 		{
-			name: "It is valid",
+			name: "Should pass if the alertmanager config is valid",
 			cfg: `
 alertmanager_config: |
   route:
@@ -62,9 +66,27 @@ alertmanager_config: |
 `,
 		},
 		{
-			name: "It is not valid with paths in the template",
+			name: "Should return error if the config is empty due to wrong indentation",
 			cfg: `
 alertmanager_config: |
+route:
+  receiver: 'default-receiver'
+  group_wait: 30s
+  group_interval: 5m
+  repeat_interval: 4h
+  group_by: [cluster, alertname]
+receivers:
+  - name: default-receiver
+template_files:
+  "good.tpl": "good-templ"
+  "not/very/good.tpl": "bad-template"
+`,
+			err: fmt.Errorf("error validating Alertmanager config: configuration provided is empty, if you'd like to remove your configuration please use the delete configuration endpoint"),
+		},
+		{
+			name: "Should return error if the alertmanager config is empty due to wrong key",
+			cfg: `
+XWRONGalertmanager_config: |
   route:
     receiver: 'default-receiver'
     group_wait: 30s
@@ -75,12 +97,11 @@ alertmanager_config: |
     - name: default-receiver
 template_files:
   "good.tpl": "good-templ"
-  "not/very/good.tpl": "bad-template"
 `,
-			err: fmt.Errorf("error validating Alertmanager config: unable to create template file 'not/very/good.tpl'"),
+			err: fmt.Errorf("error validating Alertmanager config: configuration provided is empty, if you'd like to remove your configuration please use the delete configuration endpoint"),
 		},
 		{
-			name: "It is not valid with .",
+			name: "Should return error if the external template file name contains an absolute path",
 			cfg: `
 alertmanager_config: |
   route:
@@ -92,33 +113,31 @@ alertmanager_config: |
   receivers:
     - name: default-receiver
 template_files:
-  "good.tpl": "good-templ"
-  ".": "bad-template"
+  "/absolute/filepath": "a simple template"
 `,
-			err: fmt.Errorf("error validating Alertmanager config: unable to create template file '.'"),
+			err: fmt.Errorf(`error validating Alertmanager config: invalid template name "/absolute/filepath": the template name cannot contain any path`),
 		},
 		{
-			name: "It is not valid if the config is empty due to wrong indendatation",
+			name: "Should return error if the external template file name contains a relative path",
 			cfg: `
 alertmanager_config: |
-route:
-  receiver: 'default-receiver'
-  group_wait: 30s
-  group_interval: 5m
-  repeat_interval: 4h
-  group_by: [cluster, alertname]
-receivers:
-  - name: default-receiver
+  route:
+    receiver: 'default-receiver'
+    group_wait: 30s
+    group_interval: 5m
+    repeat_interval: 4h
+    group_by: [cluster, alertname]
+  receivers:
+    - name: default-receiver
 template_files:
-  "good.tpl": "good-templ"
-  "not/very/good.tpl": "bad-template"
+  "../filepath": "a simple template"
 `,
-			err: fmt.Errorf("error validating Alertmanager config: configuration provided is empty, if you'd like to remove your configuration please use the delete configuration endpoint"),
+			err: fmt.Errorf(`error validating Alertmanager config: invalid template name "../filepath": the template name cannot contain any path`),
 		},
 		{
-			name: "It is not valid if the config is empty due to wrong key",
+			name: "Should return error if the external template file name is not a valid filename",
 			cfg: `
-XWRONGalertmanager_config: |
+alertmanager_config: |
   route:
     receiver: 'default-receiver'
     group_wait: 30s
@@ -129,9 +148,253 @@ XWRONGalertmanager_config: |
     - name: default-receiver
 template_files:
   "good.tpl": "good-templ"
-  "not/very/good.tpl": "bad-template"
+  ".": "bad-template"
 `,
-			err: fmt.Errorf("error validating Alertmanager config: configuration provided is empty, if you'd like to remove your configuration please use the delete configuration endpoint"),
+			err: fmt.Errorf("error validating Alertmanager config: unable to store template file '.'"),
+		},
+		{
+			name: "Should return error if the referenced template contains the root /",
+			cfg: `
+alertmanager_config: |
+  route:
+    receiver: 'default-receiver'
+    group_wait: 30s
+    group_interval: 5m
+    repeat_interval: 4h
+    group_by: [cluster, alertname]
+  receivers:
+    - name: default-receiver
+  templates:
+    - "/"
+`,
+			err: fmt.Errorf(`error validating Alertmanager config: invalid template name "/": the template name cannot contain any path`),
+		},
+		{
+			name: "Should return error if the referenced template contains the root with repeated separators ///",
+			cfg: `
+alertmanager_config: |
+  route:
+    receiver: 'default-receiver'
+    group_wait: 30s
+    group_interval: 5m
+    repeat_interval: 4h
+    group_by: [cluster, alertname]
+  receivers:
+    - name: default-receiver
+  templates:
+    - "///"
+`,
+			err: fmt.Errorf(`error validating Alertmanager config: invalid template name "///": the template name cannot contain any path`),
+		},
+		{
+			name: "Should return error if the referenced template contains an absolute path",
+			cfg: `
+alertmanager_config: |
+  route:
+    receiver: 'default-receiver'
+    group_wait: 30s
+    group_interval: 5m
+    repeat_interval: 4h
+    group_by: [cluster, alertname]
+  receivers:
+    - name: default-receiver
+  templates:
+    - "/absolute/filepath"
+`,
+			err: fmt.Errorf(`error validating Alertmanager config: invalid template name "/absolute/filepath": the template name cannot contain any path`),
+		},
+		{
+			name: "Should return error if the referenced template contains a relative path",
+			cfg: `
+alertmanager_config: |
+  route:
+    receiver: 'default-receiver'
+    group_wait: 30s
+    group_interval: 5m
+    repeat_interval: 4h
+    group_by: [cluster, alertname]
+  receivers:
+    - name: default-receiver
+  templates:
+    - "../filepath"
+`,
+			err: fmt.Errorf(`error validating Alertmanager config: invalid template name "../filepath": the template name cannot contain any path`),
+		},
+		{
+			name: "Should pass if the referenced template is valid filename",
+			cfg: `
+alertmanager_config: |
+  route:
+    receiver: 'default-receiver'
+    group_wait: 30s
+    group_interval: 5m
+    repeat_interval: 4h
+    group_by: [cluster, alertname]
+  receivers:
+    - name: default-receiver
+  templates:
+    - "something.tmpl"
+`,
+		},
+		{
+			name: "Should return error if global HTTP password_file is set",
+			cfg: `
+alertmanager_config: |
+  global:
+    http_config:
+      basic_auth:
+        password_file: /secrets
+
+  route:
+    receiver: 'default-receiver'
+  receivers:
+    - name: default-receiver
+`,
+			err: errors.Wrap(errPasswordFileNotAllowed, "error validating Alertmanager config"),
+		},
+		{
+			name: "Should return error if global HTTP bearer_token_file is set",
+			cfg: `
+alertmanager_config: |
+  global:
+    http_config:
+      bearer_token_file: /secrets
+
+  route:
+    receiver: 'default-receiver'
+  receivers:
+    - name: default-receiver
+`,
+			err: errors.Wrap(errPasswordFileNotAllowed, "error validating Alertmanager config"),
+		},
+		{
+			name: "Should return error if global HTTP credentials_file is set",
+			cfg: `
+alertmanager_config: |
+  global:
+    http_config:
+      authorization:
+        credentials_file: /secrets
+
+  route:
+    receiver: 'default-receiver'
+  receivers:
+    - name: default-receiver
+`,
+			err: errors.Wrap(errPasswordFileNotAllowed, "error validating Alertmanager config"),
+		},
+		{
+			name: "Should return error if receiver's HTTP password_file is set",
+			cfg: `
+alertmanager_config: |
+  receivers:
+    - name: default-receiver
+      webhook_configs:
+        - url: http://localhost
+          http_config:
+            basic_auth:
+              password_file: /secrets
+
+  route:
+    receiver: 'default-receiver'
+`,
+			err: errors.Wrap(errPasswordFileNotAllowed, "error validating Alertmanager config"),
+		},
+		{
+			name: "Should return error if receiver's HTTP bearer_token_file is set",
+			cfg: `
+alertmanager_config: |
+  receivers:
+    - name: default-receiver
+      webhook_configs:
+        - url: http://localhost
+          http_config:
+            bearer_token_file: /secrets
+
+  route:
+    receiver: 'default-receiver'
+`,
+			err: errors.Wrap(errPasswordFileNotAllowed, "error validating Alertmanager config"),
+		},
+		{
+			name: "Should return error if receiver's HTTP credentials_file is set",
+			cfg: `
+alertmanager_config: |
+  receivers:
+    - name: default-receiver
+      webhook_configs:
+        - url: http://localhost
+          http_config:
+            authorization:
+              credentials_file: /secrets
+
+  route:
+    receiver: 'default-receiver'
+`,
+			err: errors.Wrap(errPasswordFileNotAllowed, "error validating Alertmanager config"),
+		},
+		{
+			name: "Should return error if receiver's HTTP proxy_url is set",
+			cfg: `
+alertmanager_config: |
+  receivers:
+    - name: default-receiver
+      webhook_configs:
+        - url: http://localhost
+          http_config:
+            proxy_url: http://localhost
+
+  route:
+    receiver: 'default-receiver'
+`,
+			err: errors.Wrap(errProxyURLNotAllowed, "error validating Alertmanager config"),
+		},
+		{
+			name: "Should return error if global slack_api_url_file is set",
+			cfg: `
+alertmanager_config: |
+  global:
+    slack_api_url_file: /secrets
+
+  receivers:
+    - name: default-receiver
+      webhook_configs:
+        - url: http://localhost
+
+  route:
+    receiver: 'default-receiver'
+`,
+			err: errors.Wrap(errSlackAPIURLFileNotAllowed, "error validating Alertmanager config"),
+		},
+		{
+			name: "Should return error if Slack api_url_file is set",
+			cfg: `
+alertmanager_config: |
+  receivers:
+    - name: default-receiver
+      slack_configs:
+        - api_url_file: /secrets
+
+  route:
+    receiver: 'default-receiver'
+`,
+			err: errors.Wrap(errSlackAPIURLFileNotAllowed, "error validating Alertmanager config"),
+		},
+		{
+			name: "Should return error if VictorOps api_key_file is set",
+			cfg: `
+alertmanager_config: |
+  receivers:
+    - name: default-receiver
+      victorops_configs:
+        - api_key_file: /secrets
+          api_key: my-key
+          routing_key: test
+
+  route:
+    receiver: 'default-receiver'
+`,
+			err: errors.Wrap(errVictorOpsAPIKeyFileNotAllowed, "error validating Alertmanager config"),
 		},
 	}
 
@@ -157,7 +420,6 @@ template_files:
 				require.Equal(t, http.StatusBadRequest, resp.StatusCode)
 				require.Equal(t, tc.err.Error()+"\n", string(body))
 			}
-
 		})
 	}
 }
@@ -289,3 +551,103 @@ receivers:
 	require.NoError(t, err)
 	require.YAMLEq(t, string(old), string(body))
 }
+
+func TestValidateAlertmanagerConfig(t *testing.T) {
+	tests := map[string]struct {
+		input    interface{}
+		expected error
+	}{
+		"*HTTPClientConfig": {
+			input: &commoncfg.HTTPClientConfig{
+				BasicAuth: &commoncfg.BasicAuth{
+					PasswordFile: "/secrets",
+				},
+			},
+			expected: errPasswordFileNotAllowed,
+		},
+		"HTTPClientConfig": {
+			input: commoncfg.HTTPClientConfig{
+				BasicAuth: &commoncfg.BasicAuth{
+					PasswordFile: "/secrets",
+				},
+			},
+			expected: errPasswordFileNotAllowed,
+		},
+		"*TLSConfig": {
+			input: &commoncfg.TLSConfig{
+				CertFile: "/cert",
+			},
+			expected: errTLSFileNotAllowed,
+		},
+		"TLSConfig": {
+			input: commoncfg.TLSConfig{
+				CertFile: "/cert",
+			},
+			expected: errTLSFileNotAllowed,
+		},
+		"struct containing *HTTPClientConfig as direct child": {
+			input: config.GlobalConfig{
+				HTTPConfig: &commoncfg.HTTPClientConfig{
+					BasicAuth: &commoncfg.BasicAuth{
+						PasswordFile: "/secrets",
+					},
+				},
+			},
+			expected: errPasswordFileNotAllowed,
+		},
+		"struct containing *HTTPClientConfig as nested child": {
+			input: config.Config{
+				Global: &config.GlobalConfig{
+					HTTPConfig: &commoncfg.HTTPClientConfig{
+						BasicAuth: &commoncfg.BasicAuth{
+							PasswordFile: "/secrets",
+						},
+					},
+				},
+			},
+			expected: errPasswordFileNotAllowed,
+		},
+		"struct containing *HTTPClientConfig as nested child within a slice": {
+			input: config.Config{
+				Receivers: []*config.Receiver{{
+					Name: "test",
+					WebhookConfigs: []*config.WebhookConfig{{
+						HTTPConfig: &commoncfg.HTTPClientConfig{
+							BasicAuth: &commoncfg.BasicAuth{
+								PasswordFile: "/secrets",
+							},
+						},
+					}}},
+				},
+			},
+			expected: errPasswordFileNotAllowed,
+		},
+		"map containing *HTTPClientConfig": {
+			input: map[string]*commoncfg.HTTPClientConfig{
+				"test": {
+					BasicAuth: &commoncfg.BasicAuth{
+						PasswordFile: "/secrets",
+					},
+				},
+			},
+			expected: errPasswordFileNotAllowed,
+		},
+		"map containing TLSConfig as nested child": {
+			input: map[string][]config.EmailConfig{
+				"test": {{
+					TLSConfig: commoncfg.TLSConfig{
+						CAFile: "/file",
+					},
+				}},
+			},
+			expected: errTLSFileNotAllowed,
+		},
+	}
+
+	for testName, testData := range tests {
+		t.Run(testName, func(t *testing.T) {
+			err := validateAlertmanagerConfig(testData.input)
+			assert.ErrorIs(t, err, testData.expected)
+		})
+	}
+}
