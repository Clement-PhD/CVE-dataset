@@ -20,6 +20,7 @@
 import javax.servlet.WriteListener;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -227,8 +228,7 @@ private void setupRequestURI(String encodedContextPath, String servletPath,
 
     private void mockWebappResource(ClassLoader mockLoader, String pathInfo,
             URL resourceUrl) {
-        Mockito.when(
-                mockLoader.getResource(WEBAPP_RESOURCE_PREFIX + pathInfo))
+        Mockito.when(mockLoader.getResource(WEBAPP_RESOURCE_PREFIX + pathInfo))
                 .thenReturn(resourceUrl);
     }
 
@@ -499,16 +499,14 @@ public void contextAndServletPath_serveStaticFileResource()
     }
 
     @Test
-    public void ServletPath_serveStaticFileResource()
-            throws IOException {
+    public void ServletPath_serveStaticFileResource() throws IOException {
         String pathInfo = "/VAADIN/static/img/bg.jpg";
         setupRequestURI("", "/servlet", pathInfo);
         assertBundleBuildResource(pathInfo);
     }
 
     @Test
-    public void contextPath_serveStaticFileResource()
-            throws IOException {
+    public void contextPath_serveStaticFileResource() throws IOException {
         String pathInfo = "/VAADIN/static/img/bg.jpg";
         setupRequestURI("/context", "", pathInfo);
         assertBundleBuildResource(pathInfo);
@@ -527,9 +525,9 @@ public void assertBundleBuildResource(String pathInfo) throws IOException {
         ClassLoader mockLoader = Mockito.mock(ClassLoader.class);
         Mockito.when(servletService.getClassLoader()).thenReturn(mockLoader);
 
-        Mockito.when(mockLoader.getResource(WEBAPP_RESOURCE_PREFIX + pathInfo)).thenReturn(
-                createFileURLWithDataAndLength(WEBAPP_RESOURCE_PREFIX + pathInfo,
-                        fileData));
+        Mockito.when(mockLoader.getResource(WEBAPP_RESOURCE_PREFIX + pathInfo))
+                .thenReturn(createFileURLWithDataAndLength(
+                        WEBAPP_RESOURCE_PREFIX + pathInfo, fileData));
 
         mockStatsBundles(mockLoader);
         mockConfigurationPolyfills();
@@ -550,16 +548,18 @@ private void staticBuildResourceWithDirectoryChange_nothingServed(
         ClassLoader mockLoader = Mockito.mock(ClassLoader.class);
         Mockito.when(servletService.getClassLoader()).thenReturn(mockLoader);
 
-        Mockito.when(mockLoader.getResource(WEBAPP_RESOURCE_PREFIX + pathInfo)).thenReturn(
-                createFileURLWithDataAndLength(WEBAPP_RESOURCE_PREFIX + pathInfo,
-                        fileData));
+        Mockito.when(mockLoader.getResource(WEBAPP_RESOURCE_PREFIX + pathInfo))
+                .thenReturn(createFileURLWithDataAndLength(
+                        WEBAPP_RESOURCE_PREFIX + pathInfo, fileData));
 
         // have data available for /VAADIN/vaadin-bundle-1234.cache.js
-        Mockito.when(mockLoader
-                .getResource(WEBAPP_RESOURCE_PREFIX + pathInfo.replace("build/../", "")))
-                .thenReturn(createFileURLWithDataAndLength(
-                        WEBAPP_RESOURCE_PREFIX + pathInfo.replace("build/../", ""),
-                        fileData));
+        Mockito.when(mockLoader.getResource(
+                WEBAPP_RESOURCE_PREFIX + pathInfo.replace("build/../", "")))
+                .thenReturn(
+                        createFileURLWithDataAndLength(
+                                WEBAPP_RESOURCE_PREFIX
+                                        + pathInfo.replace("build/../", ""),
+                                fileData));
 
         mockStatsBundles(mockLoader);
         mockConfigurationPolyfills();
@@ -678,7 +678,7 @@ public void nonexistingStaticBuildResource_returnsNotFound()
 
     @Test
     public void staticManifestPathResource_isServed() throws IOException {
-        String pathInfo ="/sw.js";
+        String pathInfo = "/sw.js";
         setupRequestURI("", "", pathInfo);
         byte[] fileData = "function() {eval('foo');};"
                 .getBytes(StandardCharsets.UTF_8);
@@ -698,8 +698,9 @@ public void staticManifestPathResource_isServed() throws IOException {
     }
 
     @Test
-    public void staticManifestPathIndexHtmlResource_returnsNotFound() throws IOException {
-        String pathInfo ="/index.html";
+    public void staticManifestPathIndexHtmlResource_returnsNotFound()
+            throws IOException {
+        String pathInfo = "/index.html";
         setupRequestURI("", "", pathInfo);
         byte[] fileData = "function() {eval('foo');};"
                 .getBytes(StandardCharsets.UTF_8);
@@ -835,6 +836,17 @@ public void serveStaticResourceFromWebjarWithIncorrectPathAndFixingDisabled()
                 responseCode.get());
     }
 
+    @Test
+    public void getStaticResource_delegateToVaadinService()
+            throws MalformedURLException {
+        URL url = new URL("http://bar");
+        Mockito.when(servletService.getStaticResource("foo")).thenReturn(url);
+        URL result = fileServer.getStaticResource("foo");
+
+        Mockito.verify(servletService).getStaticResource("foo");
+        Assert.assertSame(url, result);
+    }
+
     private static class CapturingServletOutputStream
             extends ServletOutputStream {
         ByteArrayOutputStream baos = new ByteArrayOutputStream();