@@ -33,11 +33,11 @@
 import com.vaadin.flow.internal.BootstrapHandlerHelper;
 import com.vaadin.flow.internal.BrowserLiveReload;
 import com.vaadin.flow.internal.BrowserLiveReloadAccess;
+import com.vaadin.flow.internal.JsonUtils;
 import com.vaadin.flow.internal.UsageStatisticsExporter;
 import com.vaadin.flow.server.AppShellRegistry;
 import com.vaadin.flow.server.BootstrapHandler;
 import com.vaadin.flow.server.Constants;
-import com.vaadin.flow.server.HandlerHelper;
 import com.vaadin.flow.server.VaadinContext;
 import com.vaadin.flow.server.VaadinRequest;
 import com.vaadin.flow.server.VaadinResponse;
@@ -61,6 +61,14 @@
  */
 public class IndexHtmlRequestHandler extends JavaScriptBootstrapHandler {
 
+    private static final String CONTENT_ATTRIBUTE = "content";
+    private static final String NAME_ATTRIBUTE = "name";
+    private static final String SPRING_CSRF_HEADER_PROPERTY = "headerName";
+    private static final String SPRING_CSRF_TOKEN_PROPERTY = "token";
+    private static final String SPRING_CSRF_HEADER_NAME_ATTRIBUTE = "_csrf_header";
+    private static final String SPRING_CSRF_TOKEN_ATTRIBUTE = "_csrf";
+    private static final String META_TAG = "meta";
+
     @Override
     public boolean synchronizedHandleRequest(VaadinSession session,
             VaadinRequest request, VaadinResponse response) throws IOException {
@@ -178,6 +186,19 @@ private void addInitialFlow(JsonObject initialJson, Document indexDocument,
             if (csrfToken != null) {
                 initialJson.put(CSRF_TOKEN, csrfToken);
             }
+            Object springCsrfToken = request.getAttribute(SPRING_CSRF_TOKEN_ATTRIBUTE);
+            if (springCsrfToken != null) {
+                JsonObject springCsrfTokenJson = JsonUtils.beanToJson(springCsrfToken);
+                if (springCsrfTokenJson != null && springCsrfTokenJson.hasKey(SPRING_CSRF_TOKEN_PROPERTY)
+                        && springCsrfTokenJson.hasKey(SPRING_CSRF_HEADER_PROPERTY)) {
+                    String springCsrfTokenString = springCsrfTokenJson.getString(SPRING_CSRF_TOKEN_PROPERTY);
+                    String springCsrfTokenHeaderName = springCsrfTokenJson.getString(SPRING_CSRF_HEADER_PROPERTY);
+
+                    addMetaTagToHead(indexDocument.head(), SPRING_CSRF_TOKEN_ATTRIBUTE, springCsrfTokenString);
+                    addMetaTagToHead(indexDocument.head(), SPRING_CSRF_HEADER_NAME_ATTRIBUTE,
+                            springCsrfTokenHeaderName);
+                }
+            }
         }
 
         Element elm = new Element("script");
@@ -187,6 +208,13 @@ private void addInitialFlow(JsonObject initialJson, Document indexDocument,
         indexDocument.head().insertChildren(0, elm);
     }
 
+    private void addMetaTagToHead(Element head, String name, String value) {
+        Element meta = new Element(META_TAG);
+        meta.attr(NAME_ATTRIBUTE, name);
+        meta.attr(CONTENT_ATTRIBUTE, value);
+        head.insertChildren(0, meta);
+    }
+
     private void includeInitialUidl(JsonObject initialJson,
             VaadinSession session, VaadinRequest request,
             VaadinResponse response) {