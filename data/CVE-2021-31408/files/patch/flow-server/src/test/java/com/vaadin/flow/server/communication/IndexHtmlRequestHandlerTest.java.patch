@@ -22,14 +22,20 @@
 import java.io.IOException;
 import java.lang.reflect.Method;
 import java.nio.charset.StandardCharsets;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 import java.util.Optional;
+import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.stream.Collectors;
 
 import com.sun.net.httpserver.HttpServer;
 import org.jsoup.Jsoup;
 import org.jsoup.internal.StringUtil;
 import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.Node;
 import org.jsoup.select.Elements;
 import org.junit.After;
 import org.junit.Assert;
@@ -44,6 +50,7 @@
 import com.vaadin.flow.component.UI;
 import com.vaadin.flow.component.internal.JavaScriptBootstrapUI;
 import com.vaadin.flow.di.Lookup;
+import com.vaadin.flow.internal.JsonUtils;
 import com.vaadin.flow.internal.UsageStatistics;
 import com.vaadin.flow.server.AppShellRegistry;
 import com.vaadin.flow.server.BootstrapHandler;
@@ -64,6 +71,8 @@
 
 import elemental.json.Json;
 import elemental.json.JsonObject;
+import elemental.json.impl.JreJsonFactory;
+import elemental.json.impl.JreJsonObject;
 
 import static com.vaadin.flow.component.internal.JavaScriptBootstrapUI.SERVER_ROUTING;
 import static com.vaadin.flow.server.DevModeHandlerTest.createStubWebpackTcpListener;
@@ -400,6 +409,32 @@ public void should_include_token_in_dom_when_return_not_null_csrfToken_in_sessio
         Assert.assertEquals("", scripts.get(0).attr("initial"));
     }
 
+    @Test
+    public void should_include_spring_csrf_token_in_meta_tags_when_return_not_null_spring_csrf_in_request()
+            throws IOException {
+        VaadinRequest request = Mockito.spy(createVaadinRequest("/"));
+        String springTokenString = UUID.randomUUID().toString();
+        String springTokenHeaderName = "x-CSRF-TOKEN";
+        Map<String, String> csrfJsonMap = new HashMap<>();
+        csrfJsonMap.put("token", springTokenString);
+        csrfJsonMap.put("headerName", springTokenHeaderName);
+        Mockito.when(request.getAttribute("_csrf")).thenReturn(csrfJsonMap);
+        indexHtmlRequestHandler.synchronizedHandleRequest(session,
+                request, response);
+
+        String indexHtml = responseOutput
+                .toString(StandardCharsets.UTF_8.name());
+        Document document = Jsoup.parse(indexHtml);
+
+        Elements csrfMetaEelement = document.head().getElementsByAttributeValue("name", "_csrf");
+        Assert.assertEquals(1, csrfMetaEelement.size());
+        Assert.assertEquals(springTokenString, csrfMetaEelement.first().attr("content"));
+
+        Elements csrfHeaderMetaEelement = document.head().getElementsByAttributeValue("name", "_csrf_header");
+        Assert.assertEquals(1, csrfHeaderMetaEelement.size());
+        Assert.assertEquals(springTokenHeaderName, csrfHeaderMetaEelement.first().attr("content"));
+    }
+
     @Test
     public void should_not_include_token_in_dom_when_return_null_csrfToken_in_session()
             throws IOException {
@@ -417,6 +452,21 @@ public void should_not_include_token_in_dom_when_return_null_csrfToken_in_sessio
         Assert.assertEquals("", scripts.get(0).attr("initial"));
     }
 
+    @Test
+    public void should_not_include_spring_csrf_token_in_meta_tags_when_return_null_spring_csrf_in_request()
+            throws IOException {
+        VaadinRequest request = createVaadinRequest("/");
+        indexHtmlRequestHandler.synchronizedHandleRequest(session,
+                request, response);
+
+        String indexHtml = responseOutput
+                .toString(StandardCharsets.UTF_8.name());
+        Document document = Jsoup.parse(indexHtml);
+
+        Assert.assertEquals(0, document.head().getElementsByAttribute("_csrf").size());
+        Assert.assertEquals(0, document.head().getElementsByAttribute("_csrf_header").size());
+    }
+
     @Test
     public void should_not_include_token_in_dom_when_referer_is_service_worker()
             throws IOException {
@@ -432,6 +482,30 @@ public void should_not_include_token_in_dom_when_referer_is_service_worker()
         Assert.assertFalse(indexHtml.contains("csrfToken"));
     }
 
+    @Test
+    public void should_not_include_spring_token_in_dom_when_referer_is_service_worker()
+            throws IOException {
+        VaadinRequest request = Mockito.spy(createVaadinRequest("/"));
+        String springTokenString = UUID.randomUUID().toString();
+        String springTokenHeaderName = "x-CSRF-TOKEN";
+        Map<String, String> csrfJsonMap = new HashMap<>();
+        csrfJsonMap.put("token", springTokenString);
+        csrfJsonMap.put("headerName", springTokenHeaderName);
+        Object springCsrfToken = JsonUtils.mapToJson(csrfJsonMap);
+        Mockito.when(request.getAttribute("_csrf")).thenReturn(springCsrfToken);
+        VaadinServletRequest vaadinRequest = createVaadinRequest("/");
+        Mockito.when(((HttpServletRequest) vaadinRequest.getRequest())
+                .getHeader("referer"))
+                .thenReturn("http://somewhere.test/sw.js");
+        indexHtmlRequestHandler.synchronizedHandleRequest(session,
+                vaadinRequest, response);
+        String indexHtml = responseOutput
+                .toString(StandardCharsets.UTF_8.name());
+        Document document = Jsoup.parse(indexHtml);
+        Assert.assertEquals(0, document.head().getElementsByAttribute("_csrf").size());
+        Assert.assertEquals(0, document.head().getElementsByAttribute("_csrf_header").size());
+    }
+
     @Test
     public void should_use_client_routing_when_there_is_a_router_call()
             throws IOException {