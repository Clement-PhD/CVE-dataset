@@ -130,15 +130,11 @@ def test_generic_has(self, c):
         assert c.has("foo") in (False, 0)
         assert c.has("spam") in (False, 0)
 
-    def test_generic_get_bytes(self, c):
-        assert c.set("foo", b"bar")
-        assert c.get("foo") == b"bar"
-
 
 class TestSimpleCache(GenericCacheTests):
     @pytest.fixture
-    def make_cache(self):
-        return backends.SimpleCache
+    def make_cache(self, serialization_args):
+        return lambda: backends.SimpleCache(**serialization_args)
 
     def test_purge(self):
         c = backends.SimpleCache(threshold=2)
@@ -152,8 +148,10 @@ def test_purge(self):
 
 class TestFileSystemCache(GenericCacheTests):
     @pytest.fixture
-    def make_cache(self, tmpdir):
-        return lambda **kw: backends.FileSystemCache(cache_dir=str(tmpdir), **kw)
+    def make_cache(self, tmpdir, serialization_args):
+        return lambda **kw: backends.FileSystemCache(
+            cache_dir=str(tmpdir), **{**kw, **serialization_args}
+        )
 
     def test_filesystemcache_hashes(self, make_cache, hash_method):
         cache = make_cache(hash_method=hash_method)
@@ -242,7 +240,7 @@ def requirements(self, redis_server):
         pass
 
     @pytest.fixture(params=(None, False, True, gen_key_prefix))
-    def make_cache(self, request):
+    def make_cache(self, request, serialization_args):
         key_prefix = "werkzeug-test-case:"
         if request.param is None:
             host = "localhost"
@@ -254,7 +252,7 @@ def make_cache(self, request):
         else:
             host = redis.Redis()
 
-        c = backends.RedisCache(host=host, key_prefix=key_prefix)
+        c = backends.RedisCache(host=host, key_prefix=key_prefix, **serialization_args)
         yield lambda: c
         c.clear()
 
@@ -279,8 +277,8 @@ def requirements(self, memcache_server):
         pass
 
     @pytest.fixture
-    def make_cache(self):
-        c = backends.MemcachedCache(key_prefix="werkzeug-test-case:")
+    def make_cache(self, serialization_args):
+        c = backends.MemcachedCache(key_prefix="werkzeug-test-case:", **serialization_args)
         yield lambda: c
         c.clear()
 