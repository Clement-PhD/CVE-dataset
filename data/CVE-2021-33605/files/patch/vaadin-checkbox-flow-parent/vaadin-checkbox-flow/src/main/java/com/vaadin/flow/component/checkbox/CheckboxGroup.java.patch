@@ -442,12 +442,16 @@ protected boolean valueEquals(Set<T> value1, Set<T> value2) {
 
     @Override
     protected boolean hasValidValue() {
-        Set<T> selectedItems = presentationToModel(this,
+        // we need to compare old value with new value to see if any disabled
+        // items changed their value
+        Set<T> value = presentationToModel(this,
                 (JsonArray) getElement().getPropertyRaw(VALUE));
-        if (selectedItems == null || selectedItems.isEmpty()) {
-            return true;
-        }
-        return selectedItems.stream().allMatch(itemEnabledProvider);
+        Set<T> oldValue = getValue();
+
+        // disabled items cannot change their value
+        return getCheckboxItems().filter(CheckBoxItem::isDisabledBoolean)
+                .noneMatch(item -> oldValue.contains(item.getItem()) != value
+                        .contains(item.getItem()));
     }
 
     @SuppressWarnings("unchecked")
@@ -540,7 +544,7 @@ private void validateSelectionEnabledState(PropertyChangeEvent event) {
             } finally {
                 registerValidation();
             }
-            // Now make sure that the button is still in the correct state
+            // Now make sure that the checkbox is still in the correct state
             Set<T> value = presentationToModel(this,
                     (JsonArray) event.getValue());
             getCheckboxItems()