@@ -1,14 +1,14 @@
 package template
 
 import (
-	"encoding/json"
 	"fmt"
 	"io"
 	"os"
 
 	"github.com/antonmedv/expr"
 	"github.com/antonmedv/expr/file"
 	"github.com/antonmedv/expr/parser/lexer"
+	log "github.com/sirupsen/logrus"
 )
 
 func init() {
@@ -18,44 +18,27 @@ func init() {
 }
 
 func expressionReplace(w io.Writer, expression string, env map[string]interface{}, allowUnresolved bool) (int, error) {
-	// The template is JSON-marshaled. This JSON-unmarshals the expression to undo any character escapes.
-	var unmarshalledExpression string
-	err := json.Unmarshal([]byte(fmt.Sprintf(`"%s"`, expression)), &unmarshalledExpression)
-	if err != nil && allowUnresolved {
-		return w.Write([]byte(fmt.Sprintf("{{%s%s}}", kindExpression, expression)))
-	}
-	if err != nil {
-		return 0, fmt.Errorf("failed to unmarshall JSON expression: %w", err)
-	}
-
-	if _, ok := env["retries"]; !ok && hasRetries(unmarshalledExpression) && allowUnresolved {
+	log := log.WithField("ALEX", "true")
+	if _, ok := env["retries"]; !ok && hasRetries(expression) && allowUnresolved {
 		// this is to make sure expressions like `sprig.int(retries)` don't get resolved to 0 when `retries` don't exist in the env
 		// See https://github.com/argoproj/argo-workflows/issues/5388
+		log.WithField("allowUnresolved", allowUnresolved).WithField("hasRetries", true).Debug("expression template noop")
 		return w.Write([]byte(fmt.Sprintf("{{%s%s}}", kindExpression, expression)))
 	}
-	result, err := expr.Eval(unmarshalledExpression, env)
+	result, err := expr.Eval(expression, env)
 	if (err != nil || result == nil) && allowUnresolved { //  <nil> result is also un-resolved, and any error can be unresolved
+		log.WithError(err).WithField("result", result).WithField("allowUnresolved", allowUnresolved).Debug("expression template noop")
 		return w.Write([]byte(fmt.Sprintf("{{%s%s}}", kindExpression, expression)))
 	}
 	if err != nil {
+		log.WithError(err).Debug()
 		return 0, fmt.Errorf("failed to evaluate expression: %w", err)
 	}
 	if result == nil {
+		log.Debug("result is nil")
 		return 0, fmt.Errorf("failed to evaluate expression %q", expression)
 	}
-	resultMarshaled, err := json.Marshal(fmt.Sprintf("%v", result))
-	if (err != nil || resultMarshaled == nil) && allowUnresolved {
-		return w.Write([]byte(fmt.Sprintf("{{%s%s}}", kindExpression, expression)))
-	}
-	if err != nil {
-		return 0, fmt.Errorf("failed to marshal evaluated expression: %w", err)
-	}
-	if resultMarshaled == nil {
-		return 0, fmt.Errorf("failed to marshal evaluated marshaled expression %q", expression)
-	}
-	// Trim leading and trailing quotes. The value is being inserted into something that's already a string.
-	marshaledLength := len(resultMarshaled)
-	return w.Write(resultMarshaled[1 : marshaledLength-1])
+	return w.Write([]byte(fmt.Sprintf("%v", result)))
 }
 
 func envMap(replaceMap map[string]string) map[string]interface{} {