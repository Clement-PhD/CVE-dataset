@@ -1,62 +1,60 @@
 package template
 
 import (
-	"encoding/json"
 	"testing"
 
 	"github.com/stretchr/testify/assert"
 )
 
-func toJsonString(v interface{}) string {
-	jsonString, _ := json.Marshal(v)
-	return string(jsonString)
-}
-
 func Test_Replace(t *testing.T) {
-	t.Run("InvalidTemplate", func(t *testing.T) {
-		_, err := Replace(toJsonString("{{"), nil, false)
-		assert.Error(t, err)
-	})
 	t.Run("Simple", func(t *testing.T) {
 		t.Run("Valid", func(t *testing.T) {
-			r, err := Replace(toJsonString("{{foo}}"), map[string]string{"foo": "bar"}, false)
+			obj := "{{foo}}"
+			err := Replace(&obj, map[string]string{"foo": "bar"}, false)
 			assert.NoError(t, err)
-			assert.Equal(t, toJsonString("bar"), r)
+			assert.Equal(t, "bar", obj)
 		})
 		t.Run("Unresolved", func(t *testing.T) {
 			t.Run("Allowed", func(t *testing.T) {
-				_, err := Replace(toJsonString("{{foo}}"), nil, true)
+				obj := "{{foo}}"
+				err := Replace(&obj, nil, true)
 				assert.NoError(t, err)
 			})
 			t.Run("Disallowed", func(t *testing.T) {
-				_, err := Replace(toJsonString("{{foo}}"), nil, false)
+				obj := "{{foo}}"
+				err := Replace(&obj, nil, false)
 				assert.EqualError(t, err, "failed to resolve {{foo}}")
 			})
 		})
 	})
 	t.Run("Expression", func(t *testing.T) {
 		t.Run("Valid", func(t *testing.T) {
-			r, err := Replace(toJsonString("{{=foo}}"), map[string]string{"foo": "bar"}, false)
+			obj := "{{=foo}}"
+			err := Replace(&obj, map[string]string{"foo": "bar"}, false)
 			assert.NoError(t, err)
-			assert.Equal(t, toJsonString("bar"), r)
+			assert.Equal(t, "bar", obj)
 		})
 		t.Run("Unresolved", func(t *testing.T) {
 			t.Run("Allowed", func(t *testing.T) {
-				_, err := Replace(toJsonString("{{=foo}}"), nil, true)
+				obj := "{{=foo}}"
+				err := Replace(&obj, nil, true)
 				assert.NoError(t, err)
 			})
 			t.Run("AllowedRetries", func(t *testing.T) {
-				replaced, err := Replace(toJsonString("{{=sprig.int(retries)}}"), nil, true)
+				obj := "{{=sprig.int(retries)}}"
+				err := Replace(&obj, nil, true)
 				assert.NoError(t, err)
-				assert.Equal(t, replaced, toJsonString("{{=sprig.int(retries)}}"))
+				assert.Equal(t, obj, "{{=sprig.int(retries)}}")
 			})
 			t.Run("Disallowed", func(t *testing.T) {
-				_, err := Replace(toJsonString("{{=foo}}"), nil, false)
+				obj := "{{=foo}}"
+				err := Replace(&obj, nil, false)
 				assert.EqualError(t, err, "failed to evaluate expression \"foo\"")
 			})
 		})
 		t.Run("Error", func(t *testing.T) {
-			_, err := Replace(toJsonString("{{=!}}"), nil, false)
+			obj := "{{=!}}"
+			err := Replace(&obj, nil, false)
 			if assert.Error(t, err) {
 				assert.Contains(t, err.Error(), "failed to evaluate expression")
 			}
@@ -67,66 +65,66 @@ func Test_Replace(t *testing.T) {
 func TestNestedReplaceString(t *testing.T) {
 	replaceMap := map[string]string{"inputs.parameters.message": "hello world"}
 
-	test := toJsonString(`{{- with secret "{{inputs.parameters.message}}" -}}
+	test := `{{- with secret "{{inputs.parameters.message}}" -}}
     {{ .Data.data.gitcreds }}
-  {{- end }}`)
-	replacement, err := Replace(test, replaceMap, true)
+  {{- end }}`
+	err := Replace(&test, replaceMap, true)
 	if assert.NoError(t, err) {
-		assert.Equal(t, toJsonString("{{- with secret \"hello world\" -}}\n    {{ .Data.data.gitcreds }}\n  {{- end }}"), replacement)
+		assert.Equal(t, "{{- with secret \"hello world\" -}}\n    {{ .Data.data.gitcreds }}\n  {{- end }}", test)
 	}
 
-	test = toJsonString(`{{- with {{ secret "{{inputs.parameters.message}}" -}}
+	test = `{{- with {{ secret "{{inputs.parameters.message}}" -}}
     {{ .Data.data.gitcreds }}
-  {{- end }}`)
+  {{- end }}`
 
-	replacement, err = Replace(test, replaceMap, true)
+	err = Replace(&test, replaceMap, true)
 	if assert.NoError(t, err) {
-		assert.Equal(t, toJsonString("{{- with {{ secret \"hello world\" -}}\n    {{ .Data.data.gitcreds }}\n  {{- end }}"), replacement)
+		assert.Equal(t, "{{- with {{ secret \"hello world\" -}}\n    {{ .Data.data.gitcreds }}\n  {{- end }}", test)
 	}
 
-	test = toJsonString(`{{- with {{ secret "{{inputs.parameters.message}}" -}} }}
+	test = `{{- with {{ secret "{{inputs.parameters.message}}" -}} }}
     {{ .Data.data.gitcreds }}
-  {{- end }}`)
+  {{- end }}`
 
-	replacement, err = Replace(test, replaceMap, true)
+	err = Replace(&test, replaceMap, true)
 	if assert.NoError(t, err) {
-		assert.Equal(t, toJsonString("{{- with {{ secret \"hello world\" -}} }}\n    {{ .Data.data.gitcreds }}\n  {{- end }}"), replacement)
+		assert.Equal(t, "{{- with {{ secret \"hello world\" -}} }}\n    {{ .Data.data.gitcreds }}\n  {{- end }}", test)
 	}
 
-	test = toJsonString(`{{- with secret "{{inputs.parameters.message}}" -}} }}
+	test = `{{- with secret "{{inputs.parameters.message}}" -}} }}
     {{ .Data.data.gitcreds }}
-  {{- end }}`)
+  {{- end }}`
 
-	replacement, err = Replace(test, replaceMap, true)
+	err = Replace(&test, replaceMap, true)
 	if assert.NoError(t, err) {
-		assert.Equal(t, toJsonString("{{- with secret \"hello world\" -}} }}\n    {{ .Data.data.gitcreds }}\n  {{- end }}"), replacement)
+		assert.Equal(t, "{{- with secret \"hello world\" -}} }}\n    {{ .Data.data.gitcreds }}\n  {{- end }}", test)
 	}
 
-	test = toJsonString(`{{- with {{ {{ }} secret "{{inputs.parameters.message}}" -}} }}
+	test = `{{- with {{ {{ }} secret "{{inputs.parameters.message}}" -}} }}
     {{ .Data.data.gitcreds }}
-  {{- end }}`)
+  {{- end }}`
 
-	replacement, err = Replace(test, replaceMap, true)
+	err = Replace(&test, replaceMap, true)
 	if assert.NoError(t, err) {
-		assert.Equal(t, toJsonString("{{- with {{ {{ }} secret \"hello world\" -}} }}\n    {{ .Data.data.gitcreds }}\n  {{- end }}"), replacement)
+		assert.Equal(t, "{{- with {{ {{ }} secret \"hello world\" -}} }}\n    {{ .Data.data.gitcreds }}\n  {{- end }}", test)
 	}
 
-	test = toJsonString(`{{- with {{ {{ }} secret "{{does-not-exist}}" -}} }}
+	test = `{{- with {{ {{ }} secret "{{does-not-exist}}" -}} }}
     {{ .Data.data.gitcreds }}
-  {{- end }}`)
+  {{- end }}`
 
-	replacement, err = Replace(test, replaceMap, true)
+	err = Replace(&test, replaceMap, true)
 	if assert.NoError(t, err) {
-		assert.Equal(t, test, replacement)
+		assert.Equal(t, test, test)
 	}
 }
 
 func TestReplaceStringWithWhiteSpace(t *testing.T) {
 	replaceMap := map[string]string{"inputs.parameters.message": "hello world"}
 
-	test := toJsonString(`{{ inputs.parameters.message }}`)
-	replacement, err := Replace(test, replaceMap, true)
+	test := `{{ inputs.parameters.message }}`
+	err := Replace(&test, replaceMap, true)
 	if assert.NoError(t, err) {
-		assert.Equal(t, toJsonString("hello world"), replacement)
+		assert.Equal(t, "hello world", test)
 	}
 }