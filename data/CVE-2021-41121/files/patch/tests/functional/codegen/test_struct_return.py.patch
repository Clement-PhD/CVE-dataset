@@ -5,33 +5,29 @@ def test_nested_tuple(get_contract):
     code = """
 struct Animal:
     location: address
-    fur: uint256
+    fur: String[32]
 
 struct Human:
     location: address
-    height: uint256
+    animal: Animal
 
 @external
-def return_nested_tuple() -> (Animal, Human):
-    animal: Animal = Animal({
-        location: 0x1234567890123456789012345678901234567890,
-        fur: 123
-    })
-    human: Human = Human({
-        location: 0x1234567890123456789012345678900000000000,
-        height: 456
-    })
+def modify_nested_tuple(_human: Human) -> Human:
+    human: Human = _human
 
     # do stuff, edit the structs
-    animal.fur += 1
-    human.height += 1
+    # (13 is the length of the result)
+    human.animal.fur = slice(concat(human.animal.fur, " is great"), 0, 13)
 
-    return animal, human
+    return human
     """
     c = get_contract(code)
     addr1 = "0x1234567890123456789012345678901234567890"
     addr2 = "0x1234567890123456789012345678900000000000"
-    assert c.return_nested_tuple() == [(addr1, 124), (addr2, 457)]
+    # assert c.modify_nested_tuple([addr1, 123], [addr2, 456]) == [[addr1, 124], [addr2, 457]]
+    assert c.modify_nested_tuple(
+        {"location": addr1, "animal": {"location": addr2, "fur": "wool"}}
+    ) == (addr1, (addr2, "wool is great"),)
 
 
 @pytest.mark.parametrize("string", ["a", "abc", "abcde", "potato"])
@@ -61,4 +57,4 @@ def test_values(a: address) -> Person:
     """
 
     c2 = get_contract(code)
-    assert c2.test_values(c1.address) == [string, 42]
+    assert c2.test_values(c1.address) == (string, 42)
