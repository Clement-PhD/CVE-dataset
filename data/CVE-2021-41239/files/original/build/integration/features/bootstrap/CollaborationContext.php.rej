--- /dev/null
+++ /dev/null
@@ -70,94 +69,4 @@ protected function resetAppConfigs(): void {
 		$this->deleteServerConfig('core', 'shareapi_restrict_user_enumeration_full_match');
 		$this->deleteServerConfig('core', 'shareapi_only_share_with_group_members');
 	}
-
-	/**
-	 * @Given /^user "([^"]*)" has status "([^"]*)"$/
-	 * @param string $user
-	 * @param string $status
-	 */
-	public function assureUserHasStatus($user, $status) {
-		$fullUrl = $this->baseUrl . "v{$this->apiVersion}.php/apps/user_status/api/v1/user_status/status";
-		$client = new Client();
-		$options = [
-			'headers' => [
-				'OCS-APIREQUEST' => 'true',
-			],
-		];
-		if ($user === 'admin') {
-			$options['auth'] = $this->adminUser;
-		} else {
-			$options['auth'] = [$user, $this->regularUser];
-		}
-
-		$options['form_params'] = [
-			'statusType' => $status
-		];
-
-		$this->response = $client->put($fullUrl, $options);
-		$this->theHTTPStatusCodeShouldBe(200);
-
-		$fullUrl = $this->baseUrl . "v{$this->apiVersion}.php/apps/user_status/api/v1/user_status";
-		unset($options['form_params']);
-		$this->response = $client->get($fullUrl, $options);
-		$this->theHTTPStatusCodeShouldBe(200);
-
-		$returnedStatus = json_decode(json_encode(simplexml_load_string($this->response->getBody()->getContents())->data), true)['status'];
-		Assert::assertEquals($status, $returnedStatus);
-	}
-
-	/**
-	 * @param string $user
-	 * @return null|array
-	 */
-	public function getStatusList(string $user): ?array {
-		$fullUrl = $this->baseUrl . "v{$this->apiVersion}.php/apps/user_status/api/v1/statuses";
-		$client = new Client();
-		$options = [
-			'headers' => [
-				'OCS-APIREQUEST' => 'true',
-			],
-		];
-		if ($user === 'admin') {
-			$options['auth'] = $this->adminUser;
-		} else {
-			$options['auth'] = [$user, $this->regularUser];
-		}
-
-		$this->response = $client->get($fullUrl, $options);
-		$this->theHTTPStatusCodeShouldBe(200);
-
-		$contents = $this->response->getBody()->getContents();
-		return json_decode(json_encode(simplexml_load_string($contents)->data), true);
-	}
-
-	/**
-	 * @Given /^user statuses for "([^"]*)" list "([^"]*)" with status "([^"]*)"$/
-	 * @param string $user
-	 * @param string $statusUser
-	 * @param string $status
-	 */
-	public function assertStatusesList(string $user, string $statusUser, string $status): void {
-		$statusList = $this->getStatusList($user);
-		Assert::assertArrayHasKey('element', $statusList, 'Returned status list empty or broken');
-		if (array_key_exists('userId', $statusList['element'])) {
-			// If only one user has a status set, the API returns their status directly
-			Assert::assertArrayHasKey('status', $statusList['element'], 'Returned status list empty or broken');
-			$filteredStatusList = [ $statusList['element']['userId'] => $statusList['element']['status'] ];
-		} else {
-			// If more than one user have their status set, the API returns an array of their statuses
-			$filteredStatusList = array_column($statusList['element'], 'status', 'userId');
-		}
-		Assert::assertArrayHasKey($statusUser, $filteredStatusList, 'User not listed in statuses: ' . $statusUser);
-		Assert::assertEquals($status, $filteredStatusList[$statusUser]);
-	}
-
-	/**
-	 * @Given /^user statuses for "([^"]*)" are empty$/
-	 * @param string $user
-	 */
-	public function assertStatusesEmpty(string $user): void {
-		$statusList = $this->getStatusList($user);
-		Assert::assertEmpty($statusList);
-	}
 
