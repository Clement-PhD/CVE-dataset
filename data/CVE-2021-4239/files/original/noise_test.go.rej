--- /dev/null
+++ /dev/null
@@ -563,49 +556,31 @@ func (NoiseSuite) TestRekey(c *C) {
 	csR0.Rekey()
 
 	clientMessage = []byte("hello again")
-	msg, err = csI0.Encrypt(nil, nil, clientMessage)
-	c.Assert(err, IsNil)
+	msg = csI0.Encrypt(nil, nil, clientMessage)
 	res, err = csR0.Decrypt(nil, nil, msg)
 	c.Assert(err, IsNil)
 	c.Assert(string(clientMessage), Equals, string(res))
 
 	serverMessage := []byte("bye")
-	msg, err = csR1.Encrypt(nil, nil, serverMessage)
-	c.Assert(err, IsNil)
+	msg = csR1.Encrypt(nil, nil, serverMessage)
 	res, err = csI1.Decrypt(nil, nil, msg)
 	c.Assert(err, IsNil)
 	c.Assert(string(serverMessage), Equals, string(res))
 
-	preNonce := csR1.Nonce()
-
 	csR1.Rekey()
 	csI1.Rekey()
 
-	postNonce := csR1.Nonce()
-	c.Assert(preNonce, Equals, postNonce)
-
 	serverMessage = []byte("bye bye")
-	msg, err = csR1.Encrypt(nil, nil, serverMessage)
-	c.Assert(err, IsNil)
+	msg = csR1.Encrypt(nil, nil, serverMessage)
 	res, err = csI1.Decrypt(nil, nil, msg)
 	c.Assert(err, IsNil)
 	c.Assert(string(serverMessage), Equals, string(res))
 
 	// only rekey one side, test for failure
 	csR1.Rekey()
 	serverMessage = []byte("bye again")
-	msg, err = csR1.Encrypt(nil, nil, serverMessage)
-	c.Assert(err, IsNil)
+	msg = csR1.Encrypt(nil, nil, serverMessage)
 	res, err = csI1.Decrypt(nil, nil, msg)
 	c.Assert(err, NotNil)
 	c.Assert(string(serverMessage), Not(Equals), string(res))
-
-	// check nonce overflow handling
-	csI1.n = math.MaxUint64
-	msg, err = csI1.Encrypt(nil, nil, nil)
-	c.Assert(err, Equals, ErrMaxNonce)
-	c.Assert(msg, IsNil)
-	msg, err = csI1.Decrypt(nil, nil, nil)
-	c.Assert(err, Equals, ErrMaxNonce)
-	c.Assert(msg, IsNil)
 
