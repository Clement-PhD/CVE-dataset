@@ -78,6 +78,7 @@ export default class Router {
   dynamicRoutes: DynamicRoutes
   useFileSystemPublicRoutes: boolean
   locales: string[]
+  seenRequests: Set<any>
 
   constructor({
     basePath = '',
@@ -123,6 +124,7 @@ export default class Router {
     this.dynamicRoutes = dynamicRoutes
     this.useFileSystemPublicRoutes = useFileSystemPublicRoutes
     this.locales = locales
+    this.seenRequests = new Set()
   }
 
   setDynamicRoutes(routes: DynamicRoutes = []) {
@@ -138,6 +140,13 @@ export default class Router {
     res: BaseNextResponse,
     parsedUrl: NextUrlWithParsedQuery
   ): Promise<boolean> {
+    if (this.seenRequests.has(req)) {
+      throw new Error(
+        `Invariant: request has already been processed: ${req.url}, this is an internal error please open an issue.`
+      )
+    }
+    this.seenRequests.add(req)
+
     // memoize page check calls so we don't duplicate checks for pages
     const pageChecks: { [name: string]: Promise<boolean> } = {}
     const memoizedPageChecker = async (p: string): Promise<boolean> => {
@@ -360,6 +369,7 @@ export default class Router {
           ) {
             if (requireBasePath) {
               // consider this a non-match so the 404 renders
+              this.seenRequests.delete(req)
               return false
             }
             // page checker occurs before rewrites so we need to continue
@@ -374,6 +384,7 @@ export default class Router {
 
         // The response was handled
         if (result.finished) {
+          this.seenRequests.delete(req)
           return true
         }
 
@@ -397,11 +408,13 @@ export default class Router {
         // check filesystem
         if (testRoute.check === true) {
           if (await applyCheckTrue(parsedUrlUpdated)) {
+            this.seenRequests.delete(req)
             return true
           }
         }
       }
     }
+    this.seenRequests.delete(req)
     return false
   }
 }