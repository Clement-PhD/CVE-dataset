--- /dev/null
+++ /dev/null
@@ -2,59 +2,60 @@ package main
 
 import (
 	"context"
-	"flag"
 	"log"
+	"net"
 	"os"
 	"os/signal"
+	"strconv"
 	"syscall"
 
 	"github.com/johannesboyne/gofakes3"
 	"github.com/johannesboyne/gofakes3/backend/s3mem"
-	"github.com/weaveworks/weave-gitops/pkg/http"
+	"net/http/httptest"
 )
 
 func main() {
 	ctx, cancel := signal.NotifyContext(
 		context.Background(),
 		syscall.SIGINT,
-		syscall.SIGTERM)
+		syscall.SIGTERM,
+		syscall.SIGKILL)
 	defer cancel()
 
 	logger := log.New(os.Stdout, "", 0)
 	backend := s3mem.New()
 	s3 := gofakes3.New(backend,
 		gofakes3.WithAutoBucket(true),
 		gofakes3.WithLogger(gofakes3.StdLog(logger, gofakes3.LogErr, gofakes3.LogWarn, gofakes3.LogInfo)))
-	s3Server := s3.Server()
 
-	var (
-		httpPort, httpsPort int
-		certFile, keyFile   string
-	)
+	port := "9000"
+	// check args
+	if len(os.Args) > 1 {
+		port = os.Args[1]
+		// part string to integer
+		_, err := strconv.Atoi(port)
+		if err != nil {
+			log.Fatalf("Invalid port number: %s", port)
+		}
+	}
 
-	flag.IntVar(&httpPort, "http-port", 9000, "TCP port to listen on for HTTP connections")
-	flag.IntVar(&httpsPort, "https-port", 9443, "TCP port to listen on for HTTPS connections")
-	flag.StringVar(&certFile, "cert-file", "", "Path to the HTTPS server certificate file")
-	flag.StringVar(&keyFile, "key-file", "", "Path to the HTTPS server certificate key file")
-	flag.Parse()
+	// create a listener with the desired port.
+	listener, err := net.Listen("tcp", ":"+port)
+	if err != nil {
+		log.Fatal(err)
+	}
 
-	if certFile == "" {
-		logger.Fatalf("please specify the path to the HTTPS server certificate file")
+	ts := httptest.NewUnstartedServer(s3.Server())
+	if err := ts.Listener.Close(); err != nil {
+		log.Fatal(err)
 	}
 
-	if keyFile == "" {
-		logger.Fatalf("please specify the path to the HTTPS server certificate key file")
-	}
+	ts.Listener = listener
+	// Start the server.
+	ts.Start()
+	defer ts.Close()
 
-	srv := http.MultiServer{
-		HTTPPort:  httpPort,
-		HTTPSPort: httpsPort,
-		CertFile:  certFile,
-		KeyFile:   keyFile,
-		Logger:    logger,
-	}
+	logger.Println(ts.URL)
 
-	if err := srv.Start(ctx, s3Server); err != nil {
-		logger.Fatalf("server exited unexpectedly: %s", err)
-	}
+	<-ctx.Done()
 
