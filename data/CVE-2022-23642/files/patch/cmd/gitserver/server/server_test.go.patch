@@ -24,25 +24,35 @@ import (
 	"golang.org/x/time/rate"
 
 	"github.com/sourcegraph/sourcegraph/internal/api"
+	"github.com/sourcegraph/sourcegraph/internal/conf"
 	"github.com/sourcegraph/sourcegraph/internal/database"
 	"github.com/sourcegraph/sourcegraph/internal/database/dbtest"
 	"github.com/sourcegraph/sourcegraph/internal/mutablelimiter"
 	"github.com/sourcegraph/sourcegraph/internal/repoupdater/protocol"
 	"github.com/sourcegraph/sourcegraph/internal/types"
 	"github.com/sourcegraph/sourcegraph/internal/vcs"
 	"github.com/sourcegraph/sourcegraph/lib/errors"
+	"github.com/sourcegraph/sourcegraph/schema"
 )
 
 type Test struct {
-	Name             string
-	Request          *http.Request
-	ExpectedCode     int
-	ExpectedBody     string
-	ExpectedTrailers http.Header
+	Name                             string
+	Request                          *http.Request
+	ExpectedCode                     int
+	ExpectedBody                     string
+	ExpectedTrailers                 http.Header
+	EnableGitServerCommandExecFilter bool
 }
 
 func TestRequest(t *testing.T) {
 	tests := []Test{
+		{
+			Name:         "HTTP GET",
+			Request:      httptest.NewRequest("GET", "/exec", strings.NewReader("{}")),
+			ExpectedCode: http.StatusMethodNotAllowed,
+			ExpectedBody: "",
+		},
+
 		{
 			Name:         "Command",
 			Request:      httptest.NewRequest("POST", "/exec", strings.NewReader(`{"repo": "github.com/gorilla/mux", "args": ["testcommand"]}`)),
@@ -111,6 +121,26 @@ func TestRequest(t *testing.T) {
 			ExpectedCode: http.StatusNotFound,
 			ExpectedBody: `{"cloneInProgress":false}`,
 		},
+		{
+			Name:                             "EmptyInput/EnableGitServerCommandExecFilter",
+			Request:                          httptest.NewRequest("POST", "/exec", strings.NewReader("{}")),
+			ExpectedCode:                     http.StatusBadRequest,
+			ExpectedBody:                     "invalid command",
+			EnableGitServerCommandExecFilter: true,
+		},
+		{
+			Name:         "BadCommand",
+			Request:      httptest.NewRequest("POST", "/exec", strings.NewReader(`{"repo":"github.com/sourcegraph/sourcegraph", "args": ["invalid-command"]}`)),
+			ExpectedCode: http.StatusNotFound,
+			ExpectedBody: `{"cloneInProgress":false}`,
+		},
+		{
+			Name:                             "BadCommand/EnableGitServerCommandExecFilter",
+			Request:                          httptest.NewRequest("POST", "/exec", strings.NewReader(`{"repo":"github.com/sourcegraph/sourcegraph", "args": ["invalid-command"]}`)),
+			ExpectedCode:                     http.StatusBadRequest,
+			ExpectedBody:                     "invalid command",
+			EnableGitServerCommandExecFilter: true,
+		},
 	}
 
 	s := &Server{
@@ -154,6 +184,14 @@ func TestRequest(t *testing.T) {
 
 	for _, test := range tests {
 		t.Run(test.Name, func(t *testing.T) {
+			conf.Mock(&conf.Unified{
+				SiteConfiguration: schema.SiteConfiguration{
+					ExperimentalFeatures: &schema.ExperimentalFeatures{
+						EnableGitServerCommandExecFilter: test.EnableGitServerCommandExecFilter,
+					},
+				},
+			})
+
 			w := httptest.ResponseRecorder{Body: new(bytes.Buffer)}
 			h.ServeHTTP(&w, test.Request)
 