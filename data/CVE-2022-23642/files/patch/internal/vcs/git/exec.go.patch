@@ -7,6 +7,7 @@ import (
 
 	"github.com/sourcegraph/sourcegraph/internal/api"
 	"github.com/sourcegraph/sourcegraph/internal/gitserver"
+	"github.com/sourcegraph/sourcegraph/internal/gitserver/gitdomain"
 	"github.com/sourcegraph/sourcegraph/internal/trace/ot"
 	"github.com/sourcegraph/sourcegraph/lib/errors"
 )
@@ -32,7 +33,7 @@ func execSafe(ctx context.Context, repo api.RepoName, params []string) (stdout,
 		return nil, nil, 0, errors.New("at least one argument required")
 	}
 
-	if !isAllowedGitCmd(params) {
+	if !gitdomain.IsAllowedGitCmd(params) {
 		return nil, nil, 0, errors.Errorf("command failed: %q is not a allowed git command", params)
 	}
 
@@ -60,89 +61,14 @@ func execReader(ctx context.Context, repo api.RepoName, args []string) (io.ReadC
 	span.SetTag("args", args)
 	defer span.Finish()
 
-	if !isAllowedGitCmd(args) {
+	if !gitdomain.IsAllowedGitCmd(args) {
 		return nil, errors.Errorf("command failed: %v is not a allowed git command", args)
 	}
 	cmd := gitserver.DefaultClient.Command("git", args...)
 	cmd.Repo = repo
 	return gitserver.StdoutReader(ctx, cmd)
 }
 
-var (
-	// gitCmdAllowlist are commands and arguments that are allowed to execute when calling execSafe.
-	gitCmdAllowlist = map[string][]string{
-		"log":    append([]string{}, gitCommonAllowlist...),
-		"show":   append([]string{}, gitCommonAllowlist...),
-		"remote": {"-v"},
-		"diff":   append([]string{}, gitCommonAllowlist...),
-		"blame":  {"--root", "--incremental", "-w", "-p", "--porcelain", "--"},
-		"branch": {"-r", "-a", "--contains"},
-
-		"rev-parse":    {"--abbrev-ref", "--symbolic-full-name"},
-		"rev-list":     {"--max-parents", "--reverse", "--max-count"},
-		"ls-remote":    {"--get-url"},
-		"symbolic-ref": {"--short"},
-	}
-
-	// `git log`, `git show`, `git diff`, etc., share a large common set of allowed args.
-	gitCommonAllowlist = []string{
-		"--name-status", "--full-history", "-M", "--date", "--format", "-i", "-n1", "-m", "--", "-n200", "-n2", "--follow", "--author", "--grep", "--date-order", "--decorate", "--skip", "--max-count", "--numstat", "--pretty", "--parents", "--topo-order", "--raw", "--follow", "--all", "--before", "--no-merges",
-		"--patch", "--unified", "-S", "-G", "--pickaxe-all", "--pickaxe-regex", "--function-context", "--branches", "--source", "--src-prefix", "--dst-prefix", "--no-prefix",
-		"--regexp-ignore-case", "--glob", "--cherry", "-z",
-		"--until", "--since", "--author", "--committer",
-		"--all-match", "--invert-grep", "--extended-regexp",
-		"--no-color", "--decorate", "--no-patch", "--exclude",
-		"--no-merges",
-		"--full-index",
-		"--find-copies",
-		"--find-renames",
-		"--inter-hunk-context",
-	}
-)
-
-// isAllowedGitArg checks if the arg is allowed.
-func isAllowedGitArg(allowedArgs []string, arg string) bool {
-	// Split the arg at the first equal sign and check the LHS against the allowlist args.
-	splitArg := strings.Split(arg, "=")[0]
-	for _, allowedArg := range allowedArgs {
-		if splitArg == allowedArg {
-			return true
-		}
-	}
-	return false
-}
-
-// isAllowedGitCmd checks if the cmd and arguments are allowed.
-func isAllowedGitCmd(args []string) bool {
-	// check if the supplied command is a allowed cmd
-	if len(gitCmdAllowlist) == 0 {
-		return false
-	}
-	cmd := args[0]
-	allowedArgs, ok := gitCmdAllowlist[cmd]
-	if !ok {
-		// Command not allowed
-		return false
-	}
-	for _, arg := range args[1:] {
-		if strings.HasPrefix(arg, "-") {
-			// Special-case `git log -S` and `git log -G`, which interpret any characters
-			// after their 'S' or 'G' as part of the query. There is no long form of this
-			// flags (such as --something=query), so if we did not special-case these, there
-			// would be no way to safely express a query that began with a '-' character.
-			// (Same for `git show`, where the flag has the same meaning.)
-			if (cmd == "log" || cmd == "show") && (strings.HasPrefix(arg, "-S") || strings.HasPrefix(arg, "-G")) {
-				continue // this arg is OK
-			}
-
-			if !isAllowedGitArg(allowedArgs, arg) {
-				return false
-			}
-		}
-	}
-	return true
-}
-
 // checkSpecArgSafety returns a non-nil err if spec begins with a "-", which
 // could cause it to be interpreted as a git command line argument.
 func checkSpecArgSafety(spec string) error {