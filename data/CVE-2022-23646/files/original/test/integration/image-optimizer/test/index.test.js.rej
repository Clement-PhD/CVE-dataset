--- /dev/null
+++ /dev/null
@@ -1283,4 +2097,192 @@ describe('Image Optimizer', () => {
       await expectWidth(res, 8)
     })
   })
+
+  const setupTests = ({ isSharp = false, isOutdatedSharp = false }) => {
+    describe('dev support w/o next.config.js', () => {
+      const size = 384 // defaults defined in server/config.ts
+      beforeAll(async () => {
+        nextOutput = ''
+        appPort = await findPort()
+        app = await launchApp(appDir, appPort, {
+          onStderr(msg) {
+            nextOutput += msg
+          },
+          env: {
+            NEXT_SHARP_PATH: isSharp
+              ? join(appDir, 'node_modules', 'sharp')
+              : '',
+          },
+          cwd: appDir,
+        })
+      })
+      afterAll(async () => {
+        await killApp(app)
+        await fs.remove(imagesDir)
+      })
+
+      runTests({
+        w: size,
+        isDev: true,
+        domains: [],
+        isSharp,
+        isOutdatedSharp,
+        avifEnabled: false,
+      })
+    })
+
+    describe('dev support with next.config.js', () => {
+      const size = 400
+      beforeAll(async () => {
+        const json = JSON.stringify({
+          images: {
+            deviceSizes: [largeSize],
+            imageSizes: [size],
+            domains,
+            formats: ['image/avif', 'image/webp'],
+          },
+        })
+        nextOutput = ''
+        nextConfig.replace('{ /* replaceme */ }', json)
+        appPort = await findPort()
+        app = await launchApp(appDir, appPort, {
+          onStderr(msg) {
+            nextOutput += msg
+          },
+          env: {
+            NEXT_SHARP_PATH: isSharp
+              ? join(appDir, 'node_modules', 'sharp')
+              : '',
+          },
+          cwd: appDir,
+        })
+      })
+      afterAll(async () => {
+        await killApp(app)
+        nextConfig.restore()
+        await fs.remove(imagesDir)
+      })
+
+      runTests({
+        w: size,
+        isDev: true,
+        domains,
+        isSharp,
+        isOutdatedSharp,
+        avifEnabled: true,
+      })
+    })
+
+    describe('Server support w/o next.config.js', () => {
+      const size = 384 // defaults defined in server/config.ts
+      beforeAll(async () => {
+        nextOutput = ''
+        await nextBuild(appDir)
+        appPort = await findPort()
+        app = await nextStart(appDir, appPort, {
+          onStderr(msg) {
+            nextOutput += msg
+          },
+          env: {
+            NEXT_SHARP_PATH: isSharp
+              ? join(appDir, 'node_modules', 'sharp')
+              : '',
+          },
+          cwd: appDir,
+        })
+      })
+      afterAll(async () => {
+        await killApp(app)
+        await fs.remove(imagesDir)
+      })
+
+      runTests({ w: size, isDev: false, domains: [], isSharp, isOutdatedSharp })
+    })
+
+    describe('Server support with next.config.js', () => {
+      const size = 399
+      beforeAll(async () => {
+        const json = JSON.stringify({
+          images: {
+            formats: ['image/avif', 'image/webp'],
+            deviceSizes: [size, largeSize],
+            domains,
+          },
+        })
+        nextOutput = ''
+        nextConfig.replace('{ /* replaceme */ }', json)
+        await nextBuild(appDir)
+        appPort = await findPort()
+        app = await nextStart(appDir, appPort, {
+          onStderr(msg) {
+            nextOutput += msg
+          },
+          env: {
+            NEXT_SHARP_PATH: isSharp
+              ? join(appDir, 'node_modules', 'sharp')
+              : '',
+          },
+          cwd: appDir,
+        })
+      })
+      afterAll(async () => {
+        await killApp(app)
+        nextConfig.restore()
+        await fs.remove(imagesDir)
+      })
+
+      runTests({
+        w: size,
+        isDev: false,
+        domains,
+        isSharp,
+        isOutdatedSharp,
+        avifEnabled: true,
+      })
+    })
+  }
+
+  describe('with squoosh', () => {
+    setupTests({ isSharp: false, isOutdatedSharp: false })
+  })
+
+  describe('with latest sharp', () => {
+    beforeAll(async () => {
+      await execa('yarn', ['init', '-y'], {
+        cwd: appDir,
+        stdio: 'inherit',
+      })
+      await execa('yarn', ['add', 'sharp'], {
+        cwd: appDir,
+        stdio: 'inherit',
+      })
+    })
+    afterAll(async () => {
+      await fs.remove(join(appDir, 'node_modules'))
+      await fs.remove(join(appDir, 'yarn.lock'))
+      await fs.remove(join(appDir, 'package.json'))
+    })
+
+    setupTests({ isSharp: true, isOutdatedSharp: false })
+  })
+
+  describe('with outdated sharp', () => {
+    beforeAll(async () => {
+      await execa('yarn', ['init', '-y'], {
+        cwd: appDir,
+        stdio: 'inherit',
+      })
+      await execa('yarn', ['add', 'sharp@0.26.3'], {
+        cwd: appDir,
+        stdio: 'inherit',
+      })
+    })
+    afterAll(async () => {
+      await fs.remove(join(appDir, 'node_modules'))
+      await fs.remove(join(appDir, 'yarn.lock'))
+      await fs.remove(join(appDir, 'package.json'))
+    })
+
+    setupTests({ isSharp: true, isOutdatedSharp: true })
+  })
 
