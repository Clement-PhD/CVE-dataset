@@ -48,7 +48,7 @@ import {
   NodeNextResponse,
 } from './base-http'
 import { PayloadOptions, sendRenderResult } from './send-payload'
-import { serveStatic } from './serve-static'
+import { getExtension, serveStatic } from './serve-static'
 import { ParsedUrlQuery } from 'querystring'
 import { apiResolver } from './api-utils'
 import { RenderOpts, renderToHTML } from './render'
@@ -76,6 +76,7 @@ import { MIDDLEWARE_ROUTE } from '../lib/constants'
 import { loadEnvConfig } from '@next/env'
 import { getCustomRoute } from './server-route-utils'
 import { urlQueryToSearchParams } from '../shared/lib/router/utils/querystring'
+import ResponseCache from '../server/response-cache'
 
 export * from './base-server'
 
@@ -94,6 +95,8 @@ export interface NodeRequestHandler {
 }
 
 export default class NextNodeServer extends BaseServer {
+  private imageResponseCache: ResponseCache
+
   constructor(options: Options) {
     // Initialize super class
     super(options)
@@ -113,6 +116,16 @@ export default class NextNodeServer extends BaseServer {
     if (this.renderOpts.optimizeCss) {
       process.env.__NEXT_OPTIMIZE_CSS = JSON.stringify(true)
     }
+
+    const { ImageOptimizerCache } =
+      require('./image-optimizer') as typeof import('./image-optimizer')
+
+    this.imageResponseCache = new ResponseCache(
+      new ImageOptimizerCache({
+        distDir: this.distDir,
+        nextConfig: this.nextConfig,
+      })
+    )
   }
 
   private compression =
@@ -157,25 +170,92 @@ export default class NextNodeServer extends BaseServer {
   }
 
   protected generateImageRoutes(): Route[] {
+    const { getHash, ImageOptimizerCache, sendResponse, ImageError } =
+      require('./image-optimizer') as typeof import('./image-optimizer')
     return [
       {
         match: route('/_next/image'),
         type: 'route',
         name: '_next/image catchall',
-        fn: (req, res, _params, parsedUrl) => {
+        fn: async (req, res, _params, parsedUrl) => {
           if (this.minimalMode) {
             res.statusCode = 400
             res.body('Bad Request').send()
             return {
               finished: true,
             }
           }
+          const imagesConfig = this.nextConfig.images
 
-          return this.imageOptimizer(
-            req as NodeNextRequest,
-            res as NodeNextResponse,
-            parsedUrl
+          if (imagesConfig.loader !== 'default') {
+            await this.render404(req, res)
+            return { finished: true }
+          }
+          const paramsResult = ImageOptimizerCache.validateParams(
+            (req as NodeNextRequest).originalRequest,
+            parsedUrl.query,
+            this.nextConfig,
+            !!this.renderOpts.dev
           )
+
+          if ('errorMessage' in paramsResult) {
+            res.statusCode = 400
+            res.body(paramsResult.errorMessage).send()
+            return { finished: true }
+          }
+          const cacheKey = ImageOptimizerCache.getCacheKey(paramsResult)
+
+          try {
+            const cacheEntry = await this.imageResponseCache.get(
+              cacheKey,
+              async () => {
+                const { buffer, contentType, maxAge } =
+                  await this.imageOptimizer(
+                    req as NodeNextRequest,
+                    res as NodeNextResponse,
+                    paramsResult
+                  )
+                const etag = getHash([buffer])
+
+                return {
+                  value: {
+                    kind: 'IMAGE',
+                    buffer,
+                    etag,
+                    extension: getExtension(contentType) as string,
+                  },
+                  revalidate: maxAge,
+                }
+              },
+              {}
+            )
+
+            if (cacheEntry?.value?.kind !== 'IMAGE') {
+              throw new Error(
+                'invariant did not get entry from image response cache'
+              )
+            }
+
+            sendResponse(
+              (req as NodeNextRequest).originalRequest,
+              (res as NodeNextResponse).originalResponse,
+              paramsResult.href,
+              cacheEntry.value.extension,
+              cacheEntry.value.buffer,
+              paramsResult.isStatic,
+              cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT'
+            )
+          } catch (err) {
+            if (err instanceof ImageError) {
+              res.statusCode = err.statusCode
+              res.body(err.message).send()
+              return {
+                finished: true,
+              }
+            }
+            throw err
+          }
+          return { finished: true }
         },
       },
     ]
@@ -494,25 +574,22 @@ export default class NextNodeServer extends BaseServer {
   protected async imageOptimizer(
     req: NodeNextRequest,
     res: NodeNextResponse,
-    parsedUrl: UrlWithParsedQuery
-  ): Promise<{ finished: boolean }> {
+    paramsResult: import('./image-optimizer').ImageParamsResult
+  ): Promise<{ buffer: Buffer; contentType: string; maxAge: number }> {
     const { imageOptimizer } =
       require('./image-optimizer') as typeof import('./image-optimizer')
 
     return imageOptimizer(
       req.originalRequest,
       res.originalResponse,
-      parsedUrl,
+      paramsResult,
       this.nextConfig,
-      this.distDir,
-      () => this.render404(req, res, parsedUrl),
       (newReq, newRes, newParsedUrl) =>
         this.getRequestHandler()(
           new NodeNextRequest(newReq),
           new NodeNextResponse(newRes),
           newParsedUrl
-        ),
-      this.renderOpts.dev
+        )
     )
   }
 