@@ -1,29 +1,81 @@
-import { IncrementalCache } from './incremental-cache'
 import RenderResult from './render-result'
 
-interface CachedRedirectValue {
+export interface CachedRedirectValue {
   kind: 'REDIRECT'
   props: Object
 }
 
 interface CachedPageValue {
   kind: 'PAGE'
+  // this needs to be a RenderResult so since renderResponse
+  // expects that type instead of a string
   html: RenderResult
   pageData: Object
 }
 
-export type ResponseCacheValue = CachedRedirectValue | CachedPageValue
+export interface CachedImageValue {
+  kind: 'IMAGE'
+  etag: string
+  buffer: Buffer
+  extension: string
+  isMiss?: boolean
+  isStale?: boolean
+}
+
+interface IncrementalCachedPageValue {
+  kind: 'PAGE'
+  // this needs to be a string since the cache expects to store
+  // the string value
+  html: string
+  pageData: Object
+}
+
+export type IncrementalCacheEntry = {
+  curRevalidate?: number | false
+  // milliseconds to revalidate after
+  revalidateAfter: number | false
+  isStale?: boolean
+  value: IncrementalCacheValue | null
+}
+
+export type IncrementalCacheValue =
+  | CachedRedirectValue
+  | IncrementalCachedPageValue
+  | CachedImageValue
+
+export type ResponseCacheValue =
+  | CachedRedirectValue
+  | CachedPageValue
+  | CachedImageValue
 
 export type ResponseCacheEntry = {
   revalidate?: number | false
   value: ResponseCacheValue | null
+  isStale?: boolean
+  isMiss?: boolean
 }
 
 type ResponseGenerator = (
   hasResolved: boolean,
   hadCache: boolean
 ) => Promise<ResponseCacheEntry | null>
 
+interface IncrementalCache {
+  get: (key: string) => Promise<{
+    revalidateAfter?: number | false
+    curRevalidate?: number | false
+    revalidate?: number | false
+    value: IncrementalCacheValue | null
+    isStale?: boolean
+    isMiss?: boolean
+  } | null>
+  set: (
+    key: string,
+    data: IncrementalCacheValue | null,
+    revalidate?: number | false
+  ) => Promise<void>
+}
+
 export default class ResponseCache {
   incrementalCache: IncrementalCache
   pendingResponses: Map<string, Promise<ResponseCacheEntry | null>>
@@ -79,6 +131,7 @@ export default class ResponseCache {
             cachedResponse.revalidateAfter === false)
         ) {
           resolve({
+            isStale: cachedResponse.isStale,
             revalidate: cachedResponse.curRevalidate,
             value:
               cachedResponse.value?.kind === 'PAGE'
@@ -97,7 +150,14 @@ export default class ResponseCache {
         }
 
         const cacheEntry = await responseGenerator(resolved, !!cachedResponse)
-        resolve(cacheEntry)
+        resolve(
+          cacheEntry === null
+            ? null
+            : {
+                ...cacheEntry,
+                isMiss: !cachedResponse,
+              }
+        )
 
         if (key && cacheEntry && typeof cacheEntry.revalidate !== 'undefined') {
           await this.incrementalCache.set(