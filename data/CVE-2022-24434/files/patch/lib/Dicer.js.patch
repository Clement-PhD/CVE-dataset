@@ -31,7 +31,6 @@ function Dicer(cfg) {
   this._dashes = 0;
   this._parts = 0;
   this._finished = false;
-  this._realFinish = false;
   this._isPreamble = true;
   this._justMatched = false;
   this._firstWrite = true;
@@ -54,7 +53,7 @@ function Dicer(cfg) {
 inherits(Dicer, WritableStream);
 
 Dicer.prototype.emit = function(ev) {
-  if (ev === 'finish' && !this._realFinish) {
+  if (ev === 'finish') {
     if (!this._finished) {
       var self = this;
       process.nextTick(function() {
@@ -64,15 +63,11 @@ Dicer.prototype.emit = function(ev) {
           self._part.emit('error', new Error(type + ' terminated early due to unexpected end of multipart data'));
           self._part.push(null);
           process.nextTick(function() {
-            self._realFinish = true;
-            self.emit('finish');
-            self._realFinish = false;
+            WritableStream.prototype.emit.call(self, 'finish');
           });
           return;
         }
-        self._realFinish = true;
-        self.emit('finish');
-        self._realFinish = false;
+        WritableStream.prototype.emit.call(self, 'finish');
       });
     }
   } else
@@ -160,9 +155,7 @@ Dicer.prototype._oninfo = function(isMatch, data, start, end) {
       this._finished = true;
       // no more parts will be added
       if (self._parts === 0) {
-        self._realFinish = true;
-        self.emit('finish');
-        self._realFinish = false;
+        WritableStream.prototype.emit.call(self, 'finish');
       }
     }
     if (this._dashes)
@@ -190,7 +183,7 @@ Dicer.prototype._oninfo = function(isMatch, data, start, end) {
       shouldWriteMore = this._part.push(data.slice(start, end));
       if (!shouldWriteMore)
         this._pause = true;
-    } else if (!this._isPreamble && this._inHeader) {
+    } else {
       if (buf)
         this._hparser.push(buf);
       r = this._hparser.push(data.slice(start, end));
@@ -207,9 +200,7 @@ Dicer.prototype._oninfo = function(isMatch, data, start, end) {
       this._part.on('end', function() {
         if (--self._parts === 0) {
           if (self._finished) {
-            self._realFinish = true;
-            self.emit('finish');
-            self._realFinish = false;
+            WritableStream.prototype.emit.call(self, 'finish');
           } else {
             self._unpause();
           }