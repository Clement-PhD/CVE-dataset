@@ -1,20 +1,24 @@
-import cookie from 'react-cookie';
+import Cookies from 'universal-cookie';
 import jwt from 'jsonwebtoken';
 import jwtDecode from 'jwt-decode';
 
 import { getAuthToken, persistAuthToken } from './AuthToken';
 
-jest.mock('react-cookie', () => ({
-  load: jest
-    .fn(() => require('jsonwebtoken').sign({ exp: 1 }, 'secret')) // eslint-disable-line global-require
-    .mockImplementationOnce(() => null), // the first call is for anonymous, no auth_token cookie
-  remove: jest.fn(),
-  save: jest.fn(),
-}));
+jest.mock('universal-cookie', () => {
+  const mCookie = {
+    get: jest
+      .fn(() => require('jsonwebtoken').sign({ exp: 1 }, 'secret')) // eslint-disable-line global-require
+      .mockImplementationOnce(() => null), // the first call is for anonymous, no auth_token cookie
+    remove: jest.fn(),
+    set: jest.fn(),
+  };
+  return jest.fn(() => mCookie);
+});
 
 describe('AuthToken', () => {
   describe('anonymousAuthToken', () => {
     it('avoid unnecessary removing auth token', () => {
+      const cookies = new Cookies();
       const store = {
         subscribe: jest.fn(),
         getState: jest.fn(() => ({
@@ -24,19 +28,21 @@ describe('AuthToken', () => {
         })),
       };
       persistAuthToken(store);
-      expect(cookie.remove).not.toBeCalledWith('auth_token', { path: '/' });
+      expect(cookies.remove).not.toBeCalledWith('auth_token', { path: '/' });
     });
   });
 
   describe('getAuthToken', () => {
     it('can get the auth token', () => {
+      const cookies = new Cookies();
       getAuthToken();
-      expect(cookie.load).toBeCalledWith('auth_token');
+      expect(cookies.get).toBeCalledWith('auth_token');
     });
   });
 
   describe('persistAuthToken', () => {
     it('can set a new auth token', () => {
+      const cookies = new Cookies();
       const store = {
         subscribe: jest.fn(),
         getState: jest.fn(() => ({
@@ -48,13 +54,14 @@ describe('AuthToken', () => {
       const { token } = store.getState().userSession;
 
       persistAuthToken(store);
-      expect(cookie.save).toBeCalledWith('auth_token', token, {
+      expect(cookies.set).toBeCalledWith('auth_token', token, {
         path: '/',
         expires: new Date(jwtDecode(token).exp * 1000),
       });
     });
 
     it('can remove an auth token', () => {
+      const cookies = new Cookies();
       const store = {
         subscribe: jest.fn(),
         getState: jest.fn(() => ({
@@ -65,7 +72,7 @@ describe('AuthToken', () => {
       };
 
       persistAuthToken(store);
-      expect(cookie.remove).toBeCalledWith('auth_token', { path: '/' });
+      expect(cookies.remove).toBeCalledWith('auth_token', { path: '/' });
     });
   });
 });