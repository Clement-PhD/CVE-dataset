@@ -9,7 +9,7 @@
 from typing import Any, List, Optional
 
 import gradio as gr
-from gradio import encryptor
+from gradio import encryptor, utils
 
 
 class FlaggingCallback(ABC):
@@ -99,7 +99,7 @@ def flag(
 
         with open(log_filepath, "a", newline="") as csvfile:
             writer = csv.writer(csvfile)
-            writer.writerow(csv_data)
+            writer.writerow(utils.santize_for_csv(csv_data))
 
         with open(log_filepath, "r") as csvfile:
             line_count = len([None for row in csv.reader(csvfile)]) - 1
@@ -186,7 +186,7 @@ def replace_flag_at_index(file_content):
             content[flag_index][flag_col_index] = flag_option
             output = io.StringIO()
             writer = csv.writer(output)
-            writer.writerows(content)
+            writer.writerows(utils.santize_for_csv(content))
             return output.getvalue()
 
         if interface.encrypt:
@@ -200,33 +200,35 @@ def replace_flag_at_index(file_content):
                     file_content = decrypted_csv.decode()
                     if flag_index is not None:
                         file_content = replace_flag_at_index(file_content)
-                    output.write(file_content)
+                    output.write(utils.santize_for_csv(file_content))
             writer = csv.writer(output)
             if flag_index is None:
                 if is_new:
                     writer.writerow(headers)
                 writer.writerow(csv_data)
             with open(log_fp, "wb") as csvfile:
                 csvfile.write(
-                    encryptor.encrypt(
-                        interface.encryption_key, output.getvalue().encode()
+                    utils.santize_for_csv(
+                        encryptor.encrypt(
+                            interface.encryption_key, output.getvalue().encode()
+                        )
                     )
                 )
         else:
             if flag_index is None:
                 with open(log_fp, "a", newline="") as csvfile:
                     writer = csv.writer(csvfile)
                     if is_new:
-                        writer.writerow(headers)
-                    writer.writerow(csv_data)
+                        writer.writerow(utils.santize_for_csv(headers))
+                    writer.writerow(utils.santize_for_csv(csv_data))
             else:
                 with open(log_fp) as csvfile:
                     file_content = csvfile.read()
                     file_content = replace_flag_at_index(file_content)
                 with open(
                     log_fp, "w", newline=""
                 ) as csvfile:  # newline parameter needed for Windows
-                    csvfile.write(file_content)
+                    csvfile.write(utils.santize_for_csv(file_content))
         with open(log_fp, "r") as csvfile:
             line_count = len([None for row in csv.reader(csvfile)]) - 1
         return line_count
@@ -368,7 +370,7 @@ def flag(
                         "_type": "Value",
                     }
 
-                writer.writerow(headers)
+                writer.writerow(utils.santize_for_csv(headers))
 
             # Generate the row corresponding to the flagged sample
             csv_data = []
@@ -403,7 +405,7 @@ def flag(
             if flag_option is not None:
                 csv_data.append(flag_option)
 
-            writer.writerow(csv_data)
+            writer.writerow(utils.santize_for_csv(csv_data))
 
         if is_new:
             json.dump(infos, open(self.infos_file, "w"))