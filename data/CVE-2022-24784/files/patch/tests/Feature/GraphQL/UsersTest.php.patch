@@ -257,6 +257,47 @@ public function it_filters_users_with_multiple_conditions_of_the_same_type()
             ]]]]);
     }
 
+    /**
+     * @test
+     * @dataProvider userPasswordFilterProvider
+     */
+    public function it_doesnt_allow_filtering_users_by_password($filter)
+    {
+        User::make()->id('one')->email('one@domain.com')->passwordHash('abc')->save();
+        User::make()->id('two')->email('two@domain.com')->passwordHash('def')->save();
+
+        $query = <<<GQL
+{
+    users(filter: $filter) {
+        data {
+            id
+        }
+    }
+}
+GQL;
+
+        $this
+            ->withoutExceptionHandling()
+            ->post('/graphql', ['query' => $query])
+            ->assertGqlOk()
+            ->assertExactJson(['data' => ['users' => ['data' => [
+                ['id' => 'one'],
+                ['id' => 'two'], // this one would be filtered out if the password was allowed
+            ]]]]);
+    }
+
+    public function userPasswordFilterProvider()
+    {
+        return [
+            'password' => ['{ password: "abc" }'],
+            'password:is' => ['{ password: {is: "abc"} }'],
+            'password:regex' => ['{ password: {regex: "abc"} }'],
+            'password_hash' => ['{ password_hash: "abc" }'],
+            'password_hash:is' => ['{ password_hash: {is: "abc"} }'],
+            'password_hash:regex' => ['{ password_hash: {regex: "abc"} }'],
+        ];
+    }
+
     /** @test */
     public function it_sorts_users()
     {