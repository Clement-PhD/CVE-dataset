--- /dev/null
+++ /dev/null
@@ -171,112 +161,4 @@ public function testGetBookableSlotsDatesInPast(): void {
 
 		$this->controller->getBookableSlots($apptConfg->getId(), $start,'Europe/Berlin');
 	}
-
-	public function testBook(): void {
-		$email = 'penny@stardewvalley.edu';
-		$config = new AppointmentConfig();
-
-		$this->mailer->expects(self::once())
-			->method('validateMailAddress')
-			->with($email)
-			->willReturn(true);
-		$this->apptService->expects(self::once())
-			->method('findById')
-			->willReturn($config);
-		$this->bookingService->expects(self::once())
-			->method('book')
-			->with($config, 1, 1, 'Hook/Neverland', 'Test', $email, 'Test')
-			->willReturn(new Booking());
-
-		$this->controller->bookSlot(1, 1, 1, 'Test', $email, 'Test', 'Hook/Neverland');
-	}
-
-
-	public function testBookInvalidTimeZone(): void {
-		$email = 'penny@stardewvalley.edu';
-		$config = new AppointmentConfig();
-
-		$this->mailer->expects(self::once())
-			->method('validateMailAddress')
-			->with($email)
-			->willReturn(true);
-		$this->apptService->expects(self::once())
-			->method('findById')
-			->willReturn($config);
-		$this->bookingService->expects(self::once())
-			->method('book')
-			->with($config, 1, 1, 'Hook/Neverland', 'Test', $email, 'Test')
-			->willThrowException(new InvalidArgumentException());
-
-		$this->controller->bookSlot(1, 1, 1, 'Test', $email, 'Test', 'Hook/Neverland');
-	}
-
-	public function testBookInvalidSlot(): void {
-		$email = 'penny@stardewvalley.edu';
-		$config = new AppointmentConfig();
-
-		$this->mailer->expects(self::once())
-			->method('validateMailAddress')
-			->with($email)
-			->willReturn(true);
-		$this->apptService->expects(self::once())
-			->method('findById')
-			->willReturn($config);
-		$this->bookingService->expects(self::once())
-			->method('book')
-			->with($config, 1, 1, 'Europe/Berlin', 'Test', $email, 'Test')
-			->willThrowException(new NoSlotFoundException());
-
-		$this->controller->bookSlot(1, 1, 1, 'Test', $email, 'Test', 'Europe/Berlin');
-	}
-
-	public function testBookInvalidBooking(): void {
-		$email = 'penny@stardewvalley.edu';
-		$config = new AppointmentConfig();
-
-		$this->mailer->expects(self::once())
-			->method('validateMailAddress')
-			->with($email)
-			->willReturn(true);
-		$this->apptService->expects(self::once())
-			->method('findById')
-			->willReturn($config);
-		$this->bookingService->expects(self::once())
-			->method('book')
-			->with($config, 1, 1, 'Europe/Berlin', 'Test', $email, 'Test')
-			->willThrowException(new ServiceException());
-
-		$this->controller->bookSlot(1, 1, 1, 'Test', $email, 'Test', 'Europe/Berlin');
-	}
-
-	public function testBookInvalidId(): void {
-		$email = 'penny@stardewvalley.edu';
-		$this->mailer->expects(self::once())
-			->method('validateMailAddress')
-			->with($email)
-			->willReturn(true);
-		$this->apptService->expects(self::once())
-			->method('findById')
-			->willThrowException(new ServiceException());
-		$this->bookingService->expects(self::never())
-			->method('book');
-
-		$this->controller->bookSlot(1, 1, 1, 'Test', $email, 'Test', 'Europe/Berlin');
-	}
-
-
-	public function testBookInvalidEmail(): void {
-		$email = 'testing-abcdef';
-
-		$this->mailer->expects(self::once())
-			->method('validateMailAddress')
-			->with($email)
-			->willReturn(false);
-		$this->apptService->expects(self::never())
-			->method('findById');
-		$this->bookingService->expects(self::never())
-			->method('book');
-
-		$this->controller->bookSlot(1, 1, 1, 'Test', $email, 'Test', 'Europe/Berlin');
-	}
 
