--- /dev/null
+++ /dev/null
@@ -29,54 +19,61 @@ func (initDBService *InitDBService) writePgsqlConfig(pgsql config.Pgsql) error {
 	return global.GVA_VP.WriteConfig()
 }
 
-// EnsureDB 创建数据库并初始化 pg
-func (h PgsqlInitHandler) EnsureDB(ctx context.Context, conf *request.InitDB) (next context.Context, err error) {
-	if s, ok := ctx.Value("dbtype").(string); !ok || s != "pgsql" {
-		return ctx, ErrDBTypeMismatch
-	}
+func (initDBService *InitDBService) initPgsqlDB(conf request.InitDB) error {
 	dsn := conf.PgsqlEmptyDsn()
-	createSql := fmt.Sprintf("CREATE DATABASE %s;", conf.DBName)
-	if err = createDatabase(dsn, "pgx", createSql); err != nil {
-		return nil, err
+	createSql := "CREATE DATABASE " + conf.DBName
+	if err := initDBService.createDatabase(dsn, "pgx", createSql); err != nil {
+		return err
 	} // 创建数据库
 
-	c := conf.ToPgsqlConfig()
-	next = context.WithValue(ctx, "config", c)
-	if c.Dbname == "" {
-		return ctx, nil
+	pgsqlConfig := conf.ToPgsqlConfig()
+	if pgsqlConfig.Dbname == "" {
+		return nil
 	} // 如果没有数据库名, 则跳出初始化数据
-	var db *gorm.DB
-	if db, err = gorm.Open(postgres.New(postgres.Config{
-		DSN:                  c.Dsn(), // DSN data source name
+
+	if db, err := gorm.Open(postgres.New(postgres.Config{
+		DSN:                  pgsqlConfig.Dsn(), // DSN data source name
 		PreferSimpleProtocol: false,
 	}), &gorm.Config{DisableForeignKeyConstraintWhenMigrating: true}); err != nil {
-		return ctx, err
+		return nil
+	} else {
+		global.GVA_DB = db
+	}
+
+	if err := initDBService.initTables(); err != nil {
+		global.GVA_DB = nil
+		return err
 	}
+
+	if err := initDBService.initPgsqlData(); err != nil {
+		global.GVA_DB = nil
+		return err
+	}
+
+	if err := initDBService.writePgsqlConfig(pgsqlConfig); err != nil {
+		return err
+	}
+
 	global.GVA_CONFIG.AutoCode.Root, _ = filepath.Abs("..")
-	next = context.WithValue(next, "db", db)
-	return next, err
+	return nil
 }
 
-func (h PgsqlInitHandler) InitTables(ctx context.Context, inits initSlice) error {
-	return createTables(ctx, inits)
-}
+// initPgsqlData pgsql 初始化数据
+// Author [SliverHorn](https://github.com/SliverHorn)
+func (initDBService *InitDBService) initPgsqlData() error {
+	return model.PgsqlDataInitialize(
+		system.Api,
+		system.User,
+		system.Casbin,
+		system.BaseMenu,
+		system.Authority,
+		system.Dictionary,
+		system.UserAuthority,
+		system.DataAuthorities,
+		system.AuthoritiesMenus,
+		system.DictionaryDetail,
+		system.ViewAuthorityMenuPostgres,
 
-func (h PgsqlInitHandler) InitData(ctx context.Context, inits initSlice) error {
-	next, cancel := context.WithCancel(ctx)
-	defer func(c func()) { c() }(cancel)
-	for i := 0; i < len(inits); i++ {
-		if inits[i].DataInserted(next) {
-			color.Info.Printf(InitDataExist, Pgsql, inits[i].InitializerName())
-			continue
-		}
-		if n, err := inits[i].InitializeData(next); err != nil {
-			color.Info.Printf(InitDataFailed, Pgsql, err)
-			return err
-		} else {
-			next = n
-			color.Info.Printf(InitDataSuccess, Pgsql, inits[i].InitializerName())
-		}
-	}
-	color.Info.Printf(InitSuccess, Pgsql)
-	return nil
+		example.FilePgsql,
+	)
 
