--- /dev/null
+++ /dev/null
@@ -718,75 +626,48 @@ void ntlm_generate_server_sealing_key(NTLM_CONTEXT* context)
 
 void ntlm_init_rc4_seal_states(NTLM_CONTEXT* context)
 {
-	WINPR_ASSERT(context);
 	if (context->server)
 	{
 		context->SendSigningKey = context->ServerSigningKey;
 		context->RecvSigningKey = context->ClientSigningKey;
 		context->SendSealingKey = context->ClientSealingKey;
 		context->RecvSealingKey = context->ServerSealingKey;
-		context->SendRc4Seal =
-		    winpr_RC4_New(context->ServerSealingKey, sizeof(context->ServerSealingKey));
-		context->RecvRc4Seal =
-		    winpr_RC4_New(context->ClientSealingKey, sizeof(context->ClientSealingKey));
+		context->SendRc4Seal = winpr_RC4_New(context->ServerSealingKey, 16);
+		context->RecvRc4Seal = winpr_RC4_New(context->ClientSealingKey, 16);
 	}
 	else
 	{
 		context->SendSigningKey = context->ClientSigningKey;
 		context->RecvSigningKey = context->ServerSigningKey;
 		context->SendSealingKey = context->ServerSealingKey;
 		context->RecvSealingKey = context->ClientSealingKey;
-		context->SendRc4Seal =
-		    winpr_RC4_New(context->ClientSealingKey, sizeof(context->ClientSealingKey));
-		context->RecvRc4Seal =
-		    winpr_RC4_New(context->ServerSealingKey, sizeof(context->ServerSealingKey));
+		context->SendRc4Seal = winpr_RC4_New(context->ClientSealingKey, 16);
+		context->RecvRc4Seal = winpr_RC4_New(context->ServerSealingKey, 16);
 	}
 }
 
-BOOL ntlm_compute_message_integrity_check(NTLM_CONTEXT* context, BYTE* mic, UINT32 size)
+void ntlm_compute_message_integrity_check(NTLM_CONTEXT* context, BYTE* mic, UINT32 size)
 {
-	BOOL rc = FALSE;
 	/*
 	 * Compute the HMAC-MD5 hash of ConcatenationOf(NEGOTIATE_MESSAGE,
 	 * CHALLENGE_MESSAGE, AUTHENTICATE_MESSAGE) using the ExportedSessionKey
 	 */
 	WINPR_HMAC_CTX* hmac = winpr_HMAC_New();
+	assert(size >= WINPR_MD5_DIGEST_LENGTH);
 
-	WINPR_ASSERT(context);
-	WINPR_ASSERT(mic);
-	WINPR_ASSERT(size >= WINPR_MD5_DIGEST_LENGTH);
-
-	memset(mic, 0, size);
 	if (!hmac)
-		return FALSE;
+		return;
 
 	if (winpr_HMAC_Init(hmac, WINPR_MD_MD5, context->ExportedSessionKey, WINPR_MD5_DIGEST_LENGTH))
 	{
 		winpr_HMAC_Update(hmac, (BYTE*)context->NegotiateMessage.pvBuffer,
 		                  context->NegotiateMessage.cbBuffer);
 		winpr_HMAC_Update(hmac, (BYTE*)context->ChallengeMessage.pvBuffer,
 		                  context->ChallengeMessage.cbBuffer);
-
-		if (context->MessageIntegrityCheckOffset > 0)
-		{
-			const BYTE* auth = (BYTE*)context->AuthenticateMessage.pvBuffer;
-			const BYTE data[WINPR_MD5_DIGEST_LENGTH] = { 0 };
-			const size_t rest = context->MessageIntegrityCheckOffset + sizeof(data);
-
-			WINPR_ASSERT(rest <= context->AuthenticateMessage.cbBuffer);
-			winpr_HMAC_Update(hmac, &auth[0], context->MessageIntegrityCheckOffset);
-			winpr_HMAC_Update(hmac, data, sizeof(data));
-			winpr_HMAC_Update(hmac, &auth[rest], context->AuthenticateMessage.cbBuffer - rest);
-		}
-		else
-		{
-			winpr_HMAC_Update(hmac, (BYTE*)context->AuthenticateMessage.pvBuffer,
-			                  context->AuthenticateMessage.cbBuffer);
-		}
+		winpr_HMAC_Update(hmac, (BYTE*)context->AuthenticateMessage.pvBuffer,
+		                  context->AuthenticateMessage.cbBuffer);
 		winpr_HMAC_Final(hmac, mic, WINPR_MD5_DIGEST_LENGTH);
-		rc = TRUE;
 	}
 
 	winpr_HMAC_Free(hmac);
-	return rc;
 
