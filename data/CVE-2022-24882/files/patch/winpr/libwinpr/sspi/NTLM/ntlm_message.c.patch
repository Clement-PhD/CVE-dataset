@@ -25,6 +25,7 @@
 #include "../sspi.h"
 
 #include <winpr/crt.h>
+#include <winpr/assert.h>
 #include <winpr/print.h>
 #include <winpr/stream.h>
 #include <winpr/sysinfo.h>
@@ -33,143 +34,388 @@
 
 #include "ntlm_message.h"
 
-#include "../log.h"
+#include "../../log.h"
 #define TAG WINPR_TAG("sspi.NTLM")
 
+static wStream* Stream_StaticConstInit(wStream* buffer, const BYTE* data, size_t size)
+{
+	Stream_StaticInit(buffer, data, size);
+	return buffer;
+}
+
+static wStream* Stream_StaticInit2(wStream* buffer, BYTE* data, size_t size)
+{
+	Stream_StaticInit(buffer, data, size);
+	return buffer;
+}
+
 static const char NTLM_SIGNATURE[8] = { 'N', 'T', 'L', 'M', 'S', 'S', 'P', '\0' };
 
-#ifdef WITH_DEBUG_NTLM
-static const char* const NTLM_NEGOTIATE_STRINGS[] = { "NTLMSSP_NEGOTIATE_56",
-	                                                  "NTLMSSP_NEGOTIATE_KEY_EXCH",
-	                                                  "NTLMSSP_NEGOTIATE_128",
-	                                                  "NTLMSSP_RESERVED1",
-	                                                  "NTLMSSP_RESERVED2",
-	                                                  "NTLMSSP_RESERVED3",
-	                                                  "NTLMSSP_NEGOTIATE_VERSION",
-	                                                  "NTLMSSP_RESERVED4",
-	                                                  "NTLMSSP_NEGOTIATE_TARGET_INFO",
-	                                                  "NTLMSSP_REQUEST_NON_NT_SESSION_KEY",
-	                                                  "NTLMSSP_RESERVED5",
-	                                                  "NTLMSSP_NEGOTIATE_IDENTIFY",
-	                                                  "NTLMSSP_NEGOTIATE_EXTENDED_SESSION_SECURITY",
-	                                                  "NTLMSSP_RESERVED6",
-	                                                  "NTLMSSP_TARGET_TYPE_SERVER",
-	                                                  "NTLMSSP_TARGET_TYPE_DOMAIN",
-	                                                  "NTLMSSP_NEGOTIATE_ALWAYS_SIGN",
-	                                                  "NTLMSSP_RESERVED7",
-	                                                  "NTLMSSP_NEGOTIATE_WORKSTATION_SUPPLIED",
-	                                                  "NTLMSSP_NEGOTIATE_DOMAIN_SUPPLIED",
-	                                                  "NTLMSSP_NEGOTIATE_ANONYMOUS",
-	                                                  "NTLMSSP_RESERVED8",
-	                                                  "NTLMSSP_NEGOTIATE_NTLM",
-	                                                  "NTLMSSP_RESERVED9",
-	                                                  "NTLMSSP_NEGOTIATE_LM_KEY",
-	                                                  "NTLMSSP_NEGOTIATE_DATAGRAM",
-	                                                  "NTLMSSP_NEGOTIATE_SEAL",
-	                                                  "NTLMSSP_NEGOTIATE_SIGN",
-	                                                  "NTLMSSP_RESERVED10",
-	                                                  "NTLMSSP_REQUEST_TARGET",
-	                                                  "NTLMSSP_NEGOTIATE_OEM",
-	                                                  "NTLMSSP_NEGOTIATE_UNICODE" };
+static void ntlm_free_message_fields_buffer(NTLM_MESSAGE_FIELDS* fields);
+
+const char* ntlm_get_negotiate_string(UINT32 flag)
+{
+	if (flag & NTLMSSP_NEGOTIATE_56)
+		return "NTLMSSP_NEGOTIATE_56";
+	if (flag & NTLMSSP_NEGOTIATE_KEY_EXCH)
+		return "NTLMSSP_NEGOTIATE_KEY_EXCH";
+	if (flag & NTLMSSP_NEGOTIATE_128)
+		return "NTLMSSP_NEGOTIATE_128";
+	if (flag & NTLMSSP_RESERVED1)
+		return "NTLMSSP_RESERVED1";
+	if (flag & NTLMSSP_RESERVED2)
+		return "NTLMSSP_RESERVED2";
+	if (flag & NTLMSSP_RESERVED3)
+		return "NTLMSSP_RESERVED3";
+	if (flag & NTLMSSP_NEGOTIATE_VERSION)
+		return "NTLMSSP_NEGOTIATE_VERSION";
+	if (flag & NTLMSSP_RESERVED4)
+		return "NTLMSSP_RESERVED4";
+	if (flag & NTLMSSP_NEGOTIATE_TARGET_INFO)
+		return "NTLMSSP_NEGOTIATE_TARGET_INFO";
+	if (flag & NTLMSSP_REQUEST_NON_NT_SESSION_KEY)
+		return "NTLMSSP_REQUEST_NON_NT_SESSION_KEY";
+	if (flag & NTLMSSP_RESERVED5)
+		return "NTLMSSP_RESERVED5";
+	if (flag & NTLMSSP_NEGOTIATE_IDENTIFY)
+		return "NTLMSSP_NEGOTIATE_IDENTIFY";
+	if (flag & NTLMSSP_NEGOTIATE_EXTENDED_SESSION_SECURITY)
+		return "NTLMSSP_NEGOTIATE_EXTENDED_SESSION_SECURITY";
+	if (flag & NTLMSSP_RESERVED6)
+		return "NTLMSSP_RESERVED6";
+	if (flag & NTLMSSP_TARGET_TYPE_SERVER)
+		return "NTLMSSP_TARGET_TYPE_SERVER";
+	if (flag & NTLMSSP_TARGET_TYPE_DOMAIN)
+		return "NTLMSSP_TARGET_TYPE_DOMAIN";
+	if (flag & NTLMSSP_NEGOTIATE_ALWAYS_SIGN)
+		return "NTLMSSP_NEGOTIATE_ALWAYS_SIGN";
+	if (flag & NTLMSSP_RESERVED7)
+		return "NTLMSSP_RESERVED7";
+	if (flag & NTLMSSP_NEGOTIATE_WORKSTATION_SUPPLIED)
+		return "NTLMSSP_NEGOTIATE_WORKSTATION_SUPPLIED";
+	if (flag & NTLMSSP_NEGOTIATE_DOMAIN_SUPPLIED)
+		return "NTLMSSP_NEGOTIATE_DOMAIN_SUPPLIED";
+	if (flag & NTLMSSP_NEGOTIATE_ANONYMOUS)
+		return "NTLMSSP_NEGOTIATE_ANONYMOUS";
+	if (flag & NTLMSSP_RESERVED8)
+		return "NTLMSSP_RESERVED8";
+	if (flag & NTLMSSP_NEGOTIATE_NTLM)
+		return "NTLMSSP_NEGOTIATE_NTLM";
+	if (flag & NTLMSSP_RESERVED9)
+		return "NTLMSSP_RESERVED9";
+	if (flag & NTLMSSP_NEGOTIATE_LM_KEY)
+		return "NTLMSSP_NEGOTIATE_LM_KEY";
+	if (flag & NTLMSSP_NEGOTIATE_DATAGRAM)
+		return "NTLMSSP_NEGOTIATE_DATAGRAM";
+	if (flag & NTLMSSP_NEGOTIATE_SEAL)
+		return "NTLMSSP_NEGOTIATE_SEAL";
+	if (flag & NTLMSSP_NEGOTIATE_SIGN)
+		return "NTLMSSP_NEGOTIATE_SIGN";
+	if (flag & NTLMSSP_RESERVED10)
+		return "NTLMSSP_RESERVED10";
+	if (flag & NTLMSSP_REQUEST_TARGET)
+		return "NTLMSSP_REQUEST_TARGET";
+	if (flag & NTLMSSP_NEGOTIATE_OEM)
+		return "NTLMSSP_NEGOTIATE_OEM";
+	if (flag & NTLMSSP_NEGOTIATE_UNICODE)
+		return "NTLMSSP_NEGOTIATE_UNICODE";
+	return "NTLMSSP_NEGOTIATE_UNKNOWN";
+}
+
+#if defined(WITH_DEBUG_NTLM)
+static void ntlm_print_message_fields(const NTLM_MESSAGE_FIELDS* fields, const char* name)
+{
+	WINPR_ASSERT(fields);
+	WINPR_ASSERT(name);
+
+	WLog_VRB(TAG, "%s (Len: %" PRIu16 " MaxLen: %" PRIu16 " BufferOffset: %" PRIu32 ")", name,
+	         fields->Len, fields->MaxLen, fields->BufferOffset);
+
+	if (fields->Len > 0)
+		winpr_HexDump(TAG, WLOG_TRACE, fields->Buffer, fields->Len);
+}
 
 static void ntlm_print_negotiate_flags(UINT32 flags)
 {
 	int i;
-	const char* str;
-	WLog_INFO(TAG, "negotiateFlags \"0x%08" PRIX32 "\"", flags);
+
+	WLog_VRB(TAG, "negotiateFlags \"0x%08" PRIX32 "\"", flags);
 
 	for (i = 31; i >= 0; i--)
 	{
 		if ((flags >> i) & 1)
 		{
-			str = NTLM_NEGOTIATE_STRINGS[(31 - i)];
-			WLog_INFO(TAG, "\t%s (%d),", str, (31 - i));
+			const char* str = ntlm_get_negotiate_string(1 << i);
+			WLog_VRB(TAG, "\t%s (%d),", str, (31 - i));
 		}
 	}
 }
+
+static void ntlm_print_negotiate_message(const SecBuffer* NegotiateMessage,
+                                         const NTLM_NEGOTIATE_MESSAGE* message)
+{
+	WINPR_ASSERT(NegotiateMessage);
+	WINPR_ASSERT(message);
+
+	WLog_VRB(TAG, "NEGOTIATE_MESSAGE (length = %" PRIu32 ")", NegotiateMessage->cbBuffer);
+	winpr_HexDump(TAG, WLOG_TRACE, NegotiateMessage->pvBuffer, NegotiateMessage->cbBuffer);
+	ntlm_print_negotiate_flags(message->NegotiateFlags);
+
+	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
+		ntlm_print_version_info(&(message->Version));
+}
+
+static void ntlm_print_challenge_message(const SecBuffer* ChallengeMessage,
+                                         const NTLM_CHALLENGE_MESSAGE* message,
+                                         const SecBuffer* ChallengeTargetInfo)
+{
+	WINPR_ASSERT(ChallengeMessage);
+	WINPR_ASSERT(message);
+
+	WLog_VRB(TAG, "CHALLENGE_MESSAGE (length = %" PRIu32 ")", ChallengeMessage->cbBuffer);
+	winpr_HexDump(TAG, WLOG_TRACE, ChallengeMessage->pvBuffer, ChallengeMessage->cbBuffer);
+	ntlm_print_negotiate_flags(message->NegotiateFlags);
+
+	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
+		ntlm_print_version_info(&(message->Version));
+
+	ntlm_print_message_fields(&(message->TargetName), "TargetName");
+	ntlm_print_message_fields(&(message->TargetInfo), "TargetInfo");
+
+	if (ChallengeTargetInfo && (ChallengeTargetInfo->cbBuffer > 0))
+	{
+		WLog_VRB(TAG, "ChallengeTargetInfo (%" PRIu32 "):", ChallengeTargetInfo->cbBuffer);
+		ntlm_print_av_pair_list(ChallengeTargetInfo->pvBuffer, ChallengeTargetInfo->cbBuffer);
+	}
+}
+
+static void ntlm_print_authenticate_message(const SecBuffer* AuthenticateMessage,
+                                            const NTLM_AUTHENTICATE_MESSAGE* message, UINT32 flags,
+                                            const SecBuffer* AuthenticateTargetInfo)
+{
+	WINPR_ASSERT(AuthenticateMessage);
+	WINPR_ASSERT(message);
+
+	WLog_VRB(TAG, "AUTHENTICATE_MESSAGE (length = %" PRIu32 ")", AuthenticateMessage->cbBuffer);
+	winpr_HexDump(TAG, WLOG_TRACE, AuthenticateMessage->pvBuffer, AuthenticateMessage->cbBuffer);
+	ntlm_print_negotiate_flags(message->NegotiateFlags);
+
+	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
+		ntlm_print_version_info(&(message->Version));
+
+	if (AuthenticateTargetInfo && (AuthenticateTargetInfo->cbBuffer > 0))
+	{
+		WLog_VRB(TAG, "AuthenticateTargetInfo (%" PRIu32 "):", AuthenticateTargetInfo->cbBuffer);
+		ntlm_print_av_pair_list(AuthenticateTargetInfo->pvBuffer, AuthenticateTargetInfo->cbBuffer);
+	}
+
+	ntlm_print_message_fields(&(message->DomainName), "DomainName");
+	ntlm_print_message_fields(&(message->UserName), "UserName");
+	ntlm_print_message_fields(&(message->Workstation), "Workstation");
+	ntlm_print_message_fields(&(message->LmChallengeResponse), "LmChallengeResponse");
+	ntlm_print_message_fields(&(message->NtChallengeResponse), "NtChallengeResponse");
+	ntlm_print_message_fields(&(message->EncryptedRandomSessionKey), "EncryptedRandomSessionKey");
+
+	if (flags & MSV_AV_FLAGS_MESSAGE_INTEGRITY_CHECK)
+	{
+		WLog_VRB(TAG, "MessageIntegrityCheck (length = 16)");
+		winpr_HexDump(TAG, WLOG_TRACE, message->MessageIntegrityCheck,
+		              sizeof(message->MessageIntegrityCheck));
+	}
+}
+
+static void ntlm_print_authentication_complete(const NTLM_CONTEXT* context)
+{
+	WINPR_ASSERT(context);
+
+	WLog_VRB(TAG, "ClientChallenge");
+	winpr_HexDump(TAG, WLOG_TRACE, context->ClientChallenge, 8);
+	WLog_VRB(TAG, "ServerChallenge");
+	winpr_HexDump(TAG, WLOG_TRACE, context->ServerChallenge, 8);
+	WLog_VRB(TAG, "SessionBaseKey");
+	winpr_HexDump(TAG, WLOG_TRACE, context->SessionBaseKey, 16);
+	WLog_VRB(TAG, "KeyExchangeKey");
+	winpr_HexDump(TAG, WLOG_TRACE, context->KeyExchangeKey, 16);
+	WLog_VRB(TAG, "ExportedSessionKey");
+	winpr_HexDump(TAG, WLOG_TRACE, context->ExportedSessionKey, 16);
+	WLog_VRB(TAG, "RandomSessionKey");
+	winpr_HexDump(TAG, WLOG_TRACE, context->RandomSessionKey, 16);
+	WLog_VRB(TAG, "ClientSigningKey");
+	winpr_HexDump(TAG, WLOG_TRACE, context->ClientSigningKey, 16);
+	WLog_VRB(TAG, "ClientSealingKey");
+	winpr_HexDump(TAG, WLOG_TRACE, context->ClientSealingKey, 16);
+	WLog_VRB(TAG, "ServerSigningKey");
+	winpr_HexDump(TAG, WLOG_TRACE, context->ServerSigningKey, 16);
+	WLog_VRB(TAG, "ServerSealingKey");
+	winpr_HexDump(TAG, WLOG_TRACE, context->ServerSealingKey, 16);
+	WLog_VRB(TAG, "Timestamp");
+	winpr_HexDump(TAG, WLOG_TRACE, context->Timestamp, 8);
+}
 #endif
 
-static int ntlm_read_message_header(wStream* s, NTLM_MESSAGE_HEADER* header)
+static BOOL ntlm_read_message_header(wStream* s, NTLM_MESSAGE_HEADER* header, UINT32 expected)
 {
+	WINPR_ASSERT(s);
+	WINPR_ASSERT(header);
+
 	if (Stream_GetRemainingLength(s) < 12)
-		return -1;
+	{
+		WLog_ERR(TAG, "Short NTLM_MESSAGE_HEADER::header %" PRIuz ", expected 12",
+		         Stream_GetRemainingLength(s));
+		return FALSE;
+	}
 
 	Stream_Read(s, header->Signature, 8);
 	Stream_Read_UINT32(s, header->MessageType);
 
 	if (strncmp((char*)header->Signature, NTLM_SIGNATURE, 8) != 0)
-		return -1;
+	{
+		WLog_ERR(TAG, "NTLM_MESSAGE_HEADER Invalid signature, got %s, expected %s",
+		         header->Signature, NTLM_SIGNATURE);
+		return FALSE;
+	}
 
-	return 1;
+	if (header->MessageType != expected)
+	{
+		WLog_ERR(TAG, "NTLM_MESSAGE_HEADER Invalid message tyep, got %s, expected %s",
+		         ntlm_message_type_string(header->MessageType), ntlm_message_type_string(expected));
+		return FALSE;
+	}
+
+	return TRUE;
 }
 
-static void ntlm_write_message_header(wStream* s, NTLM_MESSAGE_HEADER* header)
+static BOOL ntlm_write_message_header(wStream* s, const NTLM_MESSAGE_HEADER* header)
 {
+	WINPR_ASSERT(s);
+	WINPR_ASSERT(header);
+
+	if (Stream_GetRemainingCapacity(s) < sizeof(NTLM_SIGNATURE) + 4)
+	{
+		WLog_ERR(TAG, "Short NTLM_MESSAGE_HEADER::header %" PRIuz ", expected 12",
+		         Stream_GetRemainingCapacity(s));
+		return FALSE;
+	}
+
 	Stream_Write(s, header->Signature, sizeof(NTLM_SIGNATURE));
 	Stream_Write_UINT32(s, header->MessageType);
+
+	return TRUE;
 }
 
-static void ntlm_populate_message_header(NTLM_MESSAGE_HEADER* header, UINT32 MessageType)
+static BOOL ntlm_populate_message_header(NTLM_MESSAGE_HEADER* header, UINT32 MessageType)
 {
+	WINPR_ASSERT(header);
+
 	CopyMemory(header->Signature, NTLM_SIGNATURE, sizeof(NTLM_SIGNATURE));
 	header->MessageType = MessageType;
+	return TRUE;
 }
 
-static int ntlm_read_message_fields(wStream* s, NTLM_MESSAGE_FIELDS* fields)
+static BOOL ntlm_read_message_fields(wStream* s, NTLM_MESSAGE_FIELDS* fields)
 {
+	WINPR_ASSERT(s);
+	WINPR_ASSERT(fields);
+
 	if (Stream_GetRemainingLength(s) < 8)
-		return -1;
+	{
+		WLog_ERR(TAG, "Short NTLM_MESSAGE_FIELDS::header %" PRIuz ", expected %" PRIuz,
+		         Stream_GetRemainingLength(s), 8);
+		return FALSE;
+	}
+
+	ntlm_free_message_fields_buffer(fields);
 
 	Stream_Read_UINT16(s, fields->Len);          /* Len (2 bytes) */
 	Stream_Read_UINT16(s, fields->MaxLen);       /* MaxLen (2 bytes) */
 	Stream_Read_UINT32(s, fields->BufferOffset); /* BufferOffset (4 bytes) */
-	return 1;
+	return TRUE;
 }
 
-static void ntlm_write_message_fields(wStream* s, NTLM_MESSAGE_FIELDS* fields)
+static BOOL ntlm_write_message_fields(wStream* s, const NTLM_MESSAGE_FIELDS* fields)
 {
+	UINT16 MaxLen;
+	WINPR_ASSERT(s);
+	WINPR_ASSERT(fields);
+
+	MaxLen = fields->MaxLen;
 	if (fields->MaxLen < 1)
-		fields->MaxLen = fields->Len;
+		MaxLen = fields->Len;
 
+	if (Stream_GetRemainingCapacity(s) < 8)
+	{
+		WLog_ERR(TAG, "Short NTLM_MESSAGE_FIELDS::header %" PRIuz ", expected %" PRIuz,
+		         Stream_GetRemainingCapacity(s), 8);
+		return FALSE;
+	}
 	Stream_Write_UINT16(s, fields->Len);          /* Len (2 bytes) */
-	Stream_Write_UINT16(s, fields->MaxLen);       /* MaxLen (2 bytes) */
+	Stream_Write_UINT16(s, MaxLen);               /* MaxLen (2 bytes) */
 	Stream_Write_UINT32(s, fields->BufferOffset); /* BufferOffset (4 bytes) */
+	return TRUE;
 }
 
-static int ntlm_read_message_fields_buffer(wStream* s, NTLM_MESSAGE_FIELDS* fields)
+static BOOL ntlm_read_message_fields_buffer(wStream* s, NTLM_MESSAGE_FIELDS* fields)
 {
+	WINPR_ASSERT(s);
+	WINPR_ASSERT(fields);
+
 	if (fields->Len > 0)
 	{
 		const UINT32 offset = fields->BufferOffset + fields->Len;
 
 		if (fields->BufferOffset > UINT32_MAX - fields->Len)
-			return -1;
+		{
+			WLog_ERR(TAG,
+			         "NTLM_MESSAGE_FIELDS::BufferOffset %" PRIu32
+			         " too large, maximum allowed is %" PRIu32,
+			         fields->BufferOffset, UINT32_MAX - fields->Len);
+			return FALSE;
+		}
 
 		if (offset > Stream_Length(s))
-			return -1;
+		{
+			WLog_ERR(TAG,
+			         "NTLM_MESSAGE_FIELDS::Buffer offset %" PRIu32 " beyond received data %" PRIuz,
+			         offset, Stream_Length(s));
+			return FALSE;
+		}
 
 		fields->Buffer = (PBYTE)malloc(fields->Len);
 
 		if (!fields->Buffer)
-			return -1;
+		{
+			WLog_ERR(TAG, "NTLM_MESSAGE_FIELDS::Buffer allocation of %" PRIu16 "bytes failed",
+			         fields->Len);
+			return FALSE;
+		}
 
 		Stream_SetPosition(s, fields->BufferOffset);
 		Stream_Read(s, fields->Buffer, fields->Len);
 	}
 
-	return 1;
+	return TRUE;
 }
 
-static void ntlm_write_message_fields_buffer(wStream* s, NTLM_MESSAGE_FIELDS* fields)
+static BOOL ntlm_write_message_fields_buffer(wStream* s, const NTLM_MESSAGE_FIELDS* fields)
 {
+	WINPR_ASSERT(s);
+	WINPR_ASSERT(fields);
+
 	if (fields->Len > 0)
 	{
 		Stream_SetPosition(s, fields->BufferOffset);
+		if (Stream_GetRemainingCapacity(s) < fields->Len)
+		{
+			WLog_ERR(TAG, "Short NTLM_MESSAGE_FIELDS::Len %" PRIuz ", expected %" PRIu16,
+			         Stream_GetRemainingCapacity(s), fields->Len);
+			return FALSE;
+		}
 		Stream_Write(s, fields->Buffer, fields->Len);
 	}
+	return TRUE;
 }
 
-static void ntlm_free_message_fields_buffer(NTLM_MESSAGE_FIELDS* fields)
+void ntlm_free_message_fields_buffer(NTLM_MESSAGE_FIELDS* fields)
 {
 	if (fields)
 	{
@@ -184,122 +430,208 @@ static void ntlm_free_message_fields_buffer(NTLM_MESSAGE_FIELDS* fields)
 	}
 }
 
-#ifdef WITH_DEBUG_NTLM
-static void ntlm_print_message_fields(NTLM_MESSAGE_FIELDS* fields, const char* name)
+static BOOL ntlm_read_negotiate_flags(wStream* s, UINT32* flags, UINT32 required, const char* name)
 {
-	WLog_DBG(TAG, "%s (Len: %" PRIu16 " MaxLen: %" PRIu16 " BufferOffset: %" PRIu32 ")", name,
-	         fields->Len, fields->MaxLen, fields->BufferOffset);
+	UINT32 NegotiateFlags = 0;
+	char buffer[1024] = { 0 };
+	WINPR_ASSERT(s);
+	WINPR_ASSERT(flags);
+	WINPR_ASSERT(name);
 
-	if (fields->Len > 0)
-		winpr_HexDump(TAG, WLOG_DEBUG, fields->Buffer, fields->Len);
+	if (Stream_GetRemainingLength(s) < 4)
+	{
+		WLog_ERR(TAG, "%s::NegotiateFlags expected 4bytes, have %" PRIuz "bytes", name,
+		         Stream_GetRemainingLength(s));
+		return FALSE;
+	}
+
+	Stream_Read_UINT32(s, NegotiateFlags); /* NegotiateFlags (4 bytes) */
+
+	if ((NegotiateFlags & required) != required)
+	{
+		WLog_ERR(TAG, "%s::NegotiateFlags invalid flags 0x08%" PRIx32 ", 0x%08" PRIx32 " required",
+		         name, NegotiateFlags, required);
+		return FALSE;
+	}
+
+	WLog_DBG(TAG, "Read flags %s",
+	         ntlm_negotiate_flags_string(buffer, ARRAYSIZE(buffer), NegotiateFlags));
+	*flags = NegotiateFlags;
+	return TRUE;
+}
+
+static BOOL ntlm_write_negotiate_flags(wStream* s, UINT32 flags, const char* name)
+{
+	char buffer[1024] = { 0 };
+	WINPR_ASSERT(s);
+	WINPR_ASSERT(name);
+
+	if (Stream_GetRemainingCapacity(s) < 4)
+	{
+		WLog_ERR(TAG, "%s::NegotiateFlags expected 4bytes, have %" PRIuz "bytes", name,
+		         Stream_GetRemainingCapacity(s));
+		return FALSE;
+	}
+
+	WLog_DBG(TAG, "Write flags %s", ntlm_negotiate_flags_string(buffer, ARRAYSIZE(buffer), flags));
+	Stream_Write_UINT32(s, flags); /* NegotiateFlags (4 bytes) */
+	return TRUE;
+}
+
+static BOOL ntlm_read_message_integrity_check(wStream* s, size_t* offset, BYTE* data, size_t size,
+                                              const char* name)
+{
+	WINPR_ASSERT(s);
+	WINPR_ASSERT(offset);
+	WINPR_ASSERT(data);
+	WINPR_ASSERT(size == WINPR_MD5_DIGEST_LENGTH);
+	WINPR_ASSERT(name);
+
+	*offset = Stream_GetPosition(s);
+
+	if (Stream_GetRemainingLength(s) < size)
+	{
+		WLog_ERR(TAG,
+		         "%s::MessageIntegrityCheckOffset expected %" PRIuz "bytes, got "
+		         "%" PRIuz "byets",
+		         name, size, Stream_GetRemainingLength(s));
+		return FALSE;
+	}
+
+	Stream_Read(s, data, size);
+	return TRUE;
+}
+
+static BOOL ntlm_write_message_integrity_check(wStream* s, size_t offset, const BYTE* data,
+                                               size_t size, const char* name)
+{
+	size_t pos;
+
+	WINPR_ASSERT(s);
+	WINPR_ASSERT(data);
+	WINPR_ASSERT(size == WINPR_MD5_DIGEST_LENGTH);
+	WINPR_ASSERT(name);
+
+	pos = Stream_GetPosition(s);
+
+	if (offset + size > Stream_Capacity(s))
+	{
+		WLog_ERR(TAG,
+		         "%s::MessageIntegrityCheck invalid offset[length] %" PRIuz "[%" PRIuz
+		         "], got %" PRIuz,
+		         name, offset, size, Stream_GetRemainingCapacity(s));
+		return FALSE;
+	}
+	Stream_SetPosition(s, offset);
+	if (Stream_GetRemainingCapacity(s) < size)
+	{
+		WLog_ERR(TAG, "%s::MessageIntegrityCheck expected %" PRIuz "bytes, got %" PRIuz "bytes",
+		         name, size, Stream_GetRemainingCapacity(s));
+		return FALSE;
+	}
+
+	Stream_Write(s, data, size);
+	Stream_SetPosition(s, pos);
+	return TRUE;
 }
-#endif
 
 SECURITY_STATUS ntlm_read_NegotiateMessage(NTLM_CONTEXT* context, PSecBuffer buffer)
 {
+	wStream sbuffer;
 	wStream* s;
 	size_t length;
+	const NTLM_NEGOTIATE_MESSAGE empty = { 0 };
 	NTLM_NEGOTIATE_MESSAGE* message;
+
+	WINPR_ASSERT(context);
+	WINPR_ASSERT(buffer);
+
 	message = &context->NEGOTIATE_MESSAGE;
-	ZeroMemory(message, sizeof(NTLM_NEGOTIATE_MESSAGE));
-	s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);
+	WINPR_ASSERT(message);
 
-	if (!s)
-		return SEC_E_INTERNAL_ERROR;
+	*message = empty;
 
-	if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)
-	{
-		Stream_Free(s, FALSE);
-		return SEC_E_INVALID_TOKEN;
-	}
+	s = Stream_StaticConstInit(&sbuffer, buffer->pvBuffer, buffer->cbBuffer);
 
-	if (message->MessageType != MESSAGE_TYPE_NEGOTIATE)
-	{
-		Stream_Free(s, FALSE);
-		return SEC_E_INVALID_TOKEN;
-	}
+	if (!s)
+		return SEC_E_INTERNAL_ERROR;
 
-	if (Stream_GetRemainingLength(s) < 4)
-	{
-		Stream_Free(s, FALSE);
+	if (!ntlm_read_message_header(s, &message->header, MESSAGE_TYPE_NEGOTIATE))
 		return SEC_E_INVALID_TOKEN;
-	}
-	Stream_Read_UINT32(s, message->NegotiateFlags); /* NegotiateFlags (4 bytes) */
 
-	if (!((message->NegotiateFlags & NTLMSSP_REQUEST_TARGET) &&
-	      (message->NegotiateFlags & NTLMSSP_NEGOTIATE_NTLM) &&
-	      (message->NegotiateFlags & NTLMSSP_NEGOTIATE_UNICODE)))
-	{
-		Stream_Free(s, FALSE);
+	if (!ntlm_read_negotiate_flags(s, &message->NegotiateFlags,
+	                               NTLMSSP_REQUEST_TARGET | NTLMSSP_NEGOTIATE_NTLM |
+	                                   NTLMSSP_NEGOTIATE_UNICODE,
+	                               "NTLM_NEGOTIATE_MESSAGE"))
 		return SEC_E_INVALID_TOKEN;
-	}
 
 	context->NegotiateFlags = message->NegotiateFlags;
 
 	/* only set if NTLMSSP_NEGOTIATE_DOMAIN_SUPPLIED is set */
-
-	if (ntlm_read_message_fields(s, &(message->DomainName)) < 0) /* DomainNameFields (8 bytes) */
+	// if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_DOMAIN_SUPPLIED)
 	{
-		Stream_Free(s, FALSE);
-		return SEC_E_INVALID_TOKEN;
+		if (!ntlm_read_message_fields(s, &(message->DomainName))) /* DomainNameFields (8 bytes) */
+			return SEC_E_INVALID_TOKEN;
 	}
 
 	/* only set if NTLMSSP_NEGOTIATE_WORKSTATION_SUPPLIED is set */
-
-	if (ntlm_read_message_fields(s, &(message->Workstation)) < 0) /* WorkstationFields (8 bytes) */
+	// if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_WORKSTATION_SUPPLIED)
 	{
-		Stream_Free(s, FALSE);
-		return SEC_E_INVALID_TOKEN;
+		if (!ntlm_read_message_fields(s, &(message->Workstation))) /* WorkstationFields (8 bytes) */
+			return SEC_E_INVALID_TOKEN;
 	}
 
 	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
 	{
-		if (ntlm_read_version_info(s, &(message->Version)) < 0) /* Version (8 bytes) */
-		{
-			Stream_Free(s, FALSE);
+		if (!ntlm_read_version_info(s, &(message->Version))) /* Version (8 bytes) */
 			return SEC_E_INVALID_TOKEN;
-		}
 	}
 
+		if (!ntlm_read_message_fields_buffer(s, &message->DomainName))
+			return SEC_E_INVALID_TOKEN;
+
+		if (!ntlm_read_message_fields_buffer(s, &message->Workstation))
+			return SEC_E_INVALID_TOKEN;
+
 	length = Stream_GetPosition(s);
-	buffer->cbBuffer = length;
+	WINPR_ASSERT(length <= ULONG_MAX);
+	buffer->cbBuffer = (ULONG)length;
 
-	if (!sspi_SecBufferAlloc(&context->NegotiateMessage, length))
-	{
-		Stream_Free(s, FALSE);
+	if (!sspi_SecBufferAlloc(&context->NegotiateMessage, (ULONG)length))
 		return SEC_E_INTERNAL_ERROR;
-	}
 
 	CopyMemory(context->NegotiateMessage.pvBuffer, buffer->pvBuffer, buffer->cbBuffer);
 	context->NegotiateMessage.BufferType = buffer->BufferType;
-#ifdef WITH_DEBUG_NTLM
-	WLog_DBG(TAG, "NEGOTIATE_MESSAGE (length = %" PRIu32 ")", context->NegotiateMessage.cbBuffer);
-	winpr_HexDump(TAG, WLOG_DEBUG, context->NegotiateMessage.pvBuffer,
-	              context->NegotiateMessage.cbBuffer);
-	ntlm_print_negotiate_flags(message->NegotiateFlags);
-
-	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
-		ntlm_print_version_info(&(message->Version));
-
+#if defined(WITH_DEBUG_NTLM)
+	ntlm_print_negotiate_message(&context->NegotiateMessage, message);
 #endif
-	context->state = NTLM_STATE_CHALLENGE;
-	Stream_Free(s, FALSE);
+	ntlm_change_state(context, NTLM_STATE_CHALLENGE);
 	return SEC_I_CONTINUE_NEEDED;
 }
 
 SECURITY_STATUS ntlm_write_NegotiateMessage(NTLM_CONTEXT* context, PSecBuffer buffer)
 {
+	wStream sbuffer;
 	wStream* s;
 	size_t length;
+	const NTLM_NEGOTIATE_MESSAGE empty = { 0 };
 	NTLM_NEGOTIATE_MESSAGE* message;
+
+	WINPR_ASSERT(context);
+	WINPR_ASSERT(buffer);
+
 	message = &context->NEGOTIATE_MESSAGE;
-	ZeroMemory(message, sizeof(NTLM_NEGOTIATE_MESSAGE));
-	s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);
+	WINPR_ASSERT(message);
+
+	*message = empty;
+
+	s = Stream_StaticInit2(&sbuffer, buffer->pvBuffer, buffer->cbBuffer);
 
 	if (!s)
 		return SEC_E_INTERNAL_ERROR;
 
-	ntlm_populate_message_header((NTLM_MESSAGE_HEADER*)message, MESSAGE_TYPE_NEGOTIATE);
+	if (!ntlm_populate_message_header(&message->header, MESSAGE_TYPE_NEGOTIATE))
+		return SEC_E_INTERNAL_ERROR;
 
 	if (context->NTLMv2)
 	{
@@ -329,96 +661,101 @@ SECURITY_STATUS ntlm_write_NegotiateMessage(NTLM_CONTEXT* context, PSecBuffer bu
 
 	context->NegotiateFlags = message->NegotiateFlags;
 	/* Message Header (12 bytes) */
-	ntlm_write_message_header(s, (NTLM_MESSAGE_HEADER*)message);
-	Stream_Write_UINT32(s, message->NegotiateFlags); /* NegotiateFlags (4 bytes) */
+	if (!ntlm_write_message_header(s, &message->header))
+		return SEC_E_INTERNAL_ERROR;
+
+	if (!ntlm_write_negotiate_flags(s, message->NegotiateFlags, "NTLM_NEGOTIATE_MESSAGE"))
+		return SEC_E_INTERNAL_ERROR;
+
 	/* only set if NTLMSSP_NEGOTIATE_DOMAIN_SUPPLIED is set */
 	/* DomainNameFields (8 bytes) */
-	ntlm_write_message_fields(s, &(message->DomainName));
+		if (!ntlm_write_message_fields(s, &(message->DomainName)))
+			return SEC_E_INTERNAL_ERROR;
+
 	/* only set if NTLMSSP_NEGOTIATE_WORKSTATION_SUPPLIED is set */
 	/* WorkstationFields (8 bytes) */
-	ntlm_write_message_fields(s, &(message->Workstation));
+		if (!ntlm_write_message_fields(s, &(message->Workstation)))
+			return SEC_E_INTERNAL_ERROR;
 
 	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
-		ntlm_write_version_info(s, &(message->Version));
+	{
+		if (!ntlm_write_version_info(s, &(message->Version)))
+			return SEC_E_INTERNAL_ERROR;
+	}
 
 	length = Stream_GetPosition(s);
-	buffer->cbBuffer = length;
+	WINPR_ASSERT(length <= ULONG_MAX);
+	buffer->cbBuffer = (ULONG)length;
 
-	if (!sspi_SecBufferAlloc(&context->NegotiateMessage, length))
-	{
-		Stream_Free(s, FALSE);
+	if (!sspi_SecBufferAlloc(&context->NegotiateMessage, (ULONG)length))
 		return SEC_E_INTERNAL_ERROR;
-	}
 
 	CopyMemory(context->NegotiateMessage.pvBuffer, buffer->pvBuffer, buffer->cbBuffer);
 	context->NegotiateMessage.BufferType = buffer->BufferType;
-#ifdef WITH_DEBUG_NTLM
-	WLog_DBG(TAG, "NEGOTIATE_MESSAGE (length = %d)", length);
-	winpr_HexDump(TAG, WLOG_DEBUG, Stream_Buffer(s), length);
-
-	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
-		ntlm_print_version_info(&(message->Version));
-
+#if defined(WITH_DEBUG_NTLM)
+	ntlm_print_negotiate_message(&context->NegotiateMessage, message);
 #endif
-	context->state = NTLM_STATE_CHALLENGE;
-	Stream_Free(s, FALSE);
+	ntlm_change_state(context, NTLM_STATE_CHALLENGE);
 	return SEC_I_CONTINUE_NEEDED;
 }
 
 SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)
 {
 	SECURITY_STATUS status = SEC_E_INVALID_TOKEN;
+	wStream sbuffer;
 	wStream* s;
 	size_t length;
 	size_t StartOffset;
 	size_t PayloadOffset;
 	NTLM_AV_PAIR* AvTimestamp;
+	const NTLM_CHALLENGE_MESSAGE empty = { 0 };
 	NTLM_CHALLENGE_MESSAGE* message;
+
 	if (!context || !buffer)
 		return SEC_E_INTERNAL_ERROR;
 
 	ntlm_generate_client_challenge(context);
 	message = &context->CHALLENGE_MESSAGE;
-	ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));
-	s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);
+	WINPR_ASSERT(message);
+
+	*message = empty;
+
+	s = Stream_StaticConstInit(&sbuffer, buffer->pvBuffer, buffer->cbBuffer);
 
 	if (!s)
 		return SEC_E_INTERNAL_ERROR;
 
 	StartOffset = Stream_GetPosition(s);
 
-	if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)
-		goto fail;
-
-	if (message->MessageType != MESSAGE_TYPE_CHALLENGE)
+	if (!ntlm_read_message_header(s, &message->header, MESSAGE_TYPE_CHALLENGE))
 		goto fail;
 
-	if (ntlm_read_message_fields(s, &(message->TargetName)) < 0) /* TargetNameFields (8 bytes) */
+	if (!ntlm_read_message_fields(s, &(message->TargetName))) /* TargetNameFields (8 bytes) */
 		goto fail;
 
-	if (Stream_GetRemainingLength(s) < 4)
+	if (!ntlm_read_negotiate_flags(s, &message->NegotiateFlags, 0, "NTLM_CHALLENGE_MESSAGE"))
 		goto fail;
 
-	Stream_Read_UINT32(s, message->NegotiateFlags); /* NegotiateFlags (4 bytes) */
 	context->NegotiateFlags = message->NegotiateFlags;
 
-	if (Stream_GetRemainingLength(s) < 8)
+	if (Stream_GetRemainingLength(s) < 16)
+	{
+		WLog_ERR(TAG,
+		         "NTLM_CHALLENGE_MESSAGE::ServerChallenge expected 16bytes, got %" PRIuz "bytes",
+		         Stream_GetRemainingLength(s));
 		goto fail;
+	}
 
 	Stream_Read(s, message->ServerChallenge, 8); /* ServerChallenge (8 bytes) */
 	CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);
-
-	if (Stream_GetRemainingLength(s) < 8)
-		goto fail;
-
 	Stream_Read(s, message->Reserved, 8); /* Reserved (8 bytes), should be ignored */
 
-	if (ntlm_read_message_fields(s, &(message->TargetInfo)) < 0) /* TargetInfoFields (8 bytes) */
+	if (!ntlm_read_message_fields(s, &(message->TargetInfo))) /* TargetInfoFields (8 bytes) */
 		goto fail;
 
 	if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
 	{
-		if (ntlm_read_version_info(s, &(message->Version)) < 0) /* Version (8 bytes) */
+		if (!ntlm_read_version_info(s, &(message->Version))) /* Version (8 bytes) */
 			goto fail;
 	}
 
@@ -428,15 +765,15 @@ SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buf
 	status = SEC_E_INTERNAL_ERROR;
 	if (message->TargetName.Len > 0)
 	{
-		if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)
+		if (!ntlm_read_message_fields_buffer(s, &(message->TargetName)))
 			goto fail;
 	}
 
 	if (message->TargetInfo.Len > 0)
 	{
 		size_t cbAvTimestamp;
 
-		if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)
+		if (!ntlm_read_message_fields_buffer(s, &(message->TargetInfo)))
 			goto fail;
 
 		context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;
@@ -462,36 +799,19 @@ SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buf
 	if (length > buffer->cbBuffer)
 		goto fail;
 
-	if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))
+	if (!sspi_SecBufferAlloc(&context->ChallengeMessage, (ULONG)length))
 		goto fail;
 
 	if (context->ChallengeMessage.pvBuffer)
 		CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);
-#ifdef WITH_DEBUG_NTLM
-	WLog_DBG(TAG, "CHALLENGE_MESSAGE (length = %d)", length);
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,
-	              context->ChallengeMessage.cbBuffer);
-	ntlm_print_negotiate_flags(context->NegotiateFlags);
-
-	if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
-		ntlm_print_version_info(&(message->Version));
-
-	ntlm_print_message_fields(&(message->TargetName), "TargetName");
-	ntlm_print_message_fields(&(message->TargetInfo), "TargetInfo");
-
-	if (context->ChallengeTargetInfo.cbBuffer > 0)
-	{
-		WLog_DBG(TAG, "ChallengeTargetInfo (%" PRIu32 "):", context->ChallengeTargetInfo.cbBuffer);
-		ntlm_print_av_pair_list(context->ChallengeTargetInfo.pvBuffer,
-		                        context->ChallengeTargetInfo.cbBuffer);
-	}
-
+#if defined(WITH_DEBUG_NTLM)
+	ntlm_print_challenge_message(&context->ChallengeMessage, message, NULL);
 #endif
 	/* AV_PAIRs */
 
 	if (context->NTLMv2)
 	{
-		if (ntlm_construct_authenticate_target_info(context) < 0)
+		if (!ntlm_construct_authenticate_target_info(context))
 			goto fail;
 
 		sspi_SecBufferFree(&context->ChallengeTargetInfo);
@@ -501,65 +821,56 @@ SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buf
 
 	ntlm_generate_timestamp(context); /* Timestamp */
 
-	if (ntlm_compute_lm_v2_response(context) < 0) /* LmChallengeResponse */
+	if (!ntlm_compute_lm_v2_response(context)) /* LmChallengeResponse */
 		goto fail;
 
-	if (ntlm_compute_ntlm_v2_response(context) < 0) /* NtChallengeResponse */
+	if (!ntlm_compute_ntlm_v2_response(context)) /* NtChallengeResponse */
 		goto fail;
 
 	ntlm_generate_key_exchange_key(context);     /* KeyExchangeKey */
 	ntlm_generate_random_session_key(context);   /* RandomSessionKey */
 	ntlm_generate_exported_session_key(context); /* ExportedSessionKey */
 	ntlm_encrypt_random_session_key(context);    /* EncryptedRandomSessionKey */
 	/* Generate signing keys */
-	ntlm_generate_client_signing_key(context);
-	ntlm_generate_server_signing_key(context);
+	if (!ntlm_generate_client_signing_key(context))
+		goto fail;
+	if (!ntlm_generate_server_signing_key(context))
+		goto fail;
 	/* Generate sealing keys */
-	ntlm_generate_client_sealing_key(context);
-	ntlm_generate_server_sealing_key(context);
+	if (!ntlm_generate_client_sealing_key(context))
+		goto fail;
+	if (!ntlm_generate_server_sealing_key(context))
+		goto fail;
 	/* Initialize RC4 seal state using client sealing key */
 	ntlm_init_rc4_seal_states(context);
-#ifdef WITH_DEBUG_NTLM
-	WLog_DBG(TAG, "ClientChallenge");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ClientChallenge, 8);
-	WLog_DBG(TAG, "ServerChallenge");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ServerChallenge, 8);
-	WLog_DBG(TAG, "SessionBaseKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->SessionBaseKey, 16);
-	WLog_DBG(TAG, "KeyExchangeKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->KeyExchangeKey, 16);
-	WLog_DBG(TAG, "ExportedSessionKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ExportedSessionKey, 16);
-	WLog_DBG(TAG, "RandomSessionKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->RandomSessionKey, 16);
-	WLog_DBG(TAG, "ClientSigningKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ClientSigningKey, 16);
-	WLog_DBG(TAG, "ClientSealingKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ClientSealingKey, 16);
-	WLog_DBG(TAG, "ServerSigningKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ServerSigningKey, 16);
-	WLog_DBG(TAG, "ServerSealingKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ServerSealingKey, 16);
-	WLog_DBG(TAG, "Timestamp");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->Timestamp, 8);
+#if defined(WITH_DEBUG_NTLM)
+	ntlm_print_authentication_complete(context);
 #endif
-	context->state = NTLM_STATE_AUTHENTICATE;
+	ntlm_change_state(context, NTLM_STATE_AUTHENTICATE);
 	status = SEC_I_CONTINUE_NEEDED;
 fail:
 	ntlm_free_message_fields_buffer(&(message->TargetName));
-	Stream_Free(s, FALSE);
 	return status;
 }
 
 SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)
 {
+	wStream sbuffer;
 	wStream* s;
 	size_t length;
 	UINT32 PayloadOffset;
+	const NTLM_CHALLENGE_MESSAGE empty = { 0 };
 	NTLM_CHALLENGE_MESSAGE* message;
+
+	WINPR_ASSERT(context);
+	WINPR_ASSERT(buffer);
+
 	message = &context->CHALLENGE_MESSAGE;
-	ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));
-	s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);
+	WINPR_ASSERT(message);
+
+	*message = empty;
+
+	s = Stream_StaticInit2(&sbuffer, buffer->pvBuffer, buffer->cbBuffer);
 
 	if (!s)
 		return SEC_E_INTERNAL_ERROR;
@@ -568,17 +879,17 @@ SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer bu
 	ntlm_generate_server_challenge(context);    /* Server Challenge */
 	ntlm_generate_timestamp(context);           /* Timestamp */
 
-	if (ntlm_construct_challenge_target_info(context) < 0) /* TargetInfo */
-	{
-		Stream_Free(s, FALSE);
+	if (!ntlm_construct_challenge_target_info(context)) /* TargetInfo */
 		return SEC_E_INTERNAL_ERROR;
-	}
 
 	CopyMemory(message->ServerChallenge, context->ServerChallenge, 8); /* ServerChallenge */
 	message->NegotiateFlags = context->NegotiateFlags;
-	ntlm_populate_message_header((NTLM_MESSAGE_HEADER*)message, MESSAGE_TYPE_CHALLENGE);
+	if (!ntlm_populate_message_header(&message->header, MESSAGE_TYPE_CHALLENGE))
+		return SEC_E_INTERNAL_ERROR;
+
 	/* Message Header (12 bytes) */
-	ntlm_write_message_header(s, (NTLM_MESSAGE_HEADER*)message);
+	if (!ntlm_write_message_header(s, &message->header))
+		return SEC_E_INTERNAL_ERROR;
 
 	if (message->NegotiateFlags & NTLMSSP_REQUEST_TARGET)
 	{
@@ -602,99 +913,119 @@ SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer bu
 	message->TargetName.BufferOffset = PayloadOffset;
 	message->TargetInfo.BufferOffset = message->TargetName.BufferOffset + message->TargetName.Len;
 	/* TargetNameFields (8 bytes) */
-	ntlm_write_message_fields(s, &(message->TargetName));
-	Stream_Write_UINT32(s, message->NegotiateFlags); /* NegotiateFlags (4 bytes) */
+	if (!ntlm_write_message_fields(s, &(message->TargetName)))
+		return SEC_E_INTERNAL_ERROR;
+
+	if (!ntlm_write_negotiate_flags(s, message->NegotiateFlags, "NTLM_CHALLENGE_MESSAGE"))
+		return SEC_E_INTERNAL_ERROR;
+
+	if (Stream_GetRemainingCapacity(s) < 16)
+	{
+		WLog_ERR(TAG,
+		         "NTLM_CHALLENGE_MESSAGE::ServerChallenge expected 16bytes, got %" PRIuz "bytes",
+		         Stream_GetRemainingCapacity(s));
+		return SEC_E_INTERNAL_ERROR;
+	}
+
 	Stream_Write(s, message->ServerChallenge, 8);    /* ServerChallenge (8 bytes) */
 	Stream_Write(s, message->Reserved, 8);           /* Reserved (8 bytes), should be ignored */
+
 	/* TargetInfoFields (8 bytes) */
-	ntlm_write_message_fields(s, &(message->TargetInfo));
+	if (!ntlm_write_message_fields(s, &(message->TargetInfo)))
+		return SEC_E_INTERNAL_ERROR;
 
 	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
-		ntlm_write_version_info(s, &(message->Version)); /* Version (8 bytes) */
+	{
+		if (!ntlm_write_version_info(s, &(message->Version))) /* Version (8 bytes) */
+			return SEC_E_INTERNAL_ERROR;
+	}
 
 	/* Payload (variable) */
-
 	if (message->NegotiateFlags & NTLMSSP_REQUEST_TARGET)
-		ntlm_write_message_fields_buffer(s, &(message->TargetName));
+	{
+		if (!ntlm_write_message_fields_buffer(s, &(message->TargetName)))
+			return SEC_E_INTERNAL_ERROR;
+	}
 
 	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_TARGET_INFO)
-		ntlm_write_message_fields_buffer(s, &(message->TargetInfo));
+	{
+		if (!ntlm_write_message_fields_buffer(s, &(message->TargetInfo)))
+			return SEC_E_INTERNAL_ERROR;
+	}
 
 	length = Stream_GetPosition(s);
-	buffer->cbBuffer = length;
+	WINPR_ASSERT(length <= ULONG_MAX);
+	buffer->cbBuffer = (ULONG)length;
 
-	if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))
-	{
-		Stream_Free(s, FALSE);
+	if (!sspi_SecBufferAlloc(&context->ChallengeMessage, (ULONG)length))
 		return SEC_E_INTERNAL_ERROR;
-	}
 
 	CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s), length);
-#ifdef WITH_DEBUG_NTLM
-	WLog_DBG(TAG, "CHALLENGE_MESSAGE (length = %d)", length);
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,
-	              context->ChallengeMessage.cbBuffer);
-	ntlm_print_negotiate_flags(message->NegotiateFlags);
-
-	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
-		ntlm_print_version_info(&(message->Version));
-
-	ntlm_print_message_fields(&(message->TargetName), "TargetName");
-	ntlm_print_message_fields(&(message->TargetInfo), "TargetInfo");
+#if defined(WITH_DEBUG_NTLM)
+	ntlm_print_challenge_message(&context->ChallengeMessage, message,
+	                             &context->ChallengeTargetInfo);
 #endif
-	context->state = NTLM_STATE_AUTHENTICATE;
-	Stream_Free(s, FALSE);
+	ntlm_change_state(context, NTLM_STATE_AUTHENTICATE);
 	return SEC_I_CONTINUE_NEEDED;
 }
 
 SECURITY_STATUS ntlm_read_AuthenticateMessage(NTLM_CONTEXT* context, PSecBuffer buffer)
 {
 	SECURITY_STATUS status = SEC_E_INVALID_TOKEN;
+	wStream sbuffer;
 	wStream* s;
 	size_t length;
 	UINT32 flags = 0;
 	NTLM_AV_PAIR* AvFlags = NULL;
-	UINT32 PayloadBufferOffset;
+	size_t PayloadBufferOffset;
+	const NTLM_AUTHENTICATE_MESSAGE empty = { 0 };
 	NTLM_AUTHENTICATE_MESSAGE* message;
-	SSPI_CREDENTIALS* credentials = context->credentials;
+	SSPI_CREDENTIALS* credentials;
+
+	WINPR_ASSERT(context);
+	WINPR_ASSERT(buffer);
+
+	credentials = context->credentials;
+	WINPR_ASSERT(credentials);
 
 	message = &context->AUTHENTICATE_MESSAGE;
-	ZeroMemory(message, sizeof(NTLM_AUTHENTICATE_MESSAGE));
-	s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);
+	WINPR_ASSERT(message);
+
+	*message = empty;
+
+	s = Stream_StaticConstInit(&sbuffer, buffer->pvBuffer, buffer->cbBuffer);
 
 	if (!s)
 		return SEC_E_INTERNAL_ERROR;
 
-	if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)
+	if (!ntlm_read_message_header(s, &message->header, MESSAGE_TYPE_AUTHENTICATE))
 		goto fail;
 
-	if (message->MessageType != MESSAGE_TYPE_AUTHENTICATE)
+	if (!ntlm_read_message_fields(
+	        s, &(message->LmChallengeResponse))) /* LmChallengeResponseFields (8 bytes) */
 		goto fail;
 
-	if (ntlm_read_message_fields(s, &(message->LmChallengeResponse)) <
-	    0) /* LmChallengeResponseFields (8 bytes) */
+	if (!ntlm_read_message_fields(
+	        s, &(message->NtChallengeResponse))) /* NtChallengeResponseFields (8 bytes) */
 		goto fail;
 
-	if (ntlm_read_message_fields(s, &(message->NtChallengeResponse)) <
-	    0) /* NtChallengeResponseFields (8 bytes) */
+	if (!ntlm_read_message_fields(s, &(message->DomainName))) /* DomainNameFields (8 bytes) */
 		goto fail;
 
-	if (ntlm_read_message_fields(s, &(message->DomainName)) < 0) /* DomainNameFields (8 bytes) */
+	if (!ntlm_read_message_fields(s, &(message->UserName))) /* UserNameFields (8 bytes) */
 		goto fail;
 
-	if (ntlm_read_message_fields(s, &(message->UserName)) < 0) /* UserNameFields (8 bytes) */
+	if (!ntlm_read_message_fields(s, &(message->Workstation))) /* WorkstationFields (8 bytes) */
 		goto fail;
 
-	if (ntlm_read_message_fields(s, &(message->Workstation)) < 0) /* WorkstationFields (8 bytes) */
+	if (!ntlm_read_message_fields(
+	        s,
+	        &(message->EncryptedRandomSessionKey))) /* EncryptedRandomSessionKeyFields (8 bytes) */
 		goto fail;
 
-	if (ntlm_read_message_fields(s, &(message->EncryptedRandomSessionKey)) <
-	    0) /* EncryptedRandomSessionKeyFields (8 bytes) */
+	if (!ntlm_read_negotiate_flags(s, &message->NegotiateFlags, 0, "NTLM_AUTHENTICATE_MESSAGE"))
 		goto fail;
 
-	if (Stream_GetRemainingLength(s) < 4)
-		goto fail;
-	Stream_Read_UINT32(s, message->NegotiateFlags); /* NegotiateFlags (4 bytes) */
 	context->NegotiateKeyExchange =
 	    (message->NegotiateFlags & NTLMSSP_NEGOTIATE_KEY_EXCH) ? TRUE : FALSE;
 
@@ -704,44 +1035,42 @@ SECURITY_STATUS ntlm_read_AuthenticateMessage(NTLM_CONTEXT* context, PSecBuffer
 
 	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
 	{
-		if (ntlm_read_version_info(s, &(message->Version)) < 0) /* Version (8 bytes) */
+		if (!ntlm_read_version_info(s, &(message->Version))) /* Version (8 bytes) */
 			goto fail;
 	}
 
 	PayloadBufferOffset = Stream_GetPosition(s);
 
 	status = SEC_E_INTERNAL_ERROR;
-	if (ntlm_read_message_fields_buffer(s, &(message->DomainName)) < 0) /* DomainName */
+	if (!ntlm_read_message_fields_buffer(s, &(message->DomainName))) /* DomainName */
 		goto fail;
 
-	if (ntlm_read_message_fields_buffer(s, &(message->UserName)) < 0) /* UserName */
+	if (!ntlm_read_message_fields_buffer(s, &(message->UserName))) /* UserName */
 		goto fail;
 
-	if (ntlm_read_message_fields_buffer(s, &(message->Workstation)) < 0) /* Workstation */
+	if (!ntlm_read_message_fields_buffer(s, &(message->Workstation))) /* Workstation */
 		goto fail;
 
-	if (ntlm_read_message_fields_buffer(s, &(message->LmChallengeResponse)) <
-	    0) /* LmChallengeResponse */
+	if (!ntlm_read_message_fields_buffer(s,
+	                                     &(message->LmChallengeResponse))) /* LmChallengeResponse */
 		goto fail;
 
-	if (ntlm_read_message_fields_buffer(s, &(message->NtChallengeResponse)) <
-	    0) /* NtChallengeResponse */
+	if (!ntlm_read_message_fields_buffer(s,
+	                                     &(message->NtChallengeResponse))) /* NtChallengeResponse */
 		goto fail;
 
 	if (message->NtChallengeResponse.Len > 0)
 	{
-		int rc;
 		size_t cbAvFlags;
-		wStream* snt =
-		    Stream_New(message->NtChallengeResponse.Buffer, message->NtChallengeResponse.Len);
+		wStream ssbuffer;
+		wStream* snt = Stream_StaticConstInit(&ssbuffer, message->NtChallengeResponse.Buffer,
+		                                      message->NtChallengeResponse.Len);
 
 		if (!snt)
 			goto fail;
 
 		status = SEC_E_INVALID_TOKEN;
-		rc = ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response));
-		Stream_Free(snt, FALSE);
-		if (rc < 0)
+		if (!ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response)))
 			goto fail;
 		status = SEC_E_INTERNAL_ERROR;
 
@@ -759,8 +1088,8 @@ SECURITY_STATUS ntlm_read_AuthenticateMessage(NTLM_CONTEXT* context, PSecBuffer
 			Data_Read_UINT32(ntlm_av_pair_get_value_pointer(AvFlags), flags);
 	}
 
-	if (ntlm_read_message_fields_buffer(s, &(message->EncryptedRandomSessionKey)) <
-	    0) /* EncryptedRandomSessionKey */
+	if (!ntlm_read_message_fields_buffer(
+	        s, &(message->EncryptedRandomSessionKey))) /* EncryptedRandomSessionKey */
 		goto fail;
 
 	if (message->EncryptedRandomSessionKey.Len > 0)
@@ -773,51 +1102,28 @@ SECURITY_STATUS ntlm_read_AuthenticateMessage(NTLM_CONTEXT* context, PSecBuffer
 	}
 
 	length = Stream_GetPosition(s);
+	WINPR_ASSERT(length <= ULONG_MAX);
 
-	if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, length))
+	if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, (ULONG)length))
 		goto fail;
 
 	CopyMemory(context->AuthenticateMessage.pvBuffer, Stream_Buffer(s), length);
-	buffer->cbBuffer = length;
+	buffer->cbBuffer = (ULONG)length;
 	Stream_SetPosition(s, PayloadBufferOffset);
 
 	if (flags & MSV_AV_FLAGS_MESSAGE_INTEGRITY_CHECK)
 	{
-		context->MessageIntegrityCheckOffset = (UINT32)Stream_GetPosition(s);
-
 		status = SEC_E_INVALID_TOKEN;
-		if (Stream_GetRemainingLength(s) < 16)
+		if (!ntlm_read_message_integrity_check(
+		        s, &context->MessageIntegrityCheckOffset, message->MessageIntegrityCheck,
+		        sizeof(message->MessageIntegrityCheck), "NTLM_AUTHENTICATE_MESSAGE"))
 			goto fail;
-
-		Stream_Read(s, message->MessageIntegrityCheck, 16);
 	}
 
 	status = SEC_E_INTERNAL_ERROR;
 
-#ifdef WITH_DEBUG_NTLM
-	WLog_DBG(TAG, "AUTHENTICATE_MESSAGE (length = %" PRIu32 ")",
-	         context->AuthenticateMessage.cbBuffer);
-	winpr_HexDump(TAG, WLOG_DEBUG, context->AuthenticateMessage.pvBuffer,
-	              context->AuthenticateMessage.cbBuffer);
-
-	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
-		ntlm_print_version_info(&(message->Version));
-
-	ntlm_print_message_fields(&(message->DomainName), "DomainName");
-	ntlm_print_message_fields(&(message->UserName), "UserName");
-	ntlm_print_message_fields(&(message->Workstation), "Workstation");
-	ntlm_print_message_fields(&(message->LmChallengeResponse), "LmChallengeResponse");
-	ntlm_print_message_fields(&(message->NtChallengeResponse), "NtChallengeResponse");
-	ntlm_print_message_fields(&(message->EncryptedRandomSessionKey), "EncryptedRandomSessionKey");
-	ntlm_print_av_pair_list(context->NTLMv2Response.Challenge.AvPairs,
-	                        context->NTLMv2Response.Challenge.cbAvPairs);
-
-	if (flags & MSV_AV_FLAGS_MESSAGE_INTEGRITY_CHECK)
-	{
-		WLog_DBG(TAG, "MessageIntegrityCheck:");
-		winpr_HexDump(TAG, WLOG_DEBUG, message->MessageIntegrityCheck, 16);
-	}
-
+#if defined(WITH_DEBUG_NTLM)
+	ntlm_print_authenticate_message(&context->AuthenticateMessage, message, flags, NULL);
 #endif
 
 	if (message->UserName.Len > 0)
@@ -843,13 +1149,11 @@ SECURITY_STATUS ntlm_read_AuthenticateMessage(NTLM_CONTEXT* context, PSecBuffer
 		credentials->identity.DomainLength = message->DomainName.Len / 2;
 	}
 
-	Stream_Free(s, FALSE);
 	/* Computations beyond this point require the NTLM hash of the password */
-	context->state = NTLM_STATE_COMPLETION;
+	ntlm_change_state(context, NTLM_STATE_COMPLETION);
 	return SEC_I_COMPLETE_NEEDED;
 
 fail:
-	Stream_Free(s, FALSE);
 	return status;
 }
 
@@ -862,14 +1166,26 @@ SECURITY_STATUS ntlm_read_AuthenticateMessage(NTLM_CONTEXT* context, PSecBuffer
 
 SECURITY_STATUS ntlm_write_AuthenticateMessage(NTLM_CONTEXT* context, PSecBuffer buffer)
 {
+	wStream sbuffer;
 	wStream* s;
 	size_t length;
 	UINT32 PayloadBufferOffset;
+	const NTLM_AUTHENTICATE_MESSAGE empty = { 0 };
 	NTLM_AUTHENTICATE_MESSAGE* message;
-	SSPI_CREDENTIALS* credentials = context->credentials;
+	SSPI_CREDENTIALS* credentials;
+
+	WINPR_ASSERT(context);
+	WINPR_ASSERT(buffer);
+
+	credentials = context->credentials;
+	WINPR_ASSERT(credentials);
+
 	message = &context->AUTHENTICATE_MESSAGE;
-	ZeroMemory(message, sizeof(NTLM_AUTHENTICATE_MESSAGE));
-	s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);
+	WINPR_ASSERT(message);
+
+	*message = empty;
+
+	s = Stream_StaticInit2(&sbuffer, buffer->pvBuffer, buffer->cbBuffer);
 
 	if (!s)
 		return SEC_E_INTERNAL_ERROR;
@@ -948,95 +1264,103 @@ SECURITY_STATUS ntlm_write_AuthenticateMessage(NTLM_CONTEXT* context, PSecBuffer
 	    message->LmChallengeResponse.BufferOffset + message->LmChallengeResponse.Len;
 	message->EncryptedRandomSessionKey.BufferOffset =
 	    message->NtChallengeResponse.BufferOffset + message->NtChallengeResponse.Len;
-	ntlm_populate_message_header((NTLM_MESSAGE_HEADER*)message, MESSAGE_TYPE_AUTHENTICATE);
-	ntlm_write_message_header(s, (NTLM_MESSAGE_HEADER*)message); /* Message Header (12 bytes) */
-	ntlm_write_message_fields(
-	    s, &(message->LmChallengeResponse)); /* LmChallengeResponseFields (8 bytes) */
-	ntlm_write_message_fields(
-	    s, &(message->NtChallengeResponse));               /* NtChallengeResponseFields (8 bytes) */
-	ntlm_write_message_fields(s, &(message->DomainName));  /* DomainNameFields (8 bytes) */
-	ntlm_write_message_fields(s, &(message->UserName));    /* UserNameFields (8 bytes) */
-	ntlm_write_message_fields(s, &(message->Workstation)); /* WorkstationFields (8 bytes) */
-	ntlm_write_message_fields(
-	    s, &(message->EncryptedRandomSessionKey));   /* EncryptedRandomSessionKeyFields (8 bytes) */
-	Stream_Write_UINT32(s, message->NegotiateFlags); /* NegotiateFlags (4 bytes) */
+	if (!ntlm_populate_message_header(&message->header, MESSAGE_TYPE_AUTHENTICATE))
+		return SEC_E_INVALID_TOKEN;
+	if (!ntlm_write_message_header(s, &message->header)) /* Message Header (12 bytes) */
+		return SEC_E_INTERNAL_ERROR;
+	if (!ntlm_write_message_fields(
+	        s, &(message->LmChallengeResponse))) /* LmChallengeResponseFields (8 bytes) */
+		return SEC_E_INTERNAL_ERROR;
+	if (!ntlm_write_message_fields(
+	        s, &(message->NtChallengeResponse))) /* NtChallengeResponseFields (8 bytes) */
+		return SEC_E_INTERNAL_ERROR;
+	if (!ntlm_write_message_fields(s, &(message->DomainName))) /* DomainNameFields (8 bytes) */
+		return SEC_E_INTERNAL_ERROR;
+	if (!ntlm_write_message_fields(s, &(message->UserName))) /* UserNameFields (8 bytes) */
+		return SEC_E_INTERNAL_ERROR;
+	if (!ntlm_write_message_fields(s, &(message->Workstation))) /* WorkstationFields (8 bytes) */
+		return SEC_E_INTERNAL_ERROR;
+	if (!ntlm_write_message_fields(
+	        s,
+	        &(message->EncryptedRandomSessionKey))) /* EncryptedRandomSessionKeyFields (8 bytes) */
+		return SEC_E_INTERNAL_ERROR;
+	if (!ntlm_write_negotiate_flags(s, message->NegotiateFlags, "NTLM_AUTHENTICATE_MESSAGE"))
+		return SEC_E_INTERNAL_ERROR;
 
 	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
-		ntlm_write_version_info(s, &(message->Version)); /* Version (8 bytes) */
+	{
+		if (!ntlm_write_version_info(s, &(message->Version))) /* Version (8 bytes) */
+			return SEC_E_INTERNAL_ERROR;
+	}
 
 	if (context->UseMIC)
 	{
-		context->MessageIntegrityCheckOffset = (UINT32)Stream_GetPosition(s);
-		Stream_Zero(s, 16); /* Message Integrity Check (16 bytes) */
+		const BYTE data[WINPR_MD5_DIGEST_LENGTH] = { 0 };
+
+		context->MessageIntegrityCheckOffset = Stream_GetPosition(s);
+		if (!ntlm_write_message_integrity_check(s, Stream_GetPosition(s), data, sizeof(data),
+		                                        "NTLM_AUTHENTICATE_MESSAGE"))
+			return SEC_E_INTERNAL_ERROR;
 	}
 
 	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_DOMAIN_SUPPLIED)
-		ntlm_write_message_fields_buffer(s, &(message->DomainName)); /* DomainName */
+	{
+		if (!ntlm_write_message_fields_buffer(s, &(message->DomainName))) /* DomainName */
+			return SEC_E_INTERNAL_ERROR;
+	}
 
-	ntlm_write_message_fields_buffer(s, &(message->UserName)); /* UserName */
+	if (!ntlm_write_message_fields_buffer(s, &(message->UserName))) /* UserName */
+		return SEC_E_INTERNAL_ERROR;
 
 	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_WORKSTATION_SUPPLIED)
-		ntlm_write_message_fields_buffer(s, &(message->Workstation)); /* Workstation */
+	{
+		if (!ntlm_write_message_fields_buffer(s, &(message->Workstation))) /* Workstation */
+			return SEC_E_INTERNAL_ERROR;
+	}
 
-	ntlm_write_message_fields_buffer(s, &(message->LmChallengeResponse)); /* LmChallengeResponse */
-	ntlm_write_message_fields_buffer(s, &(message->NtChallengeResponse)); /* NtChallengeResponse */
+	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_LM_KEY)
+	{
+		if (!ntlm_write_message_fields_buffer(
+		        s, &(message->LmChallengeResponse))) /* LmChallengeResponse */
+			return SEC_E_INTERNAL_ERROR;
+	}
+	if (!ntlm_write_message_fields_buffer(
+	        s, &(message->NtChallengeResponse))) /* NtChallengeResponse */
+		return SEC_E_INTERNAL_ERROR;
 
 	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_KEY_EXCH)
-		ntlm_write_message_fields_buffer(
-		    s, &(message->EncryptedRandomSessionKey)); /* EncryptedRandomSessionKey */
+	{
+		if (!ntlm_write_message_fields_buffer(
+		        s, &(message->EncryptedRandomSessionKey))) /* EncryptedRandomSessionKey */
+			return SEC_E_INTERNAL_ERROR;
+	}
 
 	length = Stream_GetPosition(s);
+	WINPR_ASSERT(length <= ULONG_MAX);
 
-	if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, length))
-	{
-		Stream_Free(s, FALSE);
+	if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, (ULONG)length))
 		return SEC_E_INTERNAL_ERROR;
-	}
 
 	CopyMemory(context->AuthenticateMessage.pvBuffer, Stream_Buffer(s), length);
-	buffer->cbBuffer = length;
+	buffer->cbBuffer = (ULONG)length;
 
 	if (context->UseMIC)
 	{
 		/* Message Integrity Check */
-		ntlm_compute_message_integrity_check(context, message->MessageIntegrityCheck, 16);
-		Stream_SetPosition(s, context->MessageIntegrityCheckOffset);
-		Stream_Write(s, message->MessageIntegrityCheck, 16);
-		Stream_SetPosition(s, length);
-	}
-
-#ifdef WITH_DEBUG_NTLM
-	WLog_DBG(TAG, "AUTHENTICATE_MESSAGE (length = %d)", length);
-	winpr_HexDump(TAG, WLOG_DEBUG, Stream_Buffer(s), length);
-	ntlm_print_negotiate_flags(message->NegotiateFlags);
-
-	if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)
-		ntlm_print_version_info(&(message->Version));
-
-	if (context->AuthenticateTargetInfo.cbBuffer > 0)
-	{
-		WLog_DBG(TAG,
-		         "AuthenticateTargetInfo (%" PRIu32 "):", context->AuthenticateTargetInfo.cbBuffer);
-		ntlm_print_av_pair_list(context->AuthenticateTargetInfo.pvBuffer,
-		                        context->AuthenticateTargetInfo.cbBuffer);
-	}
-
-	ntlm_print_message_fields(&(message->DomainName), "DomainName");
-	ntlm_print_message_fields(&(message->UserName), "UserName");
-	ntlm_print_message_fields(&(message->Workstation), "Workstation");
-	ntlm_print_message_fields(&(message->LmChallengeResponse), "LmChallengeResponse");
-	ntlm_print_message_fields(&(message->NtChallengeResponse), "NtChallengeResponse");
-	ntlm_print_message_fields(&(message->EncryptedRandomSessionKey), "EncryptedRandomSessionKey");
-
-	if (context->UseMIC)
-	{
-		WLog_DBG(TAG, "MessageIntegrityCheck (length = 16)");
-		winpr_HexDump(TAG, WLOG_DEBUG, message->MessageIntegrityCheck, 16);
+		ntlm_compute_message_integrity_check(context, message->MessageIntegrityCheck,
+		                                     sizeof(message->MessageIntegrityCheck));
+		if (!ntlm_write_message_integrity_check(
+		        s, context->MessageIntegrityCheckOffset, message->MessageIntegrityCheck,
+		        sizeof(message->MessageIntegrityCheck), "NTLM_AUTHENTICATE_MESSAGE"))
+			return SEC_E_INTERNAL_ERROR;
 	}
 
+#if defined(WITH_DEBUG_NTLM)
+	ntlm_print_authenticate_message(&context->AuthenticateMessage, message,
+	                                context->UseMIC ? MSV_AV_FLAGS_MESSAGE_INTEGRITY_CHECK : 0,
+	                                &context->AuthenticateTargetInfo);
 #endif
-	context->state = NTLM_STATE_FINAL;
-	Stream_Free(s, FALSE);
+	ntlm_change_state(context, NTLM_STATE_FINAL);
 	return SEC_E_OK;
 }
 
@@ -1046,25 +1370,29 @@ SECURITY_STATUS ntlm_server_AuthenticateComplete(NTLM_CONTEXT* context)
 	size_t cbAvFlags;
 	NTLM_AV_PAIR* AvFlags = NULL;
 	NTLM_AUTHENTICATE_MESSAGE* message;
-	BYTE messageIntegrityCheck[16];
 
 	if (!context)
 		return SEC_E_INVALID_PARAMETER;
 
-	if (context->state != NTLM_STATE_COMPLETION)
+	if (ntlm_get_state(context) != NTLM_STATE_COMPLETION)
 		return SEC_E_OUT_OF_SEQUENCE;
 
 	message = &context->AUTHENTICATE_MESSAGE;
+	WINPR_ASSERT(message);
+
 	AvFlags = ntlm_av_pair_get(context->NTLMv2Response.Challenge.AvPairs,
 	                           context->NTLMv2Response.Challenge.cbAvPairs, MsvAvFlags, &cbAvFlags);
 
 	if (AvFlags)
 		Data_Read_UINT32(ntlm_av_pair_get_value_pointer(AvFlags), flags);
 
-	if (ntlm_compute_lm_v2_response(context) < 0) /* LmChallengeResponse */
-		return SEC_E_INTERNAL_ERROR;
+	if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_LM_KEY)
+	{
+		if (!ntlm_compute_lm_v2_response(context)) /* LmChallengeResponse */
+			return SEC_E_INTERNAL_ERROR;
+	}
 
-	if (ntlm_compute_ntlm_v2_response(context) < 0) /* NtChallengeResponse */
+	if (!ntlm_compute_ntlm_v2_response(context)) /* NtChallengeResponse */
 		return SEC_E_INTERNAL_ERROR;
 
 	/* KeyExchangeKey */
@@ -1076,16 +1404,16 @@ SECURITY_STATUS ntlm_server_AuthenticateComplete(NTLM_CONTEXT* context)
 
 	if (flags & MSV_AV_FLAGS_MESSAGE_INTEGRITY_CHECK)
 	{
-		ZeroMemory(
-		    &((PBYTE)context->AuthenticateMessage.pvBuffer)[context->MessageIntegrityCheckOffset],
-		    16);
+		BYTE messageIntegrityCheck[16] = { 0 };
+
 		ntlm_compute_message_integrity_check(context, messageIntegrityCheck,
 		                                     sizeof(messageIntegrityCheck));
 		CopyMemory(
 		    &((PBYTE)context->AuthenticateMessage.pvBuffer)[context->MessageIntegrityCheckOffset],
-		    message->MessageIntegrityCheck, 16);
+		    message->MessageIntegrityCheck, sizeof(message->MessageIntegrityCheck));
 
-		if (memcmp(messageIntegrityCheck, message->MessageIntegrityCheck, 16) != 0)
+		if (memcmp(messageIntegrityCheck, message->MessageIntegrityCheck,
+		           sizeof(message->MessageIntegrityCheck)) != 0)
 		{
 			WLog_ERR(TAG, "Message Integrity Check (MIC) verification failed!");
 #ifdef WITH_DEBUG_NTLM
@@ -1111,7 +1439,7 @@ SECURITY_STATUS ntlm_server_AuthenticateComplete(NTLM_CONTEXT* context)
 		   */
 
 #ifdef WITH_DEBUG_NTLM
-		WLog_DBG(TAG, "No MIC present, using NtProofString for verification.");
+		WLog_VRB(TAG, "No MIC present, using NtProofString for verification.");
 #endif
 
 		if (memcmp(context->NTLMv2Response.Response, context->NtProofString, 16) != 0)
@@ -1129,38 +1457,21 @@ SECURITY_STATUS ntlm_server_AuthenticateComplete(NTLM_CONTEXT* context)
 	}
 
 	/* Generate signing keys */
-	ntlm_generate_client_signing_key(context);
-	ntlm_generate_server_signing_key(context);
+	if (!ntlm_generate_client_signing_key(context))
+		return SEC_E_INTERNAL_ERROR;
+	if (!ntlm_generate_server_signing_key(context))
+		return SEC_E_INTERNAL_ERROR;
 	/* Generate sealing keys */
-	ntlm_generate_client_sealing_key(context);
-	ntlm_generate_server_sealing_key(context);
+	if (!ntlm_generate_client_sealing_key(context))
+		return SEC_E_INTERNAL_ERROR;
+	if (!ntlm_generate_server_sealing_key(context))
+		return SEC_E_INTERNAL_ERROR;
 	/* Initialize RC4 seal state */
 	ntlm_init_rc4_seal_states(context);
-#ifdef WITH_DEBUG_NTLM
-	WLog_DBG(TAG, "ClientChallenge");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ClientChallenge, 8);
-	WLog_DBG(TAG, "ServerChallenge");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ServerChallenge, 8);
-	WLog_DBG(TAG, "SessionBaseKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->SessionBaseKey, 16);
-	WLog_DBG(TAG, "KeyExchangeKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->KeyExchangeKey, 16);
-	WLog_DBG(TAG, "ExportedSessionKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ExportedSessionKey, 16);
-	WLog_DBG(TAG, "RandomSessionKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->RandomSessionKey, 16);
-	WLog_DBG(TAG, "ClientSigningKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ClientSigningKey, 16);
-	WLog_DBG(TAG, "ClientSealingKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ClientSealingKey, 16);
-	WLog_DBG(TAG, "ServerSigningKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ServerSigningKey, 16);
-	WLog_DBG(TAG, "ServerSealingKey");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->ServerSealingKey, 16);
-	WLog_DBG(TAG, "Timestamp");
-	winpr_HexDump(TAG, WLOG_DEBUG, context->Timestamp, 8);
+#if defined(WITH_DEBUG_NTLM)
+	ntlm_print_authentication_complete(context);
 #endif
-	context->state = NTLM_STATE_FINAL;
+	ntlm_change_state(context, NTLM_STATE_FINAL);
 	ntlm_free_message_fields_buffer(&(message->DomainName));
 	ntlm_free_message_fields_buffer(&(message->UserName));
 	ntlm_free_message_fields_buffer(&(message->Workstation));