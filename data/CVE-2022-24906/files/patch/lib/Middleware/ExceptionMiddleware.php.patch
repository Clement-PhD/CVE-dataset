@@ -32,6 +32,7 @@
 use OCP\AppFramework\OCS\OCSException;
 use OCP\AppFramework\OCSController;
 use OCP\ILogger;
+use OCP\IRequest;
 use OCP\Util;
 use OCP\IConfig;
 
@@ -41,16 +42,19 @@ class ExceptionMiddleware extends Middleware {
 	private $logger;
 	/** @var IConfig */
 	private $config;
+	/** @var IRequest */
+	private $request;
 
 	/**
 	 * SharingMiddleware constructor.
 	 *
 	 * @param ILogger $logger
 	 * @param IConfig $config
 	 */
-	public function __construct(ILogger $logger, IConfig $config) {
+	public function __construct(ILogger $logger, IConfig $config, IRequest $request) {
 		$this->logger = $logger;
 		$this->config = $config;
+		$this->request = $request;
 	}
 
 	/**
@@ -67,54 +71,58 @@ public function afterException($controller, $methodName, \Exception $exception)
 			throw $exception;
 		}
 
-		if ($exception instanceof ConflictException) {
-			if ($this->config->getSystemValue('loglevel', Util::WARN) === Util::DEBUG) {
-				$this->logger->logException($exception);
-			}
+		$debugMode = $this->config->getSystemValue('debug', false);
+		$exceptionMessage = $debugMode !== true
+			? 'Internal server error: Please contact the server administrator if this error reappears multiple times, please include the request ID "' . $this->request->getId() . '" below in your report.'
+			: $exception->getMessage();
+
+		// uncatched DoesNotExistExceptions will be thrown when the main entity is not found
+		// we return a 403 so we don't leak information over existing entries
+		// TODO: At some point those should properly be catched in the service classes
+		if ($exception instanceof DoesNotExistException) {
 			return new JSONResponse([
-				'status' => $exception->getStatus(),
-				'message' => $exception->getMessage(),
-				'data' => $exception->getData(),
-			], $exception->getStatus());
+				'status' => 403,
+				'message' => 'Permission denied'
+			], 403);
 		}
 		
 		if ($exception instanceof StatusException) {
 			if ($this->config->getSystemValue('loglevel', Util::WARN) === Util::DEBUG) {
 				$this->logger->logException($exception);
 			}
 
+			if ($exception instanceof ConflictException) {
+				return new JSONResponse([
+					'status' => $exception->getStatus(),
+					'message' => $exception->getMessage(),
+					'data' => $exception->getData(),
+				], $exception->getStatus());
+			}
+
 			if ($controller instanceof OCSController) {
 				$exception = new OCSException($exception->getMessage(), $exception->getStatus(), $exception);
 				throw $exception;
 			}
+
 			return new JSONResponse([
 				'status' => $exception->getStatus(),
-				'message' => $exception->getMessage()
+				'message' => $exception->getMessage(),
 			], $exception->getStatus());
 		}
 
 		if (strpos(get_class($controller), 'OCA\\Deck\\Controller\\') === 0) {
 			$response = [
 				'status' => 500,
-				'message' => $exception->getMessage()
+				'message' => $exceptionMessage,
+				'requestId' => $this->request->getId(),
 			];
 			$this->logger->logException($exception);
-			if ($this->config->getSystemValue('debug', true) === true) {
+			if ($debugMode === true) {
 				$response['exception'] = (array) $exception;
 			}
 			return new JSONResponse($response, 500);
 		}
 
-		// uncatched DoesNotExistExceptions will be thrown when the main entity is not found
-		// we return a 403 so we don't leak information over existing entries
-		// TODO: At some point those should properly be catched in the service classes
-		if ($exception instanceof DoesNotExistException) {
-			return new JSONResponse([
-				'status' => 403,
-				'message' => 'Permission denied'
-			], 403);
-		}
-
 		throw $exception;
 	}
 }