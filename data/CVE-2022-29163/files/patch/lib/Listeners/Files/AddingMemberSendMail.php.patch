@@ -46,7 +46,7 @@
 use OCP\EventDispatcher\IEventListener;
 
 /**
- * Class AddingMember
+ * Class AddingMemberSendMail
  *
  * @package OCA\Circles\Listeners\Files
  */
@@ -101,19 +101,19 @@ public function handle(Event $event): void {
 			return;
 		}
 
-		$result = [];
 		$member = $event->getMember();
-
 		if ($member->getUserType() === Member::TYPE_CIRCLE) {
 			$members = $member->getBasedOn()->getInheritedMembers();
 		} else {
 			$members = [$member];
 		}
 
 		$circle = $event->getCircle();
+		$federatedEvent = $event->getFederatedEvent();
 		$shares = $this->shareWrapperService->getSharesToCircle($circle->getSingleId());
+		$hashedPasswords = $federatedEvent->getParams()->gArray('hashedPasswords');
 
-		/** @var Member[] $members */
+		$result = [];
 		foreach ($members as $member) {
 			if ($member->getUserType() !== Member::TYPE_MAIL
 				&& $member->getUserType() !== Member::TYPE_CONTACT
@@ -124,13 +124,17 @@ public function handle(Event $event): void {
 			$files = [];
 			foreach ($shares as $share) {
 				try {
-					$shareToken = $this->shareTokenService->generateShareToken($share, $member);
+					$shareToken = $this->shareTokenService->generateShareToken(
+						$share,
+						$member,
+						$this->get($member->getSingleId(), $hashedPasswords)
+					);
 				} catch (Exception $e) {
 					continue;
 				}
 
 				$share->setShareToken($shareToken);
-				$files[] = $share;
+				$files[] = clone $share;
 			}
 
 			$result[$member->getId()] = [
@@ -139,6 +143,6 @@ public function handle(Event $event): void {
 			];
 		}
 
-		$event->getFederatedEvent()->setResultEntry('files', $result);
+		$federatedEvent->addResultEntry('files', $result);
 	}
 }