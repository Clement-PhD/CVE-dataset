@@ -1,18 +1,48 @@
 import {MAX_VALIDATORS_PER_COMMITTEE} from "@chainsafe/lodestar-params";
 import {phase0} from "@chainsafe/lodestar-types";
 import {CachedBeaconStateAllForks} from "../../types";
-import {verifyIndexedAttestationSignature} from "../signatureSets";
+import {verifySignatureSet} from "../../util";
+import {getIndexedAttestationBnSignatureSet, getIndexedAttestationSignatureSet} from "../signatureSets";
 
 /**
  * Check if `indexedAttestation` has sorted and unique indices and a valid aggregate signature.
  */
 export function isValidIndexedAttestation(
   state: CachedBeaconStateAllForks,
   indexedAttestation: phase0.IndexedAttestation,
-  verifySignature = true
+  verifySignature: boolean
 ): boolean {
-  const indices = indexedAttestation.attestingIndices;
+  if (!isValidIndexedAttestationIndices(state, indexedAttestation.attestingIndices)) {
+    return false;
+  }
+
+  if (verifySignature) {
+    return verifySignatureSet(getIndexedAttestationSignatureSet(state, indexedAttestation));
+  } else {
+    return true;
+  }
+}
+
+export function isValidIndexedAttestationBn(
+  state: CachedBeaconStateAllForks,
+  indexedAttestation: phase0.IndexedAttestationBn,
+  verifySignature: boolean
+): boolean {
+  if (!isValidIndexedAttestationIndices(state, indexedAttestation.attestingIndices)) {
+    return false;
+  }
 
+  if (verifySignature) {
+    return verifySignatureSet(getIndexedAttestationBnSignatureSet(state, indexedAttestation));
+  } else {
+    return true;
+  }
+}
+
+/**
+ * Check if `indexedAttestation` has sorted and unique indices and a valid aggregate signature.
+ */
+export function isValidIndexedAttestationIndices(state: CachedBeaconStateAllForks, indices: number[]): boolean {
   // verify max number of indices
   if (!(indices.length > 0 && indices.length <= MAX_VALIDATORS_PER_COMMITTEE)) {
     return false;
@@ -33,10 +63,5 @@ export function isValidIndexedAttestation(
     return false;
   }
 
-  // verify aggregate signature
-  if (!verifySignature) {
-    return true;
-  }
-
-  return verifyIndexedAttestationSignature(state, indexedAttestation, indices);
+  return true;
 }
