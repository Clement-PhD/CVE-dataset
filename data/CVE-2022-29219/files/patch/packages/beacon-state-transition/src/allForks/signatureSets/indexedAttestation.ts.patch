@@ -1,22 +1,8 @@
 import {DOMAIN_BEACON_ATTESTER} from "@chainsafe/lodestar-params";
 import {allForks, phase0, ssz} from "@chainsafe/lodestar-types";
-import {
-  computeSigningRoot,
-  computeStartSlotAtEpoch,
-  ISignatureSet,
-  SignatureSetType,
-  verifySignatureSet,
-} from "../../util";
+import {computeSigningRoot, computeStartSlotAtEpoch, ISignatureSet, SignatureSetType} from "../../util";
 import {CachedBeaconStateAllForks} from "../../types";
 
-export function verifyIndexedAttestationSignature(
-  state: CachedBeaconStateAllForks,
-  indexedAttestation: phase0.IndexedAttestation,
-  indices?: number[]
-): boolean {
-  return verifySignatureSet(getIndexedAttestationSignatureSet(state, indexedAttestation, indices));
-}
-
 export function getAttestationWithIndicesSignatureSet(
   state: CachedBeaconStateAllForks,
   attestation: Pick<phase0.Attestation, "data" | "signature">,
@@ -36,14 +22,9 @@ export function getAttestationWithIndicesSignatureSet(
 
 export function getIndexedAttestationSignatureSet(
   state: CachedBeaconStateAllForks,
-  indexedAttestation: phase0.IndexedAttestation,
-  indices?: number[]
+  indexedAttestation: phase0.IndexedAttestation
 ): ISignatureSet {
-  return getAttestationWithIndicesSignatureSet(
-    state,
-    indexedAttestation,
-    indices ?? indexedAttestation.attestingIndices
-  );
+  return getAttestationWithIndicesSignatureSet(state, indexedAttestation, indexedAttestation.attestingIndices);
 }
 
 export function getAttestationsSignatureSets(