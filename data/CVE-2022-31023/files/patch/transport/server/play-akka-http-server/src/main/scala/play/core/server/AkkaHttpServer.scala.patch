@@ -29,11 +29,12 @@ import com.typesafe.config.ConfigMemorySize
 import javax.net.ssl._
 import play.api._
 import play.api.http.DefaultHttpErrorHandler
+import play.api.http.DevHttpErrorHandler
 import play.api.http.HeaderNames
 import play.api.http.HttpErrorHandler
 import play.api.http.HttpErrorInfo
-import play.api.http.{ HttpProtocol => PlayHttpProtocol }
 import play.api.http.Status
+import play.api.http.{ HttpProtocol => PlayHttpProtocol }
 import play.api.internal.libs.concurrent.CoordinatedShutdownSupport
 import play.api.libs.streams.Accumulator
 import play.api.mvc._
@@ -292,6 +293,11 @@ class AkkaHttpServer(context: AkkaHttpServer.Context) extends Server {
     }
   }
 
+  private lazy val fallbackErrorHandler = mode match {
+    case Mode.Prod => DefaultHttpErrorHandler
+    case _         => DevHttpErrorHandler
+  }
+
   private def resultUtils(tryApp: Try[Application]): ServerResultUtils =
     reloadCache.cachedFrom(tryApp).resultUtils
   private def modelConversion(tryApp: Try[Application]): AkkaModelConversion =
@@ -314,7 +320,7 @@ class AkkaHttpServer(context: AkkaHttpServer.Context) extends Server {
       val debugInfo: Option[ServerDebugInfo] = reloadCache.cachedFrom(tryApp).serverDebugInfo
       ServerDebugInfo.attachToRequestHeader(convertedRequestHeader, debugInfo)
     }
-    val (taggedRequestHeader, handler) = Server.getHandlerFor(debugInfoRequestHeader, tryApp)
+    val (taggedRequestHeader, handler) = Server.getHandlerFor(debugInfoRequestHeader, tryApp, fallbackErrorHandler)
     val responseFuture = executeHandler(
       tryApp,
       decodedRequest,
@@ -345,7 +351,7 @@ class AkkaHttpServer(context: AkkaHttpServer.Context) extends Server {
     // Get the app's HttpErrorHandler or fallback to a default value
     val errorHandler: HttpErrorHandler = tryApp match {
       case Success(app) => app.errorHandler
-      case Failure(_)   => DefaultHttpErrorHandler
+      case Failure(_)   => fallbackErrorHandler
     }
 
     // default execution context used for executing the action