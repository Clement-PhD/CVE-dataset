@@ -20,24 +20,35 @@
 package com.xpn.xwiki.objects.classes;
 
 import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
 import java.util.Map;
 
 import org.junit.jupiter.api.Test;
 
+import com.xpn.xwiki.XWikiContext;
+import com.xpn.xwiki.objects.BaseProperty;
+import com.xpn.xwiki.objects.LargeStringProperty;
+import com.xpn.xwiki.objects.ListProperty;
+import com.xpn.xwiki.objects.StringListProperty;
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
 
 /**
  * Unit tests for {@link ListClass}.
  * 
  * @version $Id$
  */
-public class ListClassTest
+class ListClassTest
 {
     /**
      * Test that the default separator {@link ListClass#DEFAULT_SEPARATOR} is used when not specified.
      */
     @Test
-    public void testGetListFromStringDefaultSeparator()
+    void getListFromStringDefaultSeparator()
     {
         assertEquals(Arrays.asList("a", "b", "c"), ListClass.getListFromString("a|b|c"));
     }
@@ -46,7 +57,7 @@ public void testGetListFromStringDefaultSeparator()
      * Test that the separator can be escaped inside the list item.
      */
     @Test
-    public void testGetListFromStringSeparatorInValues()
+    void getListFromStringSeparatorInValues()
     {
         assertEquals(Arrays.asList("a", "|b", "c|", "|"), ListClass.getListFromString("a|\\|b|c\\||\\|"));
     }
@@ -55,7 +66,7 @@ public void testGetListFromStringSeparatorInValues()
      * Test that custom separators work.
      */
     @Test
-    public void testGetListFromStringNonDefaultSeparator()
+    void getListFromStringNonDefaultSeparator()
     {
         assertEquals(Arrays.asList("a", "b", "c"), ListClass.getListFromString("a*b*c", "*", false));
     }
@@ -64,7 +75,7 @@ public void testGetListFromStringNonDefaultSeparator()
      * Test that we can use more than one separator.
      */
     @Test
-    public void testGetListFromStringMultipleSeparators()
+    void getListFromStringMultipleSeparators()
     {
         assertEquals(Arrays.asList("a", "b", "c", "d", "e"), ListClass.getListFromString("a*b,c,d*e", "*,", false));
     }
@@ -73,7 +84,7 @@ public void testGetListFromStringMultipleSeparators()
      * Test the behaviour when multiple separators are used in concatenation.
      */
     @Test
-    public void testGetListFromStringConcatenatedSeparators()
+    void getListFromStringConcatenatedSeparators()
     {
         assertEquals(Arrays.asList("a", "b"), ListClass.getListFromString("a, b", ", ", false));
         assertEquals(Arrays.asList("a", "b"), ListClass.getListFromString("a ,b", ", ", false));
@@ -89,7 +100,7 @@ public void testGetListFromStringConcatenatedSeparators()
      * Test that escaped separators in list values work with multipel separators as well.
      */
     @Test
-    public void testGetListFromStringMultipleSeparatorsWithSeparatorsInValues()
+    void getListFromStringMultipleSeparatorsWithSeparatorsInValues()
     {
         assertEquals(Arrays.asList("a*b", "c,d", "e*f"),
             ListClass.getListFromString("a\\*b,c\\,d*e\\*f", "*,", false));
@@ -99,7 +110,7 @@ public void testGetListFromStringMultipleSeparatorsWithSeparatorsInValues()
      * Test that the default separator {@link ListClass#DEFAULT_SEPARATOR} is used when not specified.
      */
     @Test
-    public void testGetStringFromListDefaultSeparator()
+    void getStringFromListDefaultSeparator()
     {
         assertEquals("a|b|c", ListClass.getStringFromList(Arrays.asList("a", "b", "c")));
     }
@@ -108,7 +119,7 @@ public void testGetStringFromListDefaultSeparator()
      * Test that the separator can be escaped inside the list item.
      */
     @Test
-    public void testGetStringFromListSeparatorInValues()
+    void getStringFromListSeparatorInValues()
     {
         assertEquals("a|\\|b|c\\||\\|", ListClass.getStringFromList(Arrays.asList("a", "|b", "c|", "|")));
     }
@@ -117,7 +128,7 @@ public void testGetStringFromListSeparatorInValues()
      * Test that custom separators work.
      */
     @Test
-    public void testGetStringFromListNonDefaultSeparator()
+    void getStringFromListNonDefaultSeparator()
     {
         assertEquals("a*b*c", ListClass.getStringFromList(Arrays.asList("a", "b", "c"), "*"));
     }
@@ -126,7 +137,7 @@ public void testGetStringFromListNonDefaultSeparator()
      * Test that we can use more than one separator.
      */
     @Test
-    public void testGetStringFromListMultipleSeparators()
+    void getStringFromListMultipleSeparators()
     {
         assertEquals("a*b*c*d*e", ListClass.getStringFromList(Arrays.asList("a", "b", "c", "d", "e"), "*,"));
     }
@@ -135,20 +146,26 @@ public void testGetStringFromListMultipleSeparators()
      * Test that escaped separators in list values work with multipel separators as well.
      */
     @Test
-    public void testGetStringFromListMultipleSeparatorsWithSeparatorsInValues()
+    void getStringFromListMultipleSeparatorsWithSeparatorsInValues()
     {
         assertEquals("a\\*b*c\\,d*e\\*f", ListClass.getStringFromList(Arrays.asList("a*b", "c,d", "e*f"), "*,"));
     }
 
     @Test
-    public void testGetStringFromListWithNullValue()
+    void getStringFromListWithNullValue()
     {
         assertEquals("a.c", ListClass.getStringFromList(Arrays.asList("a", null, "c"), "."));
         assertEquals("a..c", ListClass.getStringFromList(Arrays.asList("a", "", "c"), "."));
     }
 
     @Test
-    public void getMapFromString()
+    void getStringFromListFinalEmptyValue()
+    {
+        assertEquals("a|b|c|", ListClass.getStringFromList(Arrays.asList("a", "b", "c", ""), "|"));
+    }
+
+    @Test
+    void getMapFromString()
     {
         Map<String, ListItem> map = ListClass.getMapFromString("a=1|b");
         assertEquals(2, map.size());
@@ -159,7 +176,7 @@ public void getMapFromString()
     }
 
     @Test
-    public void getMapFromStringWithEmptyValue()
+    void getMapFromStringWithEmptyValue()
     {
         Map<String, ListItem> map = ListClass.getMapFromString("|a");
         assertEquals(2, map.size());
@@ -170,7 +187,7 @@ public void getMapFromStringWithEmptyValue()
     }
 
     @Test
-    public void getMapFromStringWithEmptyValueWithLabel()
+    void getMapFromStringWithEmptyValueWithLabel()
     {
         Map<String, ListItem> map = ListClass.getMapFromString("=None|a");
         assertEquals(2, map.size());
@@ -181,7 +198,7 @@ public void getMapFromStringWithEmptyValueWithLabel()
     }
 
     @Test
-    public void listWithBackslash()
+    void listWithBackslash()
     {
         assertEquals(Arrays.asList("a\\b", "c"), ListClass.getListFromString("a\\b|c"));
         assertEquals(Arrays.asList("a", "\\", "c"), ListClass.getListFromString("a|\\\\|c"));
@@ -197,4 +214,84 @@ public void listWithBackslash()
         assertEquals(Arrays.asList("a", ",c"), ListClass.getListFromString("a,\\,c", ",", false));
         assertEquals(Arrays.asList("a", "\\,c"), ListClass.getListFromString("a,\\\\\\,c", ",", false));
     }
+
+    @Test
+    void getListFromStringFilterEmptyValues()
+    {
+        assertEquals(Arrays.asList("a", "b", "", "c", ""), ListClass.getListFromString("a|b||c|", "|", false, false));
+        assertEquals(Arrays.asList("a", "b", "c"), ListClass.getListFromString("a|b||c|", "|", false, true));
+    }
+
+    @Test
+    void fromList()
+    {
+        BaseProperty property = mock(LargeStringProperty.class);
+        ListClass listClass = new ListClass()
+        {
+            @Override
+            public List<String> getList(XWikiContext context)
+            {
+                return null;
+            }
+
+            @Override
+            public Map<String, ListItem> getMap(XWikiContext context)
+            {
+                return null;
+            }
+        };
+
+        listClass.fromList(property, null, true);
+        verify(property).setValue(null);
+
+        ListProperty listProperty = mock(StringListProperty.class);
+        listClass.fromList(listProperty, null, true);
+        verify(listProperty).setList(null);
+
+        listClass.fromList(listProperty, null, false);
+        verify(listProperty, times(2)).setList(null);
+
+        List<String> strings = Arrays.asList("XWiki.Foo", null, "XWiki.Bar", "");
+        listClass.fromList(listProperty, strings, true);
+        verify(listProperty).setList(Arrays.asList("XWiki.Foo", "XWiki.Bar"));
+
+        listClass.fromList(listProperty, strings, false);
+        verify(listProperty).setList(strings);
+
+        listClass.fromList(property, strings, false);
+        verify(property).setValue("XWiki.Foo");
+
+        listClass.fromList(property, strings, true);
+        verify(property, times(2)).setValue("XWiki.Foo");
+
+        listClass.fromList(property, Collections.emptyList(), false);
+        verify(property, times(2)).setValue(null);
+
+        listClass.fromList(property, Collections.emptyList(), true);
+        verify(property, times(3)).setValue(null);
+
+        strings = Arrays.asList("", "XWiki.Foo", null, "XWiki.Bar", "");
+        listClass.fromList(property, strings, false);
+        verify(property).setValue("");
+
+        listClass.fromList(property, strings, true);
+        verify(property, times(3)).setValue("XWiki.Foo");
+
+        listClass.fromList(property, Collections.singletonList(""), true);
+        verify(property, times(4)).setValue(null);
+
+        listClass.setMultiSelect(true);
+        listClass.fromList(property, strings, false);
+        verify(property).setValue("|XWiki.Foo|XWiki.Bar|");
+
+        listClass.fromList(property, strings, true);
+        verify(property).setValue("XWiki.Foo|XWiki.Bar");
+
+        listClass.setSeparators("~@!");
+        listClass.fromList(property, strings, false);
+        verify(property).setValue("~XWiki.Foo~XWiki.Bar~");
+
+        listClass.fromList(property, strings, true);
+        verify(property).setValue("XWiki.Foo~XWiki.Bar");
+    }
 }
