@@ -6,7 +6,7 @@
 from typing import Optional
 
 import requests
-from flask import current_app
+from flask import current_app, safe_join
 
 from _orchest.internals.two_phase_executor import TwoPhaseExecutor, TwoPhaseFunction
 from _orchest.internals.utils import rmtree
@@ -64,24 +64,22 @@ def _collateral(self, project_uuid: str, project_path: str):
             FileExistsError:
             NotADirectoryError:
         """
-        full_project_path = os.path.join(
-            current_app.config["PROJECTS_DIR"], project_path
-        )
+        full_project_path = safe_join(current_app.config["PROJECTS_DIR"], project_path)
         # exist_ok=True is there so that this function can be used both
         # when initializing a project that was discovered through the
         # filesystem or initializing a project from scratch.
         os.makedirs(full_project_path, exist_ok=True)
 
         # Create top-level `.gitignore` file with sane defaults, in case
         # it not already exists.
-        root_gitignore = os.path.join(full_project_path, ".gitignore")
+        root_gitignore = safe_join(full_project_path, ".gitignore")
         if not os.path.exists(root_gitignore):
             with open(root_gitignore, "w") as f:
                 f.write("\n".join(current_app.config["GIT_IGNORE_PROJECT_ROOT"]))
 
         # This would actually be created as a collateral effect when
         # populating with default environments, do not rely on that.
-        expected_internal_dir = os.path.join(full_project_path, ".orchest")
+        expected_internal_dir = safe_join(full_project_path, ".orchest")
         if os.path.isfile(expected_internal_dir):
             raise NotADirectoryError(
                 "The expected internal directory (.orchest) is a file."
@@ -94,7 +92,7 @@ def _collateral(self, project_uuid: str, project_path: str):
         # `.orchest/` directory because an existing project might be
         # added to Orchest and already contain a root-level
         # `.gitignore`, which we don't want to inject ourselves in.
-        expected_git_ignore_file = os.path.join(
+        expected_git_ignore_file = safe_join(
             full_project_path, ".orchest", ".gitignore"
         )
         if os.path.isdir(expected_git_ignore_file):
@@ -107,7 +105,7 @@ def _collateral(self, project_uuid: str, project_path: str):
 
         # Initialize with default environments only if the project has
         # no environments directory.
-        expected_env_dir = os.path.join(full_project_path, ".orchest", "environments")
+        expected_env_dir = safe_join(full_project_path, ".orchest", "environments")
         if os.path.isfile(expected_env_dir):
             raise NotADirectoryError(
                 "The expected environments directory (.orchest/environments) "
@@ -117,7 +115,7 @@ def _collateral(self, project_uuid: str, project_path: str):
             populate_default_environments(project_uuid)
 
         # Initialize .git directory
-        expected_git_dir = os.path.join(full_project_path, ".git")
+        expected_git_dir = safe_join(full_project_path, ".git")
 
         # If no git directory exists initialize git repo
         if not os.path.exists(expected_git_dir):
@@ -175,9 +173,7 @@ def _collateral(self, project_uuid: str):
         # The project has been deleted by a concurrent deletion request.
         if project_path is None:
             return
-        full_project_path = os.path.join(
-            current_app.config["PROJECTS_DIR"], project_path
-        )
+        full_project_path = safe_join(current_app.config["PROJECTS_DIR"], project_path)
         rmtree(full_project_path)
 
         # Remove jobs directories related to project.
@@ -249,8 +245,8 @@ def _collateral(
     ):
         """Move a project to another path, i.e. rename it."""
 
-        old_path = os.path.join(current_app.config["PROJECTS_DIR"], old_name)
-        new_path = os.path.join(current_app.config["PROJECTS_DIR"], new_name)
+        old_path = safe_join(current_app.config["PROJECTS_DIR"], old_name)
+        new_path = safe_join(current_app.config["PROJECTS_DIR"], new_name)
 
         os.rename(old_path, new_path)
         # So that the moving can be reverted in case of failure of the
@@ -264,10 +260,10 @@ def _revert(self):
         # Move it back if necessary. This avoids the project being
         # discovered as a new one.
         if self.collateral_kwargs.get("moved", False):
-            old_path = os.path.join(
+            old_path = safe_join(
                 current_app.config["PROJECTS_DIR"], self.collateral_kwargs["old_name"]
             )
-            new_path = os.path.join(
+            new_path = safe_join(
                 current_app.config["PROJECTS_DIR"], self.collateral_kwargs["new_name"]
             )
             try:
@@ -301,7 +297,7 @@ def _transaction(self, project_uuid):
         """
 
         project_path = project_uuid_to_path(project_uuid)
-        project_dir = os.path.join(
+        project_dir = safe_join(
             current_app.config["USER_DIR"], "projects", project_path
         )
 