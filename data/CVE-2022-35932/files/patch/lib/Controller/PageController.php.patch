@@ -25,6 +25,7 @@
 
 namespace OCA\Talk\Controller;
 
+use OC\Security\Bruteforce\Throttler;
 use OCA\Talk\AppInfo\Application;
 use OCA\Talk\Exceptions\ParticipantNotFoundException;
 use OCA\Talk\Exceptions\RoomNotFoundException;
@@ -73,6 +74,7 @@ class PageController extends Controller {
 	private INotificationManager $notificationManager;
 	private IAppManager $appManager;
 	private IRootFolder $rootFolder;
+	private Throttler $throttler;
 
 	public function __construct(string $appName,
 								IRequest $request,
@@ -90,6 +92,7 @@ public function __construct(string $appName,
 								IInitialState $initialState,
 								ICacheFactory $memcacheFactory,
 								IRootFolder $rootFolder,
+								Throttler $throttler,
 								Config $talkConfig,
 								IConfig $serverConfig) {
 		parent::__construct($appName, $request);
@@ -107,6 +110,7 @@ public function __construct(string $appName,
 		$this->initialState = $initialState;
 		$this->memcacheFactory = $memcacheFactory;
 		$this->rootFolder = $rootFolder;
+		$this->throttler = $throttler;
 		$this->talkConfig = $talkConfig;
 		$this->serverConfig = $serverConfig;
 	}
@@ -115,6 +119,7 @@ public function __construct(string $appName,
 	 * @PublicPage
 	 * @NoCSRFRequired
 	 * @UseSession
+	 * @BruteForceProtection(action=talkRoomToken)
 	 *
 	 * @param string $token
 	 * @return Response
@@ -129,6 +134,7 @@ public function showCall(string $token): Response {
 	 * @PublicPage
 	 * @NoCSRFRequired
 	 * @UseSession
+	 * @BruteForceProtection(action=talkRoomPassword)
 	 *
 	 * @param string $token
 	 * @param string $password
@@ -164,6 +170,7 @@ public function duplicateSession(): Response {
 	 * @PublicPage
 	 * @NoCSRFRequired
 	 * @UseSession
+	 * @BruteForceProtection(action=talkRoomToken)
 	 *
 	 * @param string $token
 	 * @param string $callUser
@@ -177,6 +184,7 @@ public function index(string $token = '', string $callUser = '', string $passwor
 			return $this->guestEnterRoom($token, $password);
 		}
 
+		$throttle = false;
 		if ($token !== '') {
 			$room = null;
 			try {
@@ -205,6 +213,7 @@ public function index(string $token = '', string $callUser = '', string $passwor
 			} catch (RoomNotFoundException $e) {
 				// Room not found, redirect to main page
 				$token = '';
+				$throttle = true;
 			}
 
 			if ($room instanceof Room && $room->hasPassword()) {
@@ -224,15 +233,22 @@ public function index(string $token = '', string $callUser = '', string $passwor
 					if ($passwordVerification['result']) {
 						$this->talkSession->renewSessionId();
 						$this->talkSession->setPasswordForRoom($token, $password);
+						$this->throttler->resetDelay($this->request->getRemoteAddress(), 'talkRoomPassword', ['token' => $token]);
 					} else {
 						$this->talkSession->removePasswordForRoom($token);
+						$showBruteForceWarning = $this->throttler->getDelay($this->request->getRemoteAddress(), 'talkRoomPassword') > 5000;
+
 						if ($passwordVerification['url'] === '') {
-							return new TemplateResponse($this->appName, 'authenticate', [
+							$response = new TemplateResponse($this->appName, 'authenticate', [
 								'wrongpw' => $password !== '',
+								'showBruteForceWarning' => $showBruteForceWarning,
 							], 'guest');
+						} else {
+							$response = new RedirectResponse($passwordVerification['url']);
 						}
 
-						return new RedirectResponse($passwordVerification['url']);
+						$response->throttle(['token' => $token]);
+						return $response;
 					}
 				}
 			}
@@ -268,6 +284,10 @@ public function index(string $token = '', string $callUser = '', string $passwor
 		$csp->addAllowedConnectDomain("'self'");
 		$csp->addAllowedImageDomain('https://*.tile.openstreetmap.org');
 		$response->setContentSecurityPolicy($csp);
+		if ($throttle) {
+			// Logged-in user tried to access a chat they can not access
+			$response->throttle();
+		}
 		return $response;
 	}
 
@@ -288,9 +308,11 @@ protected function guestEnterRoom(string $token, string $password): Response {
 			if ($token) {
 				$redirectUrl = $this->url->linkToRoute('spreed.Page.showCall', ['token' => $token]);
 			}
-			return new RedirectResponse($this->url->linkToRoute('core.login.showLoginForm', [
+			$response = new RedirectResponse($this->url->linkToRoute('core.login.showLoginForm', [
 				'redirect_url' => $redirectUrl,
 			]));
+			$response->throttle();
+			return $response;
 		}
 
 		if ($room->hasPassword()) {
@@ -300,15 +322,21 @@ protected function guestEnterRoom(string $token, string $password): Response {
 			if ($passwordVerification['result']) {
 				$this->talkSession->renewSessionId();
 				$this->talkSession->setPasswordForRoom($token, $password);
+				$this->throttler->resetDelay($this->request->getRemoteAddress(), 'talkRoomPassword', ['token' => $token]);
 			} else {
 				$this->talkSession->removePasswordForRoom($token);
+				$showBruteForceWarning = $this->throttler->getDelay($this->request->getRemoteAddress(), 'talkRoomPassword') > 5000;
+
 				if ($passwordVerification['url'] === '') {
-					return new TemplateResponse($this->appName, 'authenticate', [
+					$response = new TemplateResponse($this->appName, 'authenticate', [
 						'wrongpw' => $password !== '',
+						'showBruteForceWarning' => $showBruteForceWarning,
 					], 'guest');
+				} else {
+					$response = new RedirectResponse($passwordVerification['url']);
 				}
-
-				return new RedirectResponse($passwordVerification['url']);
+				$response->throttle(['token' => $token]);
+				return $response;
 			}
 		}
 