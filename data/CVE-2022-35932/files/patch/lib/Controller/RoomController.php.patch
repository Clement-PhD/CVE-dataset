@@ -28,6 +28,7 @@
 namespace OCA\Talk\Controller;
 
 use InvalidArgumentException;
+use OC\Security\Bruteforce\Throttler;
 use OCA\Talk\Chat\ChatManager;
 use OCA\Talk\Chat\MessageParser;
 use OCA\Talk\Config;
@@ -91,6 +92,7 @@ class RoomController extends AEnvironmentAwareController {
 	protected IL10N $l10n;
 	protected IConfig $config;
 	protected Config $talkConfig;
+	protected Throttler $throttler;
 	protected LoggerInterface $logger;
 
 	protected array $commonReadMessages = [];
@@ -116,6 +118,7 @@ public function __construct(string $appName,
 								IConfig $config,
 								Config $talkConfig,
 								ICloudIdManager $cloudIdManager,
+								Throttler $throttler,
 								LoggerInterface $logger) {
 		parent::__construct($appName, $request);
 		$this->session = $session;
@@ -137,6 +140,7 @@ public function __construct(string $appName,
 		$this->config = $config;
 		$this->talkConfig = $talkConfig;
 		$this->cloudIdManager = $cloudIdManager;
+		$this->throttler = $throttler;
 		$this->logger = $logger;
 	}
 
@@ -260,6 +264,7 @@ public function getListedRooms(string $searchTerm = ''): DataResponse {
 
 	/**
 	 * @PublicPage
+	 * @BruteForceProtection(action=talkRoomToken)
 	 *
 	 * @param string $token
 	 * @return DataResponse
@@ -268,6 +273,10 @@ public function getSingleRoom(string $token): DataResponse {
 		try {
 			$isSIPBridgeRequest = $this->validateSIPBridgeRequest($token);
 		} catch (UnauthorizedException $e) {
+			$ip = $this->request->getRemoteAddress();
+			$action = 'talkSipBridgeSecret';
+			$this->throttler->sleepDelay($ip, $action);
+			$this->throttler->registerAttempt($action, $ip);
 			return new DataResponse([], Http::STATUS_UNAUTHORIZED);
 		}
 
@@ -290,7 +299,9 @@ public function getSingleRoom(string $token): DataResponse {
 
 			return new DataResponse($this->formatRoom($room, $participant, [], $isSIPBridgeRequest), Http::STATUS_OK, $this->getTalkHashHeader());
 		} catch (RoomNotFoundException $e) {
-			return new DataResponse([], Http::STATUS_NOT_FOUND);
+			$response = new DataResponse([], Http::STATUS_NOT_FOUND);
+			$response->throttle();
+			return $response;
 		}
 	}
 
@@ -1330,6 +1341,7 @@ public function setPassword(string $password): DataResponse {
 	/**
 	 * @PublicPage
 	 * @UseSession
+	 * @BruteForceProtection(action=talkRoomPassword)
 	 *
 	 * @param string $token
 	 * @param string $password
@@ -1389,9 +1401,13 @@ public function joinRoom(string $token, string $password = '', bool $force = tru
 				$participant = $this->participantService->joinRoomAsNewGuest($this->roomService, $room, $password, $result['result'], $previousParticipant);
 			}
 		} catch (InvalidPasswordException $e) {
-			return new DataResponse([], Http::STATUS_FORBIDDEN);
+			$response = new DataResponse([], Http::STATUS_FORBIDDEN);
+			$response->throttle(['token' => $token]);
+			return $response;
 		} catch (UnauthorizedException $e) {
-			return new DataResponse([], Http::STATUS_NOT_FOUND);
+			$response = new DataResponse([], Http::STATUS_NOT_FOUND);
+			$response->throttle(['token' => $token]);
+			return $response;
 		}
 
 		$this->session->removePasswordForRoom($token);
@@ -1407,17 +1423,22 @@ public function joinRoom(string $token, string $password = '', bool $force = tru
 	/**
 	 * @PublicPage
 	 * @RequireRoom
+	 * @BruteForceProtection(action=talkSipBridgeSecret)
 	 *
 	 * @param string $pin
 	 * @return DataResponse
 	 */
 	public function getParticipantByDialInPin(string $pin): DataResponse {
 		try {
 			if (!$this->validateSIPBridgeRequest($this->room->getToken())) {
-				return new DataResponse([], Http::STATUS_UNAUTHORIZED);
+				$response = new DataResponse([], Http::STATUS_UNAUTHORIZED);
+				$response->throttle();
+				return $response;
 			}
 		} catch (UnauthorizedException $e) {
-			return new DataResponse([], Http::STATUS_UNAUTHORIZED);
+			$response = new DataResponse([], Http::STATUS_UNAUTHORIZED);
+			$response->throttle();
+			return $response;
 		}
 
 		try {
@@ -1432,16 +1453,21 @@ public function getParticipantByDialInPin(string $pin): DataResponse {
 	/**
 	 * @PublicPage
 	 * @RequireRoom
+	 * @BruteForceProtection(action=talkSipBridgeSecret)
 	 *
 	 * @return DataResponse
 	 */
 	public function createGuestByDialIn(): DataResponse {
 		try {
 			if (!$this->validateSIPBridgeRequest($this->room->getToken())) {
-				return new DataResponse([], Http::STATUS_UNAUTHORIZED);
+				$response = new DataResponse([], Http::STATUS_UNAUTHORIZED);
+				$response->throttle();
+				return $response;
 			}
 		} catch (UnauthorizedException $e) {
-			return new DataResponse([], Http::STATUS_UNAUTHORIZED);
+			$response = new DataResponse([], Http::STATUS_UNAUTHORIZED);
+			$response->throttle();
+			return $response;
 		}
 
 		if ($this->room->getSIPEnabled() !== Webinary::SIP_ENABLED_NO_PIN) {