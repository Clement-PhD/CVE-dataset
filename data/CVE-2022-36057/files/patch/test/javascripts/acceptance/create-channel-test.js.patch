@@ -4,7 +4,7 @@ import { acceptance, query } from "discourse/tests/helpers/qunit-helpers";
 import { test } from "qunit";
 
 acceptance("Discourse Chat - Create channel modal", function (needs) {
-  const maliciousText = "<script></script>";
+  const maliciousText = '"<script></script>';
 
   needs.user({
     username: "tomtom",
@@ -64,12 +64,21 @@ acceptance("Discourse Chat - Create channel modal", function (needs) {
 
     server.get(
       "/chat/api/category-chatables/:categoryId/permissions.json",
-      () =>
-        helper.response({
-          allowed_groups: ["@awesomeGroup"],
-          members_count: 2,
-          private: true,
-        })
+      (request) => {
+        if (request.params.categoryId === "2") {
+          return helper.response({
+            allowed_groups: ["@<script>evilgroup</script>"],
+            members_count: 2,
+            private: true,
+          });
+        } else {
+          return helper.response({
+            allowed_groups: ["@awesomeGroup"],
+            members_count: 2,
+            private: true,
+          });
+        }
+      }
     );
   });
 
@@ -127,31 +136,31 @@ acceptance("Discourse Chat - Create channel modal", function (needs) {
     );
   });
 
-  test("links to categories are escaped", async (assert) => {
+  test("includes group names in the hint", async (assert) => {
     await visit("/chat/channel/1/cat");
 
     const dropdown = selectKit(".edit-channels-dropdown");
     await dropdown.expand();
     await dropdown.selectRowByValue("openCreateChannelModal");
 
+    assert.strictEqual(
+      query(".create-channel-hint a").innerText,
+      "category security settings"
+    );
+    assert.ok(query(".create-channel-hint a").href.includes("/categories"));
+
     let categories = selectKit(".create-channel-modal .category-chooser");
     await categories.expand();
-    await categories.selectRowByName(maliciousText);
+    await categories.selectRowByName("Kittens");
 
     assert.strictEqual(
-      query(".create-channel-hint a").innerText,
-      "security settings"
-    );
-    assert.ok(
-      query(".create-channel-hint a").href.includes(
-        "c/%3Cscript%3E%3C/script%3E/edit/security"
-      )
+      query(".create-channel-hint").innerHTML.trim(),
+      'Users in @awesomeGroup will have access to this channel per the <a href="/c/cats/kittens/edit/security" target="_blank">security settings</a>'
     );
   });
 
-  test("includes group names in the hint", async (assert) => {
+  test("escapes group name/category slug in the hint", async (assert) => {
     await visit("/chat/channel/1/cat");
-
     const dropdown = selectKit(".edit-channels-dropdown");
     await dropdown.expand();
     await dropdown.selectRowByValue("openCreateChannelModal");
@@ -162,13 +171,18 @@ acceptance("Discourse Chat - Create channel modal", function (needs) {
     );
     assert.ok(query(".create-channel-hint a").href.includes("/categories"));
 
-    let categories = selectKit(".create-channel-modal .category-chooser");
+    const categories = selectKit(".create-channel-modal .category-chooser");
     await categories.expand();
-    await categories.selectRowByName("Kittens");
+    await categories.selectRowByValue(2);
 
     assert.strictEqual(
-      query(".create-channel-hint").innerText,
-      "Users in @awesomeGroup will have access to this channel per the security settings"
+      query(".create-channel-hint").innerHTML.trim(),
+      'Users in @&lt;script&gt;evilgroup&lt;/script&gt; will have access to this channel per the <a href="/c/&quot;<script></script>/edit/security" target="_blank">security settings</a>'
+    );
+    assert.ok(
+      query(".create-channel-hint a").href.includes(
+        "c/%22%3Cscript%3E%3C/script%3E/edit/security"
+      )
     );
   });
 });