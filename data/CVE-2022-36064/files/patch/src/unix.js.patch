@@ -41,21 +41,23 @@ const binZsh = "zsh";
  * @returns {string} The escaped argument.
  */
 function escapeArgBash(arg, interpolation, quoted) {
-  let result = arg.replace(/\u0000/g, "");
+  let result = arg.replace(/\0/gu, "");
 
   if (interpolation) {
     result = result
-      .replace(/\\/g, "\\\\")
-      .replace(/\n/g, " ")
-      .replace(/(^|\s)(~|#)/g, "$1\\$2")
-      .replace(/(\*|\?)/g, "\\$1")
-      .replace(/(\$|\;|\&|\|)/g, "\\$1")
-      .replace(/(\(|\)|\<|\>)/g, "\\$1")
-      .replace(/("|'|`)/g, "\\$1")
-      .replace(/\{(?=([^]*?(?:\,|\.)[^]*?)\})/g, "\\{")
-      .replace(/(?<=\=(?:[^]*?:)?)(~)(?=\:|\=|\-|\+|\/|0|\s|$)/g, "\\$1");
+      .replace(/\\/gu, "\\\\")
+      .replace(/\n/gu, " ")
+      .replace(/(^|\s)([#~])/gu, "$1\\$2")
+      .replace(/([*?])/gu, "\\$1")
+      .replace(/([$&;|])/gu, "\\$1")
+      .replace(/([()<>])/gu, "\\$1")
+      .replace(/(["'`])/gu, "\\$1")
+      .replace(/(?<!\{)\{+(?=(?:[^{][^,.]*)?[,.][^}]*\})/gu, (curlyBraces) =>
+        curlyBraces.replace(/\{/gu, "\\{")
+      )
+      .replace(/(?<=[:=])(~)(?=[\s+\-/0:=]|$)/gu, "\\$1");
   } else if (quoted) {
-    result = result.replace(/'/g, `'\\''`);
+    result = result.replace(/'/gu, `'\\''`);
   }
 
   return result;
@@ -70,19 +72,19 @@ function escapeArgBash(arg, interpolation, quoted) {
  * @returns {string} The escaped argument.
  */
 function escapeArgDash(arg, interpolation, quoted) {
-  let result = arg.replace(/\u0000/g, "");
+  let result = arg.replace(/\0/gu, "");
 
   if (interpolation) {
     result = result
-      .replace(/\\/g, "\\\\")
-      .replace(/\n/g, " ")
-      .replace(/(^|\s)(~|#)/g, "$1\\$2")
-      .replace(/(\*|\?)/g, "\\$1")
-      .replace(/(\$|\;|\&|\|)/g, "\\$1")
-      .replace(/(\(|\)|\<|\>)/g, "\\$1")
-      .replace(/("|'|`)/g, "\\$1");
+      .replace(/\\/gu, "\\\\")
+      .replace(/\n/gu, " ")
+      .replace(/(^|\s)([#~])/gu, "$1\\$2")
+      .replace(/([*?])/gu, "\\$1")
+      .replace(/([$&;|])/gu, "\\$1")
+      .replace(/([()<>])/gu, "\\$1")
+      .replace(/(["'`])/gu, "\\$1");
   } else if (quoted) {
-    result = result.replace(/'/g, `'\\''`);
+    result = result.replace(/'/gu, `'\\''`);
   }
 
   return result;
@@ -97,20 +99,20 @@ function escapeArgDash(arg, interpolation, quoted) {
  * @returns {string} The escaped argument.
  */
 function escapeArgZsh(arg, interpolation, quoted) {
-  let result = arg.replace(/\u0000/g, "");
+  let result = arg.replace(/\0/gu, "");
 
   if (interpolation) {
     result = result
-      .replace(/\\/g, "\\\\")
-      .replace(/\n/g, " ")
-      .replace(/(^|\s)(~|#|=)/g, "$1\\$2")
-      .replace(/(\*|\?)/g, "\\$1")
-      .replace(/(\$|\;|\&|\|)/g, "\\$1")
-      .replace(/(\(|\)|\<|\>)/g, "\\$1")
-      .replace(/("|'|`)/g, "\\$1")
-      .replace(/(\[|\]|\{|\})/g, "\\$1");
+      .replace(/\\/gu, "\\\\")
+      .replace(/\n/gu, " ")
+      .replace(/(^|\s)([#=~])/gu, "$1\\$2")
+      .replace(/([*?])/gu, "\\$1")
+      .replace(/([$&;|])/gu, "\\$1")
+      .replace(/([()<>])/gu, "\\$1")
+      .replace(/(["'`])/gu, "\\$1")
+      .replace(/([[\]{}])/gu, "\\$1");
   } else if (quoted) {
-    result = result.replace(/'/g, `'\\''`);
+    result = result.replace(/'/gu, `'\\''`);
   }
 
   return result;