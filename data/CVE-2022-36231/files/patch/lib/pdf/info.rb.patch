@@ -1,5 +1,6 @@
 require 'date' unless defined? DateTime
 require 'pdf/info/exceptions'
+require 'open3'
 
 module PDF
   class Info
@@ -18,20 +19,19 @@ def initialize(pdf_path)
     end
 
     def command
-      output = `#{self.class.command_path} -enc UTF-8 -f 1 -l -1 "#{@pdf_path}" 2> /dev/null`
-      exit_code = $?
-      case exit_code
-      when 0 || nil
-        if !output.valid_encoding?
+      stdout, stderr, status = Open3.capture3(self.class.command_path, "-enc", "UTF-8", "-f", "1", "-l", "-1", @pdf_path)
+
+      if status.success?
+        if !stdout.valid_encoding?
           # It's already UTF-8, so we need to convert to UTF-16 and back to
           # force the bad characters to be replaced.
-          output.encode!('UTF-16', :undef => :replace, :invalid => :replace, :replace => "")
-          output.encode!('UTF-8')
+          stdout.encode!('UTF-16', :undef => :replace, :invalid => :replace, :replace => "")
+          stdout.encode!('UTF-8')
         end
-        return output
+        return stdout
       else
         exit_error = PDF::Info::UnexpectedExitError.new
-        exit_error.exit_code = exit_code
+        exit_error.exit_code = status.exitstatus
         raise exit_error
       end
     end
@@ -82,7 +82,11 @@ def process_output(output)
           metadata[:pages] << pair.last.scan(/[\d.]+/).map(&:to_f)
           metadata[:format] = pair.last.scan(/.*\(\w+\)$/).to_s
         when String
-          metadata[pair.first.downcase.tr(" ", "_").to_sym] = pair.last.to_s.strip
+          # For a specific key, take the first value, and don't allow later keys to overwrite it
+          # This prevents later declarations of 'Title' from overwriting the title of the document.
+          key = pair.first.downcase.tr(" ", "_").to_sym
+          value = pair.last.to_s.strip
+          metadata[key] = value unless metadata[key]
         end
       end
 