--- /dev/null
+++ /dev/null
@@ -359,107 +359,19 @@ public void shouldVerifyUnauthorized() {
     @Test
     public void shouldVerifyNotFound() {
         final Integer secureHostPort = container.getMappedPort(9200);
-        final String secureHostEndpoint = "http://esdatabasenotfound.co";
+        final String secureHostEndpoint =   "http://esdatabasenotfound.co" ;
         DatasourceConfiguration datasourceConfiguration = new DatasourceConfiguration();
-        Endpoint endpoint = new Endpoint(secureHostEndpoint, Long.valueOf(secureHostPort));
+        Endpoint endpoint = new Endpoint(secureHostEndpoint,Long.valueOf(secureHostPort));
         datasourceConfiguration.setEndpoints(Collections.singletonList(endpoint));
 
         StepVerifier.create(pluginExecutor.testDatasource(datasourceConfiguration)
                         .map(result -> {
-                            return (Set<String>) result.getInvalids();
+                            return  (Set<String>) result.getInvalids();
                         }))
                 .expectNext(Set.of(ElasticSearchPlugin.ElasticSearchPluginExecutor.esDatasourceNotFoundMessage))
                 .verifyComplete();
 
     }
 
-    @Test
-    public void itShouldDenyTestDatasourceWithInstanceMetadataAws() {
-        DatasourceConfiguration datasourceConfiguration = new DatasourceConfiguration();
-        datasourceConfiguration.setAuthentication(elasticInstanceCredentials);
-        Endpoint endpoint = new Endpoint();
-        endpoint.setHost("http://169.254.169.254");
-        endpoint.setPort(Long.valueOf(port));
-        datasourceConfiguration.setEndpoints(Collections.singletonList(endpoint));
-
-        StepVerifier.create(pluginExecutor.testDatasource(datasourceConfiguration))
-                .assertNext(result -> {
-                    assertFalse(result.getInvalids().isEmpty());
-                    assertTrue(result.getInvalids().contains("Invalid host provided."));
-                })
-                .verifyComplete();
-    }
-
-    @Test
-    public void itShouldDenyTestDatasourceWithInstanceMetadataGcp() {
-        DatasourceConfiguration datasourceConfiguration = new DatasourceConfiguration();
-        datasourceConfiguration.setAuthentication(elasticInstanceCredentials);
-        Endpoint endpoint = new Endpoint();
-        endpoint.setHost("http://metadata.google.internal");
-        endpoint.setPort(Long.valueOf(port));
-        datasourceConfiguration.setEndpoints(Collections.singletonList(endpoint));
-
-        StepVerifier.create(pluginExecutor.testDatasource(datasourceConfiguration))
-                .assertNext(result -> {
-                    assertFalse(result.getInvalids().isEmpty());
-                    assertTrue(result.getInvalids().contains("Invalid host provided."));
-                })
-                .verifyComplete();
-    }
 
-    @Test
-    public void itShouldDenyCreateDatasourceWithInstanceMetadataAws() {
-        DatasourceConfiguration datasourceConfiguration = new DatasourceConfiguration();
-        datasourceConfiguration.setAuthentication(elasticInstanceCredentials);
-        Endpoint endpoint = new Endpoint();
-        endpoint.setHost("http://169.254.169.254");
-        endpoint.setPort(Long.valueOf(port));
-        datasourceConfiguration.setEndpoints(Collections.singletonList(endpoint));
-
-        StepVerifier.create(pluginExecutor.datasourceCreate(datasourceConfiguration))
-                .verifyErrorSatisfies(e -> {
-                    assertTrue(e instanceof AppsmithPluginException);
-                    assertEquals("Invalid host provided.", e.getMessage());
-                });
-    }
-
-    @Test
-    public void itShouldDenyCreateDatasourceWithInstanceMetadataGcp() {
-        DatasourceConfiguration datasourceConfiguration = new DatasourceConfiguration();
-        datasourceConfiguration.setAuthentication(elasticInstanceCredentials);
-        Endpoint endpoint = new Endpoint();
-        endpoint.setHost("https://metadata.google.internal");
-        endpoint.setPort(Long.valueOf(port));
-        datasourceConfiguration.setEndpoints(Collections.singletonList(endpoint));
-
-        StepVerifier.create(pluginExecutor.datasourceCreate(datasourceConfiguration))
-                .verifyErrorSatisfies(e -> {
-                    assertTrue(e instanceof AppsmithPluginException);
-                    assertEquals("Invalid host provided.", e.getMessage());
-                });
-    }
-
-    @Test
-    public void itShouldValidateDatasourceWithInstanceMetadataAws() {
-        DatasourceConfiguration datasourceConfiguration = new DatasourceConfiguration();
-        datasourceConfiguration.setAuthentication(elasticInstanceCredentials);
-        Endpoint endpoint = new Endpoint();
-        endpoint.setHost("http://169.254.169.254");
-        endpoint.setPort(Long.valueOf(port));
-        datasourceConfiguration.setEndpoints(Collections.singletonList(endpoint));
-
-        Assert.assertEquals(Set.of("Invalid host provided."), pluginExecutor.validateDatasource(datasourceConfiguration));
-    }
-
-    @Test
-    public void itShouldValidateDatasourceWithInstanceMetadataGcp() {
-        DatasourceConfiguration datasourceConfiguration = new DatasourceConfiguration();
-        datasourceConfiguration.setAuthentication(elasticInstanceCredentials);
-        Endpoint endpoint = new Endpoint();
-        endpoint.setHost("https://metadata.google.internal");
-        endpoint.setPort(Long.valueOf(port));
-        datasourceConfiguration.setEndpoints(Collections.singletonList(endpoint));
-
-        Assert.assertEquals(Set.of("Invalid host provided."), pluginExecutor.validateDatasource(datasourceConfiguration));
-    }
 
