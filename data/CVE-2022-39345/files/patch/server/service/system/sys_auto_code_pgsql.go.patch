@@ -16,31 +16,37 @@ type autoCodePgsql struct{}
 // GetDB 获取数据库的所有数据库名
 // Author [piexlmax](https://github.com/piexlmax)
 // Author [SliverHorn](https://github.com/SliverHorn)
-func (a *autoCodePgsql) GetDB() (data []response.Db, err error) {
+func (a *autoCodePgsql) GetDB(businessDB string) (data []response.Db, err error) {
 	var entities []response.Db
 	sql := `SELECT datname as database FROM pg_database WHERE datistemplate = false`
-	err = global.GVA_DB.Raw(sql).Scan(&entities).Error
+	if businessDB == "" {
+		err = global.GVA_DB.Raw(sql).Scan(&entities).Error
+	} else {
+		err = global.GVA_DBList[businessDB].Raw(sql).Scan(&entities).Error
+	}
+
 	return entities, err
 }
 
 // GetTables 获取数据库的所有表名
 // Author [piexlmax](https://github.com/piexlmax)
 // Author [SliverHorn](https://github.com/SliverHorn)
-func (a *autoCodePgsql) GetTables(dbName string) (data []response.Table, err error) {
+func (a *autoCodePgsql) GetTables(businessDB string, dbName string) (data []response.Table, err error) {
 	var entities []response.Table
 	sql := `select table_name as table_name from information_schema.tables where table_catalog = ? and table_schema = ?`
 	db, _err := gorm.Open(postgres.Open(global.GVA_CONFIG.Pgsql.LinkDsn(dbName)), &gorm.Config{Logger: logger.Default.LogMode(logger.Info)})
 	if _err != nil {
 		return nil, errors.Wrapf(err, "[pgsql] 连接 数据库(%s)的表失败!", dbName)
 	}
+
 	err = db.Raw(sql, dbName, "public").Scan(&entities).Error
 	return entities, err
 }
 
 // GetColumn 获取指定数据库和指定数据表的所有字段名,类型值等
 // Author [piexlmax](https://github.com/piexlmax)
 // Author [SliverHorn](https://github.com/SliverHorn)
-func (a *autoCodePgsql) GetColumn(tableName string, dbName string) (data []response.Column, err error) {
+func (a *autoCodePgsql) GetColumn(businessDB string, tableName string, dbName string) (data []response.Column, err error) {
 	// todo 数据获取不全, 待完善sql
 	sql := `
 		SELECT psc.COLUMN_NAME AS COLUMN_NAME,