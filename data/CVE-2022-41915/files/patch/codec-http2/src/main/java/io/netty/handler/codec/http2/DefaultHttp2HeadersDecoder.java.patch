@@ -31,6 +31,7 @@ public class DefaultHttp2HeadersDecoder implements Http2HeadersDecoder, Http2Hea
 
     private final HpackDecoder hpackDecoder;
     private final boolean validateHeaders;
+    private final boolean validateHeaderValues;
     private long maxHeaderListSizeGoAway;
 
     /**
@@ -43,10 +44,26 @@ public DefaultHttp2HeadersDecoder() {
         this(true);
     }
 
+    /**
+     * Create a new instance.
+     * @param validateHeaders {@code true} to validate headers are valid according to the RFC.
+     */
     public DefaultHttp2HeadersDecoder(boolean validateHeaders) {
         this(validateHeaders, DEFAULT_HEADER_LIST_SIZE);
     }
 
+    /**
+     * Create a new instance.
+     *
+     * @param validateHeaders {@code true} to validate headers are valid according to the RFC.
+     * This validates everything except header values.
+     * @param validateHeaderValues {@code true} to validate that header <em>values</em> are valid according to the RFC.
+     * Since this is potentially expensive, it can be enabled separately from {@code validateHeaders}.
+     */
+    public DefaultHttp2HeadersDecoder(boolean validateHeaders, boolean validateHeaderValues) {
+        this(validateHeaders, validateHeaderValues, DEFAULT_HEADER_LIST_SIZE);
+    }
+
     /**
      * Create a new instance.
      * @param validateHeaders {@code true} to validate headers are valid according to the RFC.
@@ -56,12 +73,28 @@ public DefaultHttp2HeadersDecoder(boolean validateHeaders) {
      *  (which is dangerous).
      */
     public DefaultHttp2HeadersDecoder(boolean validateHeaders, long maxHeaderListSize) {
-        this(validateHeaders, maxHeaderListSize, /* initialHuffmanDecodeCapacity= */ -1);
+        this(validateHeaders, false, new HpackDecoder(maxHeaderListSize));
+    }
+
+    /**
+     * Create a new instance.
+     * @param validateHeaders {@code true} to validate headers are valid according to the RFC.
+     * This validates everything except header values.
+     * @param validateHeaderValues {@code true} to validate that header <em>values</em> are valid according to the RFC.
+     * Since this is potentially expensive, it can be enabled separately from {@code validateHeaders}.
+     * @param maxHeaderListSize This is the only setting that can be configured before notifying the peer.
+     *  This is because <a href="https://tools.ietf.org/html/rfc7540#section-6.5.1">SETTINGS_MAX_HEADER_LIST_SIZE</a>
+     *  allows a lower than advertised limit from being enforced, and the default limit is unlimited
+     *  (which is dangerous).
+     */
+    public DefaultHttp2HeadersDecoder(boolean validateHeaders, boolean validateHeaderValues, long maxHeaderListSize) {
+        this(validateHeaders, validateHeaderValues, new HpackDecoder(maxHeaderListSize));
     }
 
     /**
      * Create a new instance.
      * @param validateHeaders {@code true} to validate headers are valid according to the RFC.
+     * This validates everything except header values.
      * @param maxHeaderListSize This is the only setting that can be configured before notifying the peer.
      *  This is because <a href="https://tools.ietf.org/html/rfc7540#section-6.5.1">SETTINGS_MAX_HEADER_LIST_SIZE</a>
      *  allows a lower than advertised limit from being enforced, and the default limit is unlimited
@@ -70,16 +103,17 @@ public DefaultHttp2HeadersDecoder(boolean validateHeaders, long maxHeaderListSiz
      */
     public DefaultHttp2HeadersDecoder(boolean validateHeaders, long maxHeaderListSize,
                                       @Deprecated int initialHuffmanDecodeCapacity) {
-        this(validateHeaders, new HpackDecoder(maxHeaderListSize));
+        this(validateHeaders, false, new HpackDecoder(maxHeaderListSize));
     }
 
     /**
-     * Exposed Used for testing only! Default values used in the initial settings frame are overridden intentionally
+     * Exposed for testing only! Default values used in the initial settings frame are overridden intentionally
      * for testing but violate the RFC if used outside the scope of testing.
      */
-    DefaultHttp2HeadersDecoder(boolean validateHeaders, HpackDecoder hpackDecoder) {
+    DefaultHttp2HeadersDecoder(boolean validateHeaders, boolean validateHeaderValues, HpackDecoder hpackDecoder) {
         this.hpackDecoder = ObjectUtil.checkNotNull(hpackDecoder, "hpackDecoder");
         this.validateHeaders = validateHeaders;
+        this.validateHeaderValues = validateHeaderValues;
         maxHeaderListSizeGoAway =
                 Http2CodecUtil.calculateMaxHeaderListSizeGoAway(hpackDecoder.getMaxHeaderListSize());
     }
@@ -147,17 +181,33 @@ protected final int numberOfHeadersGuess() {
 
     /**
      * Determines if the headers should be validated as a result of the decode operation.
+     * <p>
+     * <strong>Note:</strong> This does not include validation of header <em>values</em>, since that is potentially
+     * expensive to do. Value validation is instead {@linkplain #validateHeaderValues() enabled separately}.
+     *
      * @return {@code true} if the headers should be validated as a result of the decode operation.
      */
     protected final boolean validateHeaders() {
         return validateHeaders;
     }
 
+    /**
+     * Determines if the header values should be validated as a result of the decode operation.
+     * <p>
+     * <strong>Note:</strong> This <em>only</em> validates the values of headers. All other header validations are
+     * instead {@linkplain #validateHeaders() enabled separately}.
+     *
+     * @return {@code true} if the header values should be validated as a result of the decode operation.
+     */
+    protected boolean validateHeaderValues() { // Not 'final' due to backwards compatibility.
+        return validateHeaderValues;
+    }
+
     /**
      * Create a new {@link Http2Headers} object which will store the results of the decode operation.
      * @return a new {@link Http2Headers} object which will store the results of the decode operation.
      */
     protected Http2Headers newHeaders() {
-        return new DefaultHttp2Headers(validateHeaders, (int) headerArraySizeAccumulator);
+        return new DefaultHttp2Headers(validateHeaders, validateHeaderValues, (int) headerArraySizeAccumulator);
     }
 }