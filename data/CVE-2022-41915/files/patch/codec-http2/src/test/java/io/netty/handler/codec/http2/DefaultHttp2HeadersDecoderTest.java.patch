@@ -12,7 +12,6 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-
 package io.netty.handler.codec.http2;
 
 import io.netty.buffer.ByteBuf;
@@ -24,6 +23,11 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.function.Executable;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.ArrayList;
+import java.util.List;
 
 import static io.netty.handler.codec.http2.Http2CodecUtil.MAX_HEADER_LIST_SIZE;
 import static io.netty.handler.codec.http2.Http2CodecUtil.MIN_HEADER_LIST_SIZE;
@@ -138,7 +142,7 @@ public void duplicatePseudoHeadersMustFailValidation() throws Exception {
     }
 
     @Test
-    void decodingTrailersTeHeaderMustNotFailValidation() throws Exception {
+    public void decodingTrailersTeHeaderMustNotFailValidation() throws Exception {
         // The TE header is expressly allowed to have the value "trailers".
         ByteBuf buf = null;
         try {
@@ -152,7 +156,7 @@ void decodingTrailersTeHeaderMustNotFailValidation() throws Exception {
 
     @Test
     public void decodingConnectionRelatedHeadersMustFailValidation() throws Exception {
-        final DefaultHttp2HeadersDecoder decoder = new DefaultHttp2HeadersDecoder(true);
+        final DefaultHttp2HeadersDecoder decoder = new DefaultHttp2HeadersDecoder(true, true);
         // Standard connection related headers
         verifyValidationFails(decoder, encode(b(":method"), b("GET"), b("keep-alive"), b("timeout=5")));
         verifyValidationFails(decoder, encode(b(":method"), b("GET"),
@@ -172,6 +176,107 @@ public void decodingConnectionRelatedHeadersMustFailValidation() throws Exceptio
         verifyValidationFails(decoder, encode(b(":method"), b("GET"), b("te"), b("compress")));
     }
 
+    public static List<Integer> illegalFirstChar() {
+        ArrayList<Integer> list = new ArrayList<Integer>();
+        for (int i = 0; i < 0x21; i++) {
+            list.add(i);
+        }
+        list.add(0x7F);
+        return list;
+    }
+
+    @ParameterizedTest
+    @MethodSource("illegalFirstChar")
+    void decodingInvalidHeaderValueMustFailValidationIfFirstCharIsIllegal(int illegalFirstChar)throws Exception {
+        final DefaultHttp2HeadersDecoder decoder = new DefaultHttp2HeadersDecoder(true, true);
+        verifyValidationFails(decoder, encode(b(":method"), b("GET"),
+                b("test_header"), new byte[]{ (byte) illegalFirstChar, (byte) 'a' }));
+    }
+
+    public static List<Integer> illegalNotFirstChar() {
+        ArrayList<Integer> list = new ArrayList<Integer>();
+        for (int i = 0; i < 0x21; i++) {
+            if (i == ' ' || i == '\t') {
+                continue; // Space and horizontal tab are only illegal as first chars.
+            }
+            list.add(i);
+        }
+        list.add(0x7F);
+        return list;
+    }
+
+    @ParameterizedTest
+    @MethodSource("illegalNotFirstChar")
+    void decodingInvalidHeaderValueMustFailValidationIfANotFirstCharIsIllegal(int illegalSecondChar) throws Exception {
+        final DefaultHttp2HeadersDecoder decoder = new DefaultHttp2HeadersDecoder(true, true);
+        verifyValidationFails(decoder, encode(b(":method"), b("GET"),
+                b("test_header"), new byte[]{ (byte) 'a', (byte) illegalSecondChar }));
+    }
+
+    @Test
+    public void headerValuesAllowSpaceAfterFirstCharacter() throws Exception {
+        final DefaultHttp2HeadersDecoder decoder = new DefaultHttp2HeadersDecoder(true);
+        ByteBuf buf = null;
+        try {
+            buf = encode(b(":method"), b("GET"), b("test_header"), b("a b"));
+            Http2Headers headers = decoder.decodeHeaders(1, buf); // This must not throw.
+            assertThat(headers.get("test_header")).isEqualToIgnoringCase("a b");
+        } finally {
+            ReferenceCountUtil.release(buf);
+        }
+    }
+
+    @Test
+    public void headerValuesAllowHorzontalTabAfterFirstCharacter() throws Exception {
+        final DefaultHttp2HeadersDecoder decoder = new DefaultHttp2HeadersDecoder(true);
+        ByteBuf buf = null;
+        try {
+            buf = encode(b(":method"), b("GET"), b("test_header"), b("a\tb"));
+            Http2Headers headers = decoder.decodeHeaders(1, buf); // This must not throw.
+            assertThat(headers.get("test_header")).isEqualToIgnoringCase("a\tb");
+        } finally {
+            ReferenceCountUtil.release(buf);
+        }
+    }
+
+    public static List<Integer> validObsText() {
+        ArrayList<Integer> list = new ArrayList<Integer>();
+        for (int i = 0x80; i <= 0xFF; i++) {
+            list.add(i);
+        }
+        return list;
+    }
+
+    @ParameterizedTest
+    @MethodSource("validObsText")
+    void headerValuesAllowObsTextInFirstChar(int i) throws Exception {
+        final DefaultHttp2HeadersDecoder decoder = new DefaultHttp2HeadersDecoder(true);
+        ByteBuf buf = null;
+        try {
+            byte[] bytes = {(byte) i, 'a'};
+            buf = encode(b(":method"), b("GET"), b("test_header"), bytes);
+            Http2Headers headers = decoder.decodeHeaders(1, buf); // This must not throw.
+            assertThat(headers.get("test_header")).isEqualTo(new AsciiString(bytes));
+        } finally {
+            ReferenceCountUtil.release(buf);
+        }
+    }
+
+    @ParameterizedTest
+    @MethodSource("validObsText")
+    void headerValuesAllowObsTextInNonFirstChar(int i) throws Exception {
+        final DefaultHttp2HeadersDecoder decoder = new DefaultHttp2HeadersDecoder(true);
+        ByteBuf buf = null;
+        try {
+            byte[] bytes = {(byte) 'a', (byte) i};
+            buf = encode(b(":method"), b("GET"), b("test_header"), bytes);
+            Http2Headers headers = decoder.decodeHeaders(1, buf); // This must not throw.
+            assertThat(headers.get("test_header")).isEqualTo(new AsciiString(bytes));
+        } finally {
+            ReferenceCountUtil.release(buf);
+        }
+    }
+
     private static void verifyValidationFails(final DefaultHttp2HeadersDecoder decoder, final ByteBuf buf) {
         try {
             Http2Exception e = assertThrows(Http2Exception.class, new Executable() {