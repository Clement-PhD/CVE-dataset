--- /dev/null
+++ /dev/null
@@ -70,33 +60,4 @@ void LogHandler::setupStdoutLogger() {
   stdoutConf.setGlobally(el::ConfigurationType::ToFile, "false");
   el::Loggers::reconfigureLogger(stdoutLogger, stdoutConf);
 }
-
-string LogHandler::createLogFile(const string &path, const string &filename) {
-  string fullFname = path + "/" + filename;
-  try {
-    fs::create_directories(path);
-  } catch (const fs::filesystem_error &fse) {
-    CLOG(ERROR, "stdout") << "Cannot create logfile directory: " << fse.what()
-                          << endl;
-    exit(1);
-  }
-#ifdef WIN32
-  // O_NOFOLLOW does not exist on windows
-  FATAL_FAIL(::open(fullFname.c_str(), O_EXCL | O_CREAT, 0600));
-#else
-  FATAL_FAIL(::open(fullFname.c_str(), O_NOFOLLOW | O_EXCL | O_CREAT, 0600));
-#endif
-  return fullFname;
-}
-
-void LogHandler::stderrToFile(const string &path,
-                              const string &stderrFilename) {
-  string fullFname = createLogFile(path, stderrFilename);
-  FILE *stderr_stream = freopen(fullFname.c_str(), "w", stderr);
-  if (!stderr_stream) {
-    STFATAL << "Invalid filename " << stderrFilename;
-  }
-  setvbuf(stderr_stream, NULL, _IOLBF, BUFSIZ);  // set to line buffering
-}
-
 
