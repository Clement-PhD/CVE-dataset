@@ -9,7 +9,13 @@ import {
 } from "../../../src/utils/types";
 import { deserialize } from "class-transformer";
 import { ParticipantObject, Thread } from "../../../src/services/messages/entities/threads";
-import { createMessage, e2e_createMessage, e2e_createThread } from "./utils";
+import {
+  createMessage,
+  createParticipant,
+  e2e_createChannel,
+  e2e_createMessage,
+  e2e_createThread,
+} from "./utils";
 import { Message } from "../../../src/services/messages/entities/messages";
 import { v1 as uuidv1 } from "uuid";
 import { MessageWithReplies } from "../../../src/services/messages/types";
@@ -98,98 +104,10 @@ describe("The Messages feature", () => {
       expect(listResponse.statusCode).toBe(200);
       expect(listResult.resources.length).toBe(3);
     });
-
-    it("should move the message in threads", async () => {
-      const userA = uuidv1();
-      const userB = uuidv1();
-      const userC = uuidv1();
-
-      const thread1Request = await e2e_createThread(
-        platform,
-        [],
-        createMessage({ text: "Message A in thread 1", user_id: userA }),
-      );
-      const thread1Result: ResourceUpdateResponse<Thread> = deserialize(
-        ResourceUpdateResponse,
-        thread1Request.body,
-      );
-      const thread1: Thread = thread1Result.resource;
-
-      const thread2Request = await e2e_createThread(
-        platform,
-        [],
-        createMessage({ text: "Message B in thread 2", user_id: userB }),
-      );
-      const thread2Result: ResourceUpdateResponse<Thread> = deserialize(
-        ResourceUpdateResponse,
-        thread2Request.body,
-      );
-      const thread2: Thread = thread2Result.resource;
-
-      const messageCRequest = await e2e_createMessage(
-        platform,
-        thread1.id,
-        createMessage({ text: "Message C in thread 1", user_id: userC }),
-      );
-      const messageCResult: ResourceUpdateResponse<Message> = deserialize(
-        ResourceUpdateResponse,
-        messageCRequest.body,
-      );
-      const messageC: Message = messageCResult.resource;
-
-      const messageCAfterMoveRequest = await platform.app.inject({
-        method: "POST",
-        url: `${url}/companies/${platform.workspace.company_id}/threads/${thread2.id}/messages/${messageC.id}`,
-        headers: {
-          authorization: `Bearer ${await platform.auth.getJWTToken({ sub: userA })}`,
-        },
-        payload: {
-          resource: messageC,
-          options: {
-            previous_thread: thread1.id,
-          },
-        },
-      });
-      const messageCAfterMoveResult: ResourceUpdateResponse<Message> = deserialize(
-        ResourceUpdateResponse,
-        messageCAfterMoveRequest.body,
-      );
-      const messageCAfterMove: Message = messageCAfterMoveResult.resource;
-
-      //See if message was moved correctly to the new thread
-      expect(messageCAfterMove.user_id).toBe(userC);
-      expect(messageCAfterMove.thread_id).toBe(thread2.id);
-
-      const messageCAfterMove2Request = await platform.app.inject({
-        method: "POST",
-        url: `${url}/companies/${platform.workspace.company_id}/threads/${messageC.id}/messages/${messageC.id}`,
-        headers: {
-          authorization: `Bearer ${await platform.auth.getJWTToken({ sub: userA })}`,
-        },
-        payload: {
-          resource: messageC,
-          options: {
-            previous_thread: thread2.id,
-          },
-        },
-      });
-      const messageCAfterMove2Result: ResourceUpdateResponse<Message> = deserialize(
-        ResourceUpdateResponse,
-        messageCAfterMove2Request.body,
-      );
-      const messageCAfter2Move: Message = messageCAfterMove2Result.resource;
-
-      //See if message was moved correctly to new standalone thread
-      expect(messageCAfter2Move.user_id).toBe(userC);
-      expect(messageCAfter2Move.thread_id).toBe(messageCAfter2Move.id);
-
-      //TODO check counts
-    });
   });
 
   describe("Inbox", () => {
     it("Should get recent user messages", async done => {
-      const channel = channelUtils.getChannel();
       const directChannelIn = channelUtils.getDirectChannel();
       const members = [platform.currentUser.id, uuidv1()];
       const directWorkspace: Workspace = {
@@ -198,7 +116,6 @@ describe("The Messages feature", () => {
       };
 
       await Promise.all([
-        gr.services.channels.channels.save(channel, {}, getContext()),
         gr.services.channels.channels.save<ChannelSaveOptions>(
           directChannelIn,
           {
@@ -209,12 +126,12 @@ describe("The Messages feature", () => {
       ]);
 
       const recipient: ParticipantObject = {
-        company_id: platform.workspace.company_id,
         created_at: 0,
         created_by: "",
-        id: channel.id,
         type: "channel",
+        company_id: directChannelIn.company_id,
         workspace_id: "direct",
+        id: directChannelIn.id,
       };
 
       for (let i = 0; i < 6; i++) {
@@ -270,8 +187,8 @@ describe("The Messages feature", () => {
           application_id: null,
           text: expect.any(String),
           cache: {
-            company_id: channel.company_id,
-            channel_id: channel.id,
+            company_id: directChannelIn.company_id,
+            channel_id: directChannelIn.id,
           },
         });
       }