@@ -13,7 +13,8 @@
 from tlsfuzzer.messages import Connect, ClientHelloGenerator, \
     ClientKeyExchangeGenerator, ChangeCipherSpecGenerator, \
     FinishedGenerator, ApplicationDataGenerator, AlertGenerator, \
-    TCPBufferingEnable, TCPBufferingDisable, TCPBufferingFlush, fuzz_mac
+    TCPBufferingEnable, TCPBufferingDisable, TCPBufferingFlush, fuzz_mac, \
+    fuzz_padding
 from tlsfuzzer.expect import ExpectServerHello, ExpectCertificate, \
     ExpectServerHelloDone, ExpectChangeCipherSpec, ExpectFinished, \
     ExpectAlert, ExpectClose, ExpectApplicationData, ExpectNoMessage
@@ -23,8 +24,9 @@
 from tlslite.utils.dns_utils import is_valid_hostname
 from tlslite.extensions import SNIExtension
 from tlsfuzzer.utils.lists import natural_sort_keys
+from tlsfuzzer.utils.ordered_dict import OrderedDict
 
-version = 1
+version = 7
 
 
 def help_msg():
@@ -67,14 +69,17 @@ def help_msg():
     print(" --no-sni       do not send server name extension.")
     print("                Sends extension by default if the hostname is a")
     print("                valid DNS name, not an IP address")
+    print(" --cpu-list     Set the CPU affinity for the tcpdump process")
+    print("                See taskset(1) man page for the syntax of this")
+    print("                option. Not used by default.")
     print(" --help         this message")
 
 
 def main():
     """Check if server is not vulnerable to Bleichenbacher attack"""
     host = "localhost"
     port = 4433
-    num_limit = 50
+    num_limit = None
     run_exclude = set()
     expected_failures = {}
     last_exp_tmp = None
@@ -88,14 +93,16 @@ def main():
     timing = False
     outdir = "/tmp"
     cipher = CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA
+    affinity = None
 
     argv = sys.argv[1:]
     opts, args = getopt.getopt(argv,
                                "h:p:e:x:X:t:n:a:l:l:o:i:C:",
                                ["help",
                                 "no-safe-renego",
                                 "no-sni",
-                                "repeat="])
+                                "repeat=",
+                                "cpu-list="])
     for opt, arg in opts:
         if opt == '-h':
             host = arg
@@ -137,6 +144,8 @@ def main():
             srv_extensions = None
         elif opt == "--no-sni":
             no_sni = True
+        elif opt == "--cpu-list":
+            affinity = arg
         elif opt == '--help':
             help_msg()
             sys.exit(0)
@@ -158,7 +167,7 @@ def main():
         print("Ciphersuite has to use RSA key exchange.")
         exit(1)
 
-    conversations = {}
+    conversations = OrderedDict()
 
     conversation = Connect(host, port)
     node = conversation
@@ -217,6 +226,100 @@ def main():
 
     conversations["sanity - static non-zero byte in random padding"] = conversation
 
+    # first put tests that are the benchmark to be compared to
+    # fuzz MAC in the Finshed message to make decryption fail
+    conversation = Connect(host, port)
+    node = conversation
+    ciphers = [cipher]
+    node = node.add_child(ClientHelloGenerator(ciphers,
+                                               extensions=cln_extensions))
+    node = node.add_child(ExpectServerHello(extensions=srv_extensions))
+
+    node = node.add_child(ExpectCertificate())
+    node = node.add_child(ExpectServerHelloDone())
+    node = node.add_child(TCPBufferingEnable())
+    node = node.add_child(ClientKeyExchangeGenerator())
+    node = node.add_child(ChangeCipherSpecGenerator())
+    node = node.add_child(fuzz_mac(FinishedGenerator(), xors={0:0xff}))
+    node = node.add_child(TCPBufferingDisable())
+    node = node.add_child(TCPBufferingFlush())
+    node = node.add_child(ExpectAlert(level,
+                                      alert))
+    node.add_child(ExpectClose())
+
+    conversations["invalid MAC in Finished on pos 0"] = conversation
+
+    conversation = Connect(host, port)
+    node = conversation
+    ciphers = [cipher]
+    node = node.add_child(ClientHelloGenerator(ciphers,
+                                               extensions=cln_extensions))
+    node = node.add_child(ExpectServerHello(extensions=srv_extensions))
+
+    node = node.add_child(ExpectCertificate())
+    node = node.add_child(ExpectServerHelloDone())
+    node = node.add_child(TCPBufferingEnable())
+    node = node.add_child(ClientKeyExchangeGenerator())
+    node = node.add_child(ChangeCipherSpecGenerator())
+    node = node.add_child(fuzz_mac(FinishedGenerator(), xors={-1:0xff}))
+    node = node.add_child(TCPBufferingDisable())
+    node = node.add_child(TCPBufferingFlush())
+    node = node.add_child(ExpectAlert(level,
+                                      alert))
+    node.add_child(ExpectClose())
+
+    conversations["invalid MAC in Finished on pos -1"] = conversation
+
+    # and for good measure, add something that sends invalid padding
+    conversation = Connect(host, port)
+    node = conversation
+    ciphers = [cipher]
+    node = node.add_child(ClientHelloGenerator(ciphers,
+                                               extensions=cln_extensions))
+    node = node.add_child(ExpectServerHello(extensions=srv_extensions))
+
+    node = node.add_child(ExpectCertificate())
+    node = node.add_child(ExpectServerHelloDone())
+    node = node.add_child(TCPBufferingEnable())
+    node = node.add_child(ClientKeyExchangeGenerator())
+    node = node.add_child(ChangeCipherSpecGenerator())
+    node = node.add_child(fuzz_padding(FinishedGenerator(),
+                                       xors={-1:0xff, -2:0x01}))
+    node = node.add_child(TCPBufferingDisable())
+    node = node.add_child(TCPBufferingFlush())
+    node = node.add_child(ExpectAlert(level,
+                                      alert))
+    node.add_child(ExpectClose())
+
+    conversations["invalid padding_length in Finished"] = conversation
+
+    # create a CKE with PMS the runner doesn't know/use
+    conversation = Connect(host, port)
+    node = conversation
+    ciphers = [cipher]
+    node = node.add_child(ClientHelloGenerator(ciphers,
+                                               extensions=cln_extensions))
+    node = node.add_child(ExpectServerHello(extensions=srv_extensions))
+
+    node = node.add_child(ExpectCertificate())
+    node = node.add_child(ExpectServerHelloDone())
+    node = node.add_child(TCPBufferingEnable())
+    # use too short PMS but then change padding so that the PMS is
+    # correct length with correct TLS version but the encryption keys
+    # that tlsfuzzer calculates will be incorrect
+    node = node.add_child(ClientKeyExchangeGenerator(
+        padding_subs={-3: 0, -2: 3, -1: 3},
+        premaster_secret=bytearray([1] * 46)))
+    node = node.add_child(ChangeCipherSpecGenerator())
+    node = node.add_child(FinishedGenerator())
+    node = node.add_child(TCPBufferingDisable())
+    node = node.add_child(TCPBufferingFlush())
+    node = node.add_child(ExpectAlert(level,
+                                      alert))
+    node.add_child(ExpectClose())
+
+    conversations["fuzzed pre master secret"] = conversation
+
     # set 2nd byte of padding to 3 (invalid value)
     conversation = Connect(host, port)
     node = conversation
@@ -231,7 +334,6 @@ def main():
     node = node.add_child(ClientKeyExchangeGenerator(padding_subs={1: 3}))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -254,7 +356,6 @@ def main():
     node = node.add_child(ClientKeyExchangeGenerator(padding_subs={1: 1}))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -277,7 +378,6 @@ def main():
     node = node.add_child(ClientKeyExchangeGenerator(padding_subs={4: 0}))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -300,7 +400,6 @@ def main():
     node = node.add_child(ClientKeyExchangeGenerator(padding_subs={-2: 0}))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -323,7 +422,6 @@ def main():
     node = node.add_child(ClientKeyExchangeGenerator(padding_subs={2: 0}))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -346,7 +444,6 @@ def main():
     node = node.add_child(ClientKeyExchangeGenerator(padding_subs={0: 1}))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -369,7 +466,6 @@ def main():
     node = node.add_child(ClientKeyExchangeGenerator(padding_subs={-1: 1}))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -394,7 +490,6 @@ def main():
                                                      premaster_secret=bytearray([1] * 48)))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -417,7 +512,6 @@ def main():
     node = node.add_child(ClientKeyExchangeGenerator(premaster_secret=bytearray([1, 1])))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -443,7 +537,6 @@ def main():
                                                      premaster_secret=bytearray([1, 1, 0])))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -469,7 +562,6 @@ def main():
                                                      premaster_secret=bytearray([1, 1, 0, 3])))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -492,7 +584,6 @@ def main():
     node = node.add_child(ClientKeyExchangeGenerator(premaster_secret=bytearray([1] * 47)))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -515,7 +606,6 @@ def main():
     node = node.add_child(ClientKeyExchangeGenerator(premaster_secret=bytearray([1] * 4)))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -538,7 +628,6 @@ def main():
     node = node.add_child(ClientKeyExchangeGenerator(premaster_secret=bytearray([1] * 49)))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
@@ -547,7 +636,7 @@ def main():
 
     conversations["too long (49-byte) pre master secret"] = conversation
 
-    # check if wrong TLS version number is rejected
+    # check if very long PMS is detected
     conversation = Connect(host, port)
     node = conversation
     ciphers = [cipher]
@@ -558,17 +647,37 @@ def main():
     node = node.add_child(ExpectCertificate())
     node = node.add_child(ExpectServerHelloDone())
     node = node.add_child(TCPBufferingEnable())
-    node = node.add_child(ClientKeyExchangeGenerator(client_version=(2, 2)))
+    node = node.add_child(ClientKeyExchangeGenerator(premaster_secret=bytearray([1] * 124)))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
                                       alert))
     node.add_child(ExpectClose())
 
-    conversations["wrong TLS version (2, 2) in pre master secret"] = conversation
+    conversations["very long (124-byte) pre master secret"] = conversation
+
+    conversation = Connect(host, port)
+    node = conversation
+    ciphers = [cipher]
+    node = node.add_child(ClientHelloGenerator(ciphers,
+                                               extensions=cln_extensions))
+    node = node.add_child(ExpectServerHello(extensions=srv_extensions))
+
+    node = node.add_child(ExpectCertificate())
+    node = node.add_child(ExpectServerHelloDone())
+    node = node.add_child(TCPBufferingEnable())
+    node = node.add_child(ClientKeyExchangeGenerator(premaster_secret=bytearray([1] * 96)))
+    node = node.add_child(ChangeCipherSpecGenerator())
+    node = node.add_child(FinishedGenerator())
+    node = node.add_child(TCPBufferingDisable())
+    node = node.add_child(TCPBufferingFlush())
+    node = node.add_child(ExpectAlert(level,
+                                      alert))
+    node.add_child(ExpectClose())
+
+    conversations["very long (96-byte) pre master secret"] = conversation
 
     # check if wrong TLS version number is rejected
     conversation = Connect(host, port)
@@ -581,19 +690,18 @@ def main():
     node = node.add_child(ExpectCertificate())
     node = node.add_child(ExpectServerHelloDone())
     node = node.add_child(TCPBufferingEnable())
-    node = node.add_child(ClientKeyExchangeGenerator(client_version=(0, 0)))
+    node = node.add_child(ClientKeyExchangeGenerator(client_version=(2, 2)))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
                                       alert))
     node.add_child(ExpectClose())
 
-    conversations["wrong TLS version (0, 0) in pre master secret"] = conversation
+    conversations["wrong TLS version (2, 2) in pre master secret"] = conversation
 
-    # check if too short PKCS padding is detected
+    # check if wrong TLS version number is rejected
     conversation = Connect(host, port)
     node = conversation
     ciphers = [cipher]
@@ -604,22 +712,18 @@ def main():
     node = node.add_child(ExpectCertificate())
     node = node.add_child(ExpectServerHelloDone())
     node = node.add_child(TCPBufferingEnable())
-    # move the start of the padding forward, essentially encrypting two 0 bytes
-    # at the beginning of the padding, but since those are transformed into a number
-    # their existence is lost and it just like the padding was too small
-    node = node.add_child(ClientKeyExchangeGenerator(padding_subs={1: 0, 2: 2}))
+    node = node.add_child(ClientKeyExchangeGenerator(client_version=(0, 0)))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
                                       alert))
     node.add_child(ExpectClose())
 
-    conversations["too short PKCS padding"] = conversation
+    conversations["wrong TLS version (0, 0) in pre master secret"] = conversation
 
-    # check if too long PKCS padding is detected
+    # check if too short PKCS padding is detected
     conversation = Connect(host, port)
     node = conversation
     ciphers = [cipher]
@@ -630,22 +734,21 @@ def main():
     node = node.add_child(ExpectCertificate())
     node = node.add_child(ExpectServerHelloDone())
     node = node.add_child(TCPBufferingEnable())
-    # move the start of the padding backward, essentially encrypting no 0 bytes
+    # move the start of the padding forward, essentially encrypting two 0 bytes
     # at the beginning of the padding, but since those are transformed into a number
-    # its lack is lost and it just like the padding was too big
-    node = node.add_child(ClientKeyExchangeGenerator(padding_subs={0: 2}))
+    # their existence is lost and it just like the padding was too small
+    node = node.add_child(ClientKeyExchangeGenerator(padding_subs={1: 0, 2: 2}))
     node = node.add_child(ChangeCipherSpecGenerator())
     node = node.add_child(FinishedGenerator())
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
                                       alert))
     node.add_child(ExpectClose())
 
-    conversations["too long PKCS padding"] = conversation
+    conversations["too short PKCS padding"] = conversation
 
-    # fuzz MAC in the Finshed message to make decryption fail
+    # check if very short PKCS padding doesn't have a different behaviour
     conversation = Connect(host, port)
     node = conversation
     ciphers = [cipher]
@@ -656,18 +759,23 @@ def main():
     node = node.add_child(ExpectCertificate())
     node = node.add_child(ExpectServerHelloDone())
     node = node.add_child(TCPBufferingEnable())
-    node = node.add_child(ClientKeyExchangeGenerator())
+    # move the start of the padding 40 bytes towards LSB
+    subs = {}
+    for i in range(41):
+        subs[i] = 0
+    subs[41] = 2
+    node = node.add_child(ClientKeyExchangeGenerator(padding_subs=subs))
     node = node.add_child(ChangeCipherSpecGenerator())
-    node = node.add_child(fuzz_mac(FinishedGenerator(), xors={0:0xff}))
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
+    node = node.add_child(FinishedGenerator())
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
                                       alert))
     node.add_child(ExpectClose())
 
-    conversations["invalid MAC in Finished on pos 0"] = conversation
+    conversations["very short PKCS padding (40 bytes short)"] = conversation
 
+    # check if too long PKCS padding is detected
     conversation = Connect(host, port)
     node = conversation
     ciphers = [cipher]
@@ -678,17 +786,19 @@ def main():
     node = node.add_child(ExpectCertificate())
     node = node.add_child(ExpectServerHelloDone())
     node = node.add_child(TCPBufferingEnable())
-    node = node.add_child(ClientKeyExchangeGenerator())
+    # move the start of the padding backward, essentially encrypting no 0 bytes
+    # at the beginning of the padding, but since those are transformed into a number
+    # its lack is lost and it just like the padding was too big
+    node = node.add_child(ClientKeyExchangeGenerator(padding_subs={0: 2}))
     node = node.add_child(ChangeCipherSpecGenerator())
-    node = node.add_child(fuzz_mac(FinishedGenerator(), xors={-1:0xff}))
-    node = node.add_child(ApplicationDataGenerator(bytearray(b"GET / HTTP/1.0\r\n\r\n")))
+    node = node.add_child(FinishedGenerator())
     node = node.add_child(TCPBufferingDisable())
     node = node.add_child(TCPBufferingFlush())
     node = node.add_child(ExpectAlert(level,
                                       alert))
     node.add_child(ExpectClose())
 
-    conversations["invalid MAC in Finished on pos -1"] = conversation
+    conversations["too long PKCS padding"] = conversation
 
     # run the conversation
     good = 0
@@ -710,7 +820,10 @@ def main():
     else:
         regular_tests = [(k, v) for k, v in conversations.items() if
                          (k != 'sanity') and k not in run_exclude]
-    sampled_tests = sample(regular_tests, min(num_limit, len(regular_tests)))
+    if num_limit < len(conversations):
+        sampled_tests = sample(regular_tests, min(num_limit, len(regular_tests)))
+    else:
+        sampled_tests = regular_tests
     ordered_tests = chain(sanity_tests, sampled_tests, sanity_tests)
 
     print("Running tests for {0}".format(CipherSuite.ietfNames[cipher]))
@@ -754,6 +867,85 @@ def main():
                 failed.append(c_name)
 
     print("Test end")
+    print(20 * '=')
+    print("""Tests for handling of malformed encrypted values in CKE
+
+This test script checks if the server correctly handles malformed
+Client Key Exchange messages in RSA key exchange.
+When executed with `-i` it will also verify that different errors
+are rejected in the same amount of time; it checks for timing
+sidechannel.
+The script executes tests without \"sanity\" in name multiple
+times to estimate server response time.
+
+Quick reminder: when encrypting a value using PKCS#1 v1.5 standard
+the plaintext has the following structure, starting from most
+significant byte:
+- one byte, the version of the encryption, must be 0
+- one byte, the type of encryption, must be 2 (is 1 in case of
+  signature)
+- one or more bytes of random padding, with no zero bytes. The
+  count must equal the byte size of the public key modulus less
+  size of encrypted value and 3 (for version, type and separator)
+  For signatures the bytes must equal 0xff
+- one zero byte that acts as separator between padding and
+  encrypted value
+- one or more bytes that are the encrypted value, for TLS it must
+  be 48 bytes long and the first two bytes need to equal the
+  TLS version advertised in Client Hello
+
+All tests should exhibit the same kind of timing behaviour, but
+if some groups of tests are inconsistent, that points to likely
+place where the timing leak happens:
+- the control group, lack of consistency here points to Lucky 13:
+  - 'invalid MAC in Finished on pos 0'
+  - 'invalid MAC in Finished on pos -1'
+  - 'fuzzed pre master secret' - this will end up with random
+    plaintexts in record with Finished, most resembling a randomly
+    selected PMS by the server
+  verification:
+  - 'set PKCS#1 padding type to 3'
+  - 'set PKCS#1 padding type to 1'
+- incorrect size of encrypted value (pre-master secret),
+  inconsistent results here suggests that the decryption leaks
+  length of plaintext:
+  - 'zero byte in random padding' - this creates a PMS that's 4
+    bytes shorter than the public key size and has a random TLS
+    version
+  - 'zero byte in last byte of random padding' - this creates a
+    PMS that's one byte too long (49 bytes long), with a TLS
+    version that's (0, major_version)
+  - 'no null separator in padding' - as the PMS is all zero, this
+    effectively sends a PMS that's 45 bytes long with TLS version
+    of (0, 0)
+  - 'two byte long PMS (TLS version only)'
+  - 'one byte encrypted value' - the encrypted value is 3, as a
+    correct value for first byte of TLS version
+  - 'too short (47-byte) pre master secret'
+  - 'very short (4-byte) pre master secret'
+  - 'too long (49-byte) pre master secret'
+  - 'very long (124-byte) pre master secret'
+  - 'very long (96-byte) pre master secret'
+- invalid PKCS#1 v1.5 encryption padding:
+  - 'zero byte in first byte of random padding' - this is a mix
+    of too long PMS and invalid padding, it actually doesn't send
+    padding at all, the padding length is zero
+  - 'invalid version number in padding' - this sets the first byte
+    of plaintext to 1
+  - 'no null separator in encrypted value' - this doesn't send a
+    null byte separating padding and encrypted value
+  - 'no encrypted value' - this sends a null separator, but it's
+    the last byte of plaintext
+  - 'too short PKCS padding' - this sends the correct encryption
+    type in the padding (2), but one byte later than required
+  - 'very short PKCS padding (40 bytes short)' - same as above
+    only 40 bytes later
+  - 'too long PKCS padding' this doesn't send the PKCS#1 v1.5
+    version at all, but starts with padding type
+- invalid TLS version in PMS, differences here suggest a leak in
+  code checking for correctness of this value:
+  - 'wrong TLS version (2, 2) in pre master secret'
+  - 'wrong TLS version (0, 0) in pre master secret'""")
     print(20 * '=')
     print("version: {0}".format(version))
     print(20 * '=')
@@ -782,11 +974,18 @@ def main():
                                          outdir,
                                          host,
                                          port,
-                                         interface)
+                                         interface,
+                                         affinity)
             print("Running timing tests...")
             timing_runner.generate_log(run_only, run_exclude, repetitions)
             ret_val = timing_runner.run()
-            print("Statistical analysis exited with {0}".format(ret_val))
+            if ret_val == 0:
+                print("No statistically significant difference detected")
+            elif ret_val == 1:
+                print("Statisticaly significant difference detected at alpha="
+                      "0.05")
+            else:
+                print("Statistical analysis exited with {0}".format(ret_val))
         else:
             print("Could not run timing tests because tcpdump is not present!")
             sys.exit(1)