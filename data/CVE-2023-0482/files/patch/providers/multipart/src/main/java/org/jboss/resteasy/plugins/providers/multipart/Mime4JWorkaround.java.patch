@@ -2,11 +2,11 @@
 
 import java.io.BufferedInputStream;
 import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.nio.file.Files;
+import java.nio.file.Path;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 import java.security.PrivilegedActionException;
@@ -147,15 +147,15 @@ private static class CustomTempFileStorageProvider extends AbstractStorageProvid
         }
 
         public StorageOutputStream createStorageOutputStream() throws IOException {
-            return new TempFileStorageOutputStream(createTempFile(prefix, suffix, directory));
+            return new TempFileStorageOutputStream(createTempFile(prefix, suffix, directory.toPath()));
         }
 
-        private static File createTempFile(String prefix, String suffix, File directory) throws IOException {
+        private static Path createTempFile(String prefix, String suffix, Path directory) throws IOException {
             boolean java2SecurityEnabled = System.getSecurityManager() != null;
             if (java2SecurityEnabled) {
                 try {
                     return AccessController.doPrivileged(
-                            (PrivilegedExceptionAction<File>) () -> File.createTempFile(prefix, suffix, directory));
+                            (PrivilegedExceptionAction<Path>) () -> Files.createTempFile(directory, prefix, suffix));
                 } catch (PrivilegedActionException pae) {
                     Throwable cause = pae.getCause();
                     if (cause instanceof IOException) {
@@ -164,15 +164,15 @@ private static File createTempFile(String prefix, String suffix, File directory)
                         throw new RuntimeException(cause);
                 }
             }
-            return File.createTempFile(prefix, suffix, directory);
+            return Files.createTempFile(directory, prefix, suffix);
         }
 
-        private static FileOutputStream createFileOutputStream(File file) throws IOException {
+        private static OutputStream createFileOutputStream(final Path file) throws IOException {
             boolean java2SecurityEnabled = System.getSecurityManager() != null;
             if (java2SecurityEnabled) {
                 try {
                     return AccessController
-                            .doPrivileged((PrivilegedExceptionAction<FileOutputStream>) () -> new FileOutputStream(file));
+                            .doPrivileged((PrivilegedExceptionAction<OutputStream>) () -> Files.newOutputStream(file));
                 } catch (PrivilegedActionException pae) {
                     Throwable cause = pae.getCause();
                     if (cause instanceof IOException) {
@@ -181,15 +181,15 @@ private static FileOutputStream createFileOutputStream(File file) throws IOExcep
                         throw new RuntimeException(cause);
                 }
             }
-            return new FileOutputStream(file);
+            return Files.newOutputStream(file);
         }
 
         private static final class TempFileStorageOutputStream extends StorageOutputStream {
-            private File file;
+            private final Path file;
 
-            private OutputStream out;
+            private final OutputStream out;
 
-            TempFileStorageOutputStream(final File file) throws IOException {
+            TempFileStorageOutputStream(final Path file) throws IOException {
                 this.file = file;
                 this.out = createFileOutputStream(file);
             }
@@ -214,11 +214,11 @@ protected Storage toStorage0() throws IOException {
 
         private static final class TempFileStorage implements Storage {
 
-            private File file;
+            private Path file;
 
-            private static final Set<File> filesToDelete = new HashSet<File>();
+            private static final Set<Path> filesToDelete = new HashSet<>();
 
-            TempFileStorage(final File file) {
+            TempFileStorage(final Path file) {
                 this.file = file;
             }
 
@@ -237,10 +237,13 @@ public void delete() {
                         file = null;
                     }
 
-                    for (Iterator<File> iterator = filesToDelete.iterator(); iterator.hasNext();) {
-                        File f = iterator.next();
-                        if (f.delete()) {
+                    for (Iterator<Path> iterator = filesToDelete.iterator(); iterator.hasNext();) {
+                        Path f = iterator.next();
+                        try {
+                            Files.deleteIfExists(f);
                             iterator.remove();
+                        } catch (IOException e) {
+                            LogMessages.LOGGER.debugf(e, "Failed to delete file %s", f);
                         }
                     }
                 }
@@ -250,7 +253,7 @@ public InputStream getInputStream() throws IOException {
                 if (file == null)
                     throw new IllegalStateException("storage has been deleted");
 
-                return new BufferedInputStream(new FileInputStream(file));
+                return new BufferedInputStream(Files.newInputStream(file));
             }
 
         }