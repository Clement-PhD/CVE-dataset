@@ -43,6 +43,7 @@
 use OCA\Deck\Db\LabelMapper;
 use OCA\Deck\StatusException;
 use OCA\Deck\BadRequestException;
+use OCA\Deck\Validators\CardServiceValidator;
 use OCP\Comments\ICommentsManager;
 use OCP\EventDispatcher\IEventDispatcher;
 use OCP\IRequest;
@@ -69,6 +70,7 @@ class CardService {
 	private IURLGenerator $urlGenerator;
 	private LoggerInterface $logger;
 	private IRequest $request;
+	private CardServiceValidator $cardServiceValidator;
 
 	public function __construct(
 		CardMapper $cardMapper,
@@ -88,6 +90,7 @@ public function __construct(
 		IURLGenerator $urlGenerator,
 		LoggerInterface $logger,
 		IRequest $request,
+		CardServiceValidator $cardServiceValidator,
 		?string $userId
 	) {
 		$this->cardMapper = $cardMapper;
@@ -108,6 +111,7 @@ public function __construct(
 		$this->urlGenerator = $urlGenerator;
 		$this->logger = $logger;
 		$this->request = $request;
+		$this->cardServiceValidator = $cardServiceValidator;
 	}
 
 	public function enrich($card) {
@@ -130,6 +134,7 @@ public function enrich($card) {
 	}
 
 	public function fetchDeleted($boardId) {
+		$this->cardServiceValidator->check(compact('boardId'));
 		$this->permissionService->checkPermission($this->boardMapper, $boardId, Acl::PERMISSION_READ);
 		$cards = $this->cardMapper->findDeleted($boardId);
 		foreach ($cards as $card) {
@@ -190,29 +195,7 @@ public function findCalendarEntries($boardId) {
 	 * @throws BadrequestException
 	 */
 	public function create($title, $stackId, $type, $order, $owner, $description = '', $duedate = null) {
-		if ($title === 'false' || $title === null) {
-			throw new BadRequestException('title must be provided');
-		}
-
-		if (mb_strlen($title) > Card::TITLE_MAX_LENGTH) {
-			throw new BadRequestException('The title cannot exceed 255 characters');
-		}
-
-		if (is_numeric($stackId) === false) {
-			throw new BadRequestException('stack id must be a number');
-		}
-
-		if ($type === 'false' || $type === null) {
-			throw new BadRequestException('type must be provided');
-		}
-
-		if (is_numeric($order) === false) {
-			throw new BadRequestException('order must be a number');
-		}
-
-		if ($owner === false || $owner === null) {
-			throw new BadRequestException('owner must be provided');
-		}
+		$this->cardServiceValidator->check(compact('title', 'stackId', 'type', 'order', 'owner'));
 
 		$this->permissionService->checkPermission($this->stackMapper, $stackId, Acl::PERMISSION_EDIT);
 		if ($this->boardService->isArchived($this->stackMapper, $stackId)) {
@@ -282,29 +265,7 @@ public function delete($id) {
 	 * @throws BadRequestException
 	 */
 	public function update($id, $title, $stackId, $type, $owner, $description = '', $order = 0, $duedate = null, $deletedAt = null, $archived = null) {
-		if (is_numeric($id) === false) {
-			throw new BadRequestException('card id must be a number');
-		}
-
-		if ($title === false || $title === null) {
-			throw new BadRequestException('title must be provided');
-		}
-
-		if (mb_strlen($title) > Card::TITLE_MAX_LENGTH) {
-			throw new BadRequestException('The title cannot exceed 255 characters');
-		}
-
-		if (is_numeric($stackId) === false) {
-			throw new BadRequestException('stack id must be a number $$$');
-		}
-
-		if ($type === false || $type === null) {
-			throw new BadRequestException('type must be provided');
-		}
-
-		if ($owner === false || $owner === null) {
-			throw new BadRequestException('owner must be provided');
-		}
+		$this->cardServiceValidator->check(compact('id', 'title', 'stackId', 'type', 'owner', 'order'));
 
 		$this->permissionService->checkPermission($this->cardMapper, $id, Acl::PERMISSION_EDIT);
 		$this->permissionService->checkPermission($this->stackMapper, $stackId, Acl::PERMISSION_EDIT);
@@ -387,17 +348,7 @@ public function update($id, $title, $stackId, $type, $owner, $description = '',
 	 * @throws BadRequestException
 	 */
 	public function rename($id, $title) {
-		if (is_numeric($id) === false) {
-			throw new BadRequestException('id must be a number');
-		}
-
-		if ($title === false || $title === null) {
-			throw new BadRequestException('title must be provided');
-		}
-
-		if (mb_strlen($title) > Card::TITLE_MAX_LENGTH) {
-			throw new BadRequestException('The title cannot exceed 255 characters');
-		}
+		$this->cardServiceValidator->check(compact('id', 'title'));
 
 		$this->permissionService->checkPermission($this->cardMapper, $id, Acl::PERMISSION_EDIT);
 		if ($this->boardService->isArchived($this->cardMapper, $id)) {
@@ -428,17 +379,8 @@ public function rename($id, $title) {
 	 * @throws BadRequestException
 	 */
 	public function reorder($id, $stackId, $order) {
-		if (is_numeric($id) === false) {
-			throw new BadRequestException('card id must be a number');
-		}
+		$this->cardServiceValidator->check(compact('id', 'stackId', 'order'));
 
-		if (is_numeric($stackId) === false) {
-			throw new BadRequestException('stack id must be a number');
-		}
-
-		if (is_numeric($order) === false) {
-			throw new BadRequestException('order must be a number');
-		}
 
 		$this->permissionService->checkPermission($this->cardMapper, $id, Acl::PERMISSION_EDIT);
 		$this->permissionService->checkPermission($this->stackMapper, $stackId, Acl::PERMISSION_EDIT);
@@ -493,9 +435,8 @@ public function reorder($id, $stackId, $order) {
 	 * @throws BadRequestException
 	 */
 	public function archive($id) {
-		if (is_numeric($id) === false) {
-			throw new BadRequestException('id must be a number');
-		}
+		$this->cardServiceValidator->check(compact('id'));
+
 
 		$this->permissionService->checkPermission($this->cardMapper, $id, Acl::PERMISSION_EDIT);
 		if ($this->boardService->isArchived($this->cardMapper, $id)) {
@@ -523,9 +464,8 @@ public function archive($id) {
 	 * @throws BadRequestException
 	 */
 	public function unarchive($id) {
-		if (is_numeric($id) === false) {
-			throw new BadRequestException('id must be a number');
-		}
+		$this->cardServiceValidator->check(compact('id'));
+
 
 		$this->permissionService->checkPermission($this->cardMapper, $id, Acl::PERMISSION_EDIT);
 		if ($this->boardService->isArchived($this->cardMapper, $id)) {
@@ -552,13 +492,8 @@ public function unarchive($id) {
 	 * @throws BadRequestException
 	 */
 	public function assignLabel($cardId, $labelId) {
-		if (is_numeric($cardId) === false) {
-			throw new BadRequestException('card id must be a number');
-		}
+		$this->cardServiceValidator->check(compact('cardId', 'labelId'));
 
-		if (is_numeric($labelId) === false) {
-			throw new BadRequestException('label id must be a number');
-		}
 
 		$this->permissionService->checkPermission($this->cardMapper, $cardId, Acl::PERMISSION_EDIT);
 		if ($this->boardService->isArchived($this->cardMapper, $cardId)) {
@@ -586,13 +521,8 @@ public function assignLabel($cardId, $labelId) {
 	 * @throws BadRequestException
 	 */
 	public function removeLabel($cardId, $labelId) {
-		if (is_numeric($cardId) === false) {
-			throw new BadRequestException('card id must be a number');
-		}
+		$this->cardServiceValidator->check(compact('cardId', 'labelId'));
 
-		if (is_numeric($labelId) === false) {
-			throw new BadRequestException('label id must be a number');
-		}
 
 		$this->permissionService->checkPermission($this->cardMapper, $cardId, Acl::PERMISSION_EDIT);
 		if ($this->boardService->isArchived($this->cardMapper, $cardId)) {