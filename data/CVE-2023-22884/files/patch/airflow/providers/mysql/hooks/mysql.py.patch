@@ -45,8 +45,12 @@ class MySqlHook(DbApiHook):
     in extras.
     extras example: ``{"iam":true, "aws_conn_id":"my_aws_conn"}``
 
+    You can also add "local_infile" parameter to determine whether local_infile feature of MySQL client is
+    going to be enabled (it is disabled by default).
+
     :param schema: The MySQL database schema to connect to.
     :param connection: The :ref:`MySQL connection id <howto/connection:mysql>` used for MySQL credentials.
+    :param local_infile: Boolean flag determining if local_infile should be used
     """
 
     conn_name_attr = "mysql_conn_id"
@@ -59,6 +63,7 @@ def __init__(self, *args, **kwargs) -> None:
         super().__init__(*args, **kwargs)
         self.schema = kwargs.pop("schema", None)
         self.connection = kwargs.pop("connection", None)
+        self.local_infile = kwargs.pop("local_infile", False)
 
     def set_autocommit(self, conn: MySQLConnectionTypes, autocommit: bool) -> None:
         """
@@ -118,7 +123,6 @@ def _get_conn_config_mysql_client(self, conn: Connection) -> dict:
                 conn_config["cursorclass"] = MySQLdb.cursors.DictCursor
             elif (conn.extra_dejson["cursor"]).lower() == "ssdictcursor":
                 conn_config["cursorclass"] = MySQLdb.cursors.SSDictCursor
-        local_infile = conn.extra_dejson.get("local_infile", False)
         if conn.extra_dejson.get("ssl", False):
             # SSL parameter for MySQL has to be a dictionary and in case
             # of extra/dejson we can get string if extra is passed via
@@ -131,7 +135,7 @@ def _get_conn_config_mysql_client(self, conn: Connection) -> dict:
             conn_config["ssl_mode"] = conn.extra_dejson["ssl_mode"]
         if conn.extra_dejson.get("unix_socket"):
             conn_config["unix_socket"] = conn.extra_dejson["unix_socket"]
-        if local_infile:
+        if self.local_infile:
             conn_config["local_infile"] = 1
         return conn_config
 
@@ -144,7 +148,7 @@ def _get_conn_config_mysql_connector_python(self, conn: Connection) -> dict:
             "port": int(conn.port) if conn.port else 3306,
         }
 
-        if conn.extra_dejson.get("allow_local_infile", False):
+        if self.local_infile:
             conn_config["allow_local_infile"] = True
         # Ref: https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html
         for key, value in conn.extra_dejson.items():