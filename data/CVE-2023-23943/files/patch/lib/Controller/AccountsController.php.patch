@@ -43,6 +43,7 @@
 use OCA\Mail\Service\AliasesService;
 use OCA\Mail\Service\SetupService;
 use OCA\Mail\Service\Sync\SyncService;
+use OCA\Mail\Validation\RemoteHostValidator;
 use OCP\AppFramework\Controller;
 use OCP\AppFramework\Http;
 use OCP\AppFramework\Http\JSONResponse;
@@ -62,6 +63,7 @@ class AccountsController extends Controller {
 	private IMailManager $mailManager;
 	private SyncService $syncService;
 	private IConfig $config;
+	private RemoteHostValidator $hostValidator;
 
 	public function __construct(string $appName,
 								   IRequest $request,
@@ -74,7 +76,8 @@ public function __construct(string $appName,
 								   SetupService $setup,
 								   IMailManager $mailManager,
 								   SyncService $syncService,
-									IConfig $config
+									IConfig $config,
+									RemoteHostValidator $hostValidator
 	) {
 		parent::__construct($appName, $request);
 		$this->accountService = $accountService;
@@ -87,6 +90,7 @@ public function __construct(string $appName,
 		$this->mailManager = $mailManager;
 		$this->syncService = $syncService;
 		$this->config = $config;
+		$this->hostValidator = $hostValidator;
 	}
 
 	/**
@@ -162,6 +166,26 @@ public function update(int $id,
 		} catch (ClientException $e) {
 			return new JSONResponse([], Http::STATUS_BAD_REQUEST);
 		}
+		if (!$this->hostValidator->isValid($imapHost)) {
+			return MailJsonResponse::fail(
+				[
+					'error' => 'CONNECTION_ERROR',
+					'service' => 'IMAP',
+					'host' => $imapHost,
+					'port' => $imapPort,
+				],
+			);
+		}
+		if (!$this->hostValidator->isValid($smtpHost)) {
+			return MailJsonResponse::fail(
+				[
+					'error' => 'CONNECTION_ERROR',
+					'service' => 'SMTP',
+					'host' => $smtpHost,
+					'port' => $smtpPort,
+				],
+			);
+		}
 
 		try {
 			return MailJsonResponse::success(
@@ -318,6 +342,26 @@ public function create(string $accountName,
 			$this->logger->info('Creating account disabled by admin.');
 			return MailJsonResponse::error('Could not create account');
 		}
+		if (!$this->hostValidator->isValid($imapHost)) {
+			return MailJsonResponse::fail(
+				[
+					'error' => 'CONNECTION_ERROR',
+					'service' => 'IMAP',
+					'host' => $imapHost,
+					'port' => $imapPort,
+				],
+			);
+		}
+		if (!$this->hostValidator->isValid($smtpHost)) {
+			return MailJsonResponse::fail(
+				[
+					'error' => 'CONNECTION_ERROR',
+					'service' => 'SMTP',
+					'host' => $smtpHost,
+					'port' => $smtpPort,
+				],
+			);
+		}
 		try {
 			return MailJsonResponse::success(
 				$this->setup->createNewAccount($accountName, $emailAddress, $imapHost, $imapPort, $imapSslMode, $imapUser, $imapPassword, $smtpHost, $smtpPort, $smtpSslMode, $smtpUser, $smtpPassword, $this->currentUserId, $authMethod), Http::STATUS_CREATED