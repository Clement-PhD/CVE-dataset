@@ -31,6 +31,7 @@
 use OCA\Mail\Service\AutoConfig\ConnectivityTester;
 use OCA\Mail\Service\AutoConfig\IspDb;
 use OCA\Mail\Service\AutoConfig\MxRecord;
+use OCA\Mail\Validation\RemoteHostValidator;
 use OCP\AppFramework\Controller;
 use OCP\AppFramework\Http;
 use OCP\IRequest;
@@ -40,15 +41,18 @@ class AutoConfigController extends Controller {
 	private IspDb $ispDb;
 	private MxRecord $mxRecord;
 	private ConnectivityTester $connectivityTester;
+	private RemoteHostValidator $hostValidator;
 
 	public function __construct(IRequest $request,
 								IspDb $ispDb,
 								MxRecord $mxRecord,
-								ConnectivityTester $connectivityTester) {
+								ConnectivityTester $connectivityTester,
+								RemoteHostValidator $hostValidator) {
 		parent::__construct(Application::APP_ID, $request);
 		$this->ispDb = $ispDb;
 		$this->mxRecord = $mxRecord;
 		$this->connectivityTester = $connectivityTester;
+		$this->hostValidator = $hostValidator;
 	}
 
 	/**
@@ -61,7 +65,7 @@ public function __construct(IRequest $request,
 	 */
 	public function queryIspdb(string $email): JsonResponse {
 		$rfc822Address = new Horde_Mail_Rfc822_Address($email);
-		if (!$rfc822Address->valid) {
+		if (!$rfc822Address->valid || !$this->hostValidator->isValid($rfc822Address->host)) {
 			return JsonResponse::fail('Invalid email address', Http::STATUS_UNPROCESSABLE_ENTITY)
 				->cacheFor(60 * 60, false, true);
 		}
@@ -79,7 +83,7 @@ public function queryIspdb(string $email): JsonResponse {
 	 */
 	public function queryMx(string $email): JsonResponse {
 		$rfc822Address = new Horde_Mail_Rfc822_Address($email);
-		if (!$rfc822Address->valid) {
+		if (!$rfc822Address->valid || !$this->hostValidator->isValid($rfc822Address->host)) {
 			return JsonResponse::fail('Invalid email address', Http::STATUS_UNPROCESSABLE_ENTITY)
 				->cacheFor(60 * 60, false, true);
 		}
@@ -101,6 +105,9 @@ public function testConnectivity(string $host, int $port): JsonResponse {
 		if (!in_array($port, [143, 993, 465, 587])) {
 			return JsonResponse::fail('Port not allowed');
 		}
+		if (!$this->hostValidator->isValid($host)) {
+			return JsonResponse::success(false);
+		}
 		return JsonResponse::success(
 			$this->connectivityTester->canConnect($host, $port),
 		);