@@ -28,10 +28,13 @@
 use OCA\Mail\Db\MailAccountMapper;
 use OCA\Mail\Exception\ClientException;
 use OCA\Mail\Exception\CouldNotConnectException;
+use OCA\Mail\Http\JsonResponse as MailJsonResponse;
 use OCA\Mail\Service\AccountService;
 use OCA\Mail\Sieve\SieveClientFactory;
+use OCA\Mail\Validation\RemoteHostValidator;
 use OCP\AppFramework\Controller;
 use OCP\AppFramework\Db\DoesNotExistException;
+use OCP\AppFramework\Http;
 use OCP\AppFramework\Http\JSONResponse;
 use OCP\IRequest;
 use OCP\Security\ICrypto;
@@ -42,20 +45,23 @@ class SieveController extends Controller {
 	private SieveClientFactory $sieveClientFactory;
 	private string $currentUserId;
 	private ICrypto $crypto;
+	private RemoteHostValidator $hostValidator;
 
 	public function __construct(IRequest $request,
 								string $UserId,
 								AccountService $accountService,
 								MailAccountMapper $mailAccountMapper,
 								SieveClientFactory $sieveClientFactory,
-								ICrypto $crypto
+								ICrypto $crypto,
+								RemoteHostValidator $hostValidator
 	) {
 		parent::__construct(Application::APP_ID, $request);
 		$this->currentUserId = $UserId;
 		$this->accountService = $accountService;
 		$this->mailAccountMapper = $mailAccountMapper;
 		$this->sieveClientFactory = $sieveClientFactory;
 		$this->crypto = $crypto;
+		$this->hostValidator = $hostValidator;
 	}
 
 	/**
@@ -132,6 +138,17 @@ public function updateAccount(int $id,
 								  string $sievePassword,
 								  string $sieveSslMode
 	): JSONResponse {
+		if (!$this->hostValidator->isValid($sieveHost)) {
+			return MailJsonResponse::fail(
+				[
+					'error' => 'CONNECTION_ERROR',
+					'service' => 'ManageSieve',
+					'host' => $sieveHost,
+					'port' => $sievePort,
+				],
+				Http::STATUS_UNPROCESSABLE_ENTITY
+			);
+		}
 		$mailAccount = $this->mailAccountMapper->find($this->currentUserId, $id);
 
 		if ($sieveEnabled === false) {