--- /dev/null
+++ /dev/null
@@ -246,31 +235,30 @@ def create_storage_client(
         project_id: str,
         vault_endpoint: str,
         vault_secret: str,
-        vault_endpoint_verify: str | bool | None = None
 ) -> storage.Client:
     if auth_method == AuthorizationType.LOCAL_ACCOUNT:
         return storage.Client(project=project_id)
     elif auth_method == AuthorizationType.VAULT:
-        oauthtoken = get_vault_token(vault_endpoint, vault_secret, vault_endpoint_verify)
+        oauthtoken = get_vault_token(vault_endpoint, vault_secret)
         return storage.Client(project=project_id, credentials=credentials.Credentials(oauthtoken))
     else:
         raise ValueError(f"unsupported auth_method: {auth_method!r}")
 
 
-def get_vault_token(vault_endpoint: str, vault_secret: str, vault_endpoint_verify: str | bool | None = True) -> str:
+def get_vault_token(vault_endpoint: str, vault_secret: str) -> str:
     if not vault_endpoint:
         raise ValueError('vault_endpoint is required')
     if not vault_secret:
         raise ValueError('vault_secret is required')
 
     headers = {'X-Vault-Token': vault_secret}
-    response = requests.get(vault_endpoint, headers=headers, verify=vault_endpoint_verify)
+    response = requests.get(vault_endpoint, headers=headers, verify=False)
 
-    logger.info("get oauth token from %s status_code=%s", vault_endpoint, response.status_code)
     if response.status_code != 200:
         logger.info(response.text)
         raise ValueError(
             'Could not get vault token, response code: {}'.format(
                 response.status_code))
 
+    logger.info("get oauth token from %s status_code=%s", vault_endpoint, response.status_code)
 
