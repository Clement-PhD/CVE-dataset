--- /dev/null
+++ /dev/null
@@ -29,43 +22,4 @@
 @EnableEurekaServer
 @ConditionalOnProperty(name = "apollo.eureka.server.enabled", havingValue = "true", matchIfMissing = true)
 public class ConfigServerEurekaServerConfigure {
-
-  @Order(99)
-  @Configuration
-  static class EurekaServerSecurityConfigurer extends WebSecurityConfigurerAdapter {
-
-    private static final String EUREKA_ROLE = "EUREKA";
-
-    @Value("${apollo.eureka.server.security.enabled:false}")
-    private boolean eurekaSecurityEnabled;
-    @Value("${apollo.eureka.server.security.username:}")
-    private String username;
-    @Value("${apollo.eureka.server.security.password:}")
-    private String password;
-
-    @Override
-    protected void configure(HttpSecurity http) throws Exception {
-      http.csrf().disable();
-      http.httpBasic();
-      if (eurekaSecurityEnabled) {
-        http.authorizeRequests()
-            .antMatchers("/eureka/apps/**", "/eureka/instances/**", "/eureka/peerreplication/**")
-            .hasRole(EUREKA_ROLE)
-            .antMatchers("/**").permitAll();
-      }
-    }
-
-    @Autowired
-    public void configureEurekaUser(AuthenticationManagerBuilder auth) throws Exception {
-      if (!eurekaSecurityEnabled) {
-        return;
-      }
-      InMemoryUserDetailsManagerConfigurer<AuthenticationManagerBuilder> configurer = auth
-          .getConfigurer(InMemoryUserDetailsManagerConfigurer.class);
-      if (configurer == null) {
-        configurer = auth.inMemoryAuthentication();
-      }
-      configurer.withUser(username).password(password).roles(EUREKA_ROLE);
-    }
-  }
 
