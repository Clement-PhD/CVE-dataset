--- /dev/null
+++ /dev/null
@@ -4916,32 +5019,4 @@ public function testFormatRoomShare(array $expects, \OCP\Share\IShare $share, bo
 		$result = $this->invokePrivate($this->ocs, 'formatShare', [$share]);
 		$this->assertEquals($expects, $result);
 	}
-
-	private function getNonSharedUserFolder(): array {
-		$node = $this->getMockBuilder(Folder::class)->getMock();
-		$userFolder = $this->getMockBuilder(Folder::class)->getMock();
-		$storage = $this->createMock(Storage::class);
-		$storage->method('instanceOfStorage')
-			->willReturnMap([
-				['OCA\Files_Sharing\External\Storage', false],
-				['OCA\Files_Sharing\SharedStorage', false],
-			]);
-		$userFolder->method('getStorage')->willReturn($storage);
-		$node->method('getStorage')->willReturn($storage);
-		return [$userFolder, $node];
-	}
-
-	private function getNonSharedUserFile(): array {
-		$node = $this->getMockBuilder(File::class)->getMock();
-		$userFolder = $this->getMockBuilder(Folder::class)->getMock();
-		$storage = $this->createMock(Storage::class);
-		$storage->method('instanceOfStorage')
-			->willReturnMap([
-				['OCA\Files_Sharing\External\Storage', false],
-				['OCA\Files_Sharing\SharedStorage', false],
-			]);
-		$userFolder->method('getStorage')->willReturn($storage);
-		$node->method('getStorage')->willReturn($storage);
-		return [$userFolder, $node];
-	}
 
