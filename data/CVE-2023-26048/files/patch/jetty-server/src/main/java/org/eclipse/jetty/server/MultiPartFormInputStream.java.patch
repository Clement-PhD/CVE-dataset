@@ -38,6 +38,7 @@
 import javax.servlet.http.Part;
 
 import org.eclipse.jetty.server.MultiParts.NonCompliance;
+import org.eclipse.jetty.server.handler.ContextHandler;
 import org.eclipse.jetty.util.BufferUtil;
 import org.eclipse.jetty.util.ByteArrayOutputStream2;
 import org.eclipse.jetty.util.MultiException;
@@ -98,6 +99,8 @@ private enum State
     private final MultipartConfigElement _config;
     private final File _contextTmpDir;
     private final String _contentType;
+    private final int _maxParts;
+    private int _numParts;
     private volatile Throwable _err;
     private volatile Path _tmpDir;
     private volatile boolean _deleteOnExit;
@@ -367,6 +370,18 @@ public String getContentDispositionFilename()
      * @param contextTmpDir javax.servlet.context.tempdir
      */
     public MultiPartFormInputStream(InputStream in, String contentType, MultipartConfigElement config, File contextTmpDir)
+    {
+        this(in, contentType, config, contextTmpDir, ContextHandler.DEFAULT_MAX_FORM_KEYS);
+    }
+
+    /**
+     * @param in Request input stream
+     * @param contentType Content-Type header
+     * @param config MultipartConfigElement
+     * @param contextTmpDir javax.servlet.context.tempdir
+     * @param maxParts the maximum number of parts that can be parsed from the multipart content (0 for no parts allowed, -1 for unlimited parts).
+     */
+    public MultiPartFormInputStream(InputStream in, String contentType, MultipartConfigElement config, File contextTmpDir, int maxParts)
     {
         // Must be a multipart request.
         _contentType = contentType;
@@ -375,6 +390,7 @@ public MultiPartFormInputStream(InputStream in, String contentType, MultipartCon
 
         _contextTmpDir =  (contextTmpDir != null) ? contextTmpDir : new File(System.getProperty("java.io.tmpdir"));
         _config = (config != null) ? config : new MultipartConfigElement(_contextTmpDir.getAbsolutePath());
+        _maxParts = maxParts;
 
         if (in instanceof ServletInputStream)
         {
@@ -797,6 +813,9 @@ public boolean content(ByteBuffer buffer, boolean last)
         public void startPart()
         {
             reset();
+            _numParts++;
+            if (_maxParts >= 0 && _numParts > _maxParts)
+                throw new IllegalStateException(String.format("Form with too many parts [%d > %d]", _numParts, _maxParts));
         }
 
         @Override