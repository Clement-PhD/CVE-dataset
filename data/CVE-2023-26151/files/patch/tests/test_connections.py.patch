@@ -1,10 +1,11 @@
 # coding: utf-8
 import asyncio
 import pytest
+import asyncio
+import struct
 
-from asyncua import Client, Server
+from asyncua import Client, Server, ua
 from asyncua.ua.uaerrors import BadMaxConnectionsReached
-
 from .conftest import port_num, find_free_port
 
 pytestmark = pytest.mark.asyncio
@@ -26,6 +27,21 @@ async def test_max_connections_1(opc):
     opc.server.iserver.isession.__class__.max_connections = 1000
 
 
+async def test_dos_server(opc):
+    # See issue 1013 a crafted packet triggered dos
+    port = opc.server.endpoint.port
+    async with Client(f'opc.tcp://127.0.0.1:{port}') as c:
+        # craft invalid packet that trigger dos
+        message_type, chunk_type, packet_size = [ua.MessageType.SecureOpen, b'E', 0]
+        c.uaclient.protocol.transport.write(struct.pack("<3scI", message_type, chunk_type, packet_size))
+        # sleep to give the server time to handle the message because we bypass the asyncio
+        await asyncio.sleep(1.0)
+        with pytest.raises(ConnectionError):
+            # now try to read a value to see if server is still alive
+            server_time_node = c.get_node(ua.NodeId(ua.ObjectIds.Server_ServerStatus_CurrentTime))
+            await server_time_node.read_value()
+
+
 async def test_safe_disconnect():
     c = Client(url="opc.tcp://example:4840")
     await c.disconnect()