@@ -40,6 +40,11 @@ class TestSqoopHook:
         "hcatalog_database": "hive_database",
         "hcatalog_table": "hive_table",
     }
+    _config_export_extra_options = {
+        "extra_options": collections.OrderedDict(
+            [("update-key", "id"), ("update-mode", "allowinsert"), ("fetch-size", 1)]
+        ),
+    }
     _config_export = {
         "table": "export_data_to",
         "export_dir": "/hdfs/data/to/be/exported",
@@ -54,23 +59,22 @@ class TestSqoopHook:
         "input_optionally_enclosed_by": '"',
         "batch": True,
         "relaxed_isolation": True,
-        "extra_export_options": collections.OrderedDict(
-            [("update-key", "id"), ("update-mode", "allowinsert"), ("fetch-size", 1)]
-        ),
         "schema": "domino",
     }
+    _config_import_extra_options = {
+        "extra_options": {
+            "hcatalog-storage-stanza": '"stored as orcfile"',
+            "show": "",
+            "fetch-size": 1,
+        },
+    }
     _config_import = {
         "target_dir": "/hdfs/data/target/location",
         "append": True,
         "file_type": "parquet",
         "split_by": "\n",
         "direct": True,
         "driver": "com.microsoft.jdbc.sqlserver.SQLServerDriver",
-        "extra_import_options": {
-            "hcatalog-storage-stanza": '"stored as orcfile"',
-            "show": "",
-            "fetch-size": 1,
-        },
     }
 
     _config_json = {
@@ -111,6 +115,16 @@ def setup_method(self):
                 extra=None,
             )
         )
+        db.merge_conn(
+            Connection(
+                conn_id="invalid_schema_conn",
+                conn_type="mssql",
+                schema="schema?query_param1=value1",
+                host="rmdbs",
+                port=5050,
+                extra=None,
+            )
+        )
 
     @patch("subprocess.Popen")
     def test_popen(self, mock_popen):
@@ -126,7 +140,7 @@ def test_popen(self, mock_popen):
         mock_popen.return_value.__enter__.return_value = mock_proc
 
         # When
-        hook = SqoopHook(conn_id="sqoop_test", libjars="/path/to/jars")
+        hook = SqoopHook(conn_id="sqoop_test", libjars="/path/to/jars", **self._config_export_extra_options)
         hook.export_table(**self._config_export)
 
         # Then
@@ -172,7 +186,7 @@ def test_popen(self, mock_popen):
                 "--update-mode",
                 "allowinsert",
                 "--fetch-size",
-                str(self._config_export["extra_export_options"].get("fetch-size")),
+                str(self._config_export_extra_options["extra_options"].get("fetch-size")),
                 "--table",
                 self._config_export["table"],
                 "--",
@@ -243,7 +257,7 @@ def test_export_cmd(self):
         """
         Tests to verify the hook export command is building correct Sqoop export command.
         """
-        hook = SqoopHook()
+        hook = SqoopHook(**self._config_export_extra_options)
 
         # The subprocess requires an array but we build the cmd by joining on a space
         cmd = " ".join(
@@ -261,7 +275,6 @@ def test_export_cmd(self):
                 input_optionally_enclosed_by=self._config_export["input_optionally_enclosed_by"],
                 batch=self._config_export["batch"],
                 relaxed_isolation=self._config_export["relaxed_isolation"],
-                extra_export_options=self._config_export["extra_export_options"],
                 schema=self._config_export["schema"],
             )
         )
@@ -287,7 +300,7 @@ def test_export_cmd(self):
         if self._config_export["relaxed_isolation"]:
             assert "--relaxed-isolation" in cmd
 
-        if self._config_export["extra_export_options"]:
+        if self._config_export_extra_options["extra_options"]:
             assert "--update-key" in cmd
             assert "--update-mode" in cmd
             assert "--fetch-size" in cmd
@@ -299,6 +312,7 @@ def test_import_cmd(self):
         """
         Tests to verify the hook import command is building correct Sqoop import command.
         """
+        # Test hook without extra import options
         hook = SqoopHook()
 
         # The subprocess requires an array but we build the cmd by joining on a space
@@ -310,7 +324,6 @@ def test_import_cmd(self):
                 split_by=self._config_import["split_by"],
                 direct=self._config_import["direct"],
                 driver=self._config_import["driver"],
-                extra_import_options=None,
             )
         )
 
@@ -328,6 +341,9 @@ def test_import_cmd(self):
         assert "--show" not in cmd
         assert 'hcatalog-storage-stanza "stored as orcfile"' not in cmd
 
+        # Test hook with extra import options
+        hook = SqoopHook(**self._config_import_extra_options)
+
         cmd = " ".join(
             hook._import_cmd(
                 target_dir=None,
@@ -336,7 +352,6 @@ def test_import_cmd(self):
                 split_by=self._config_import["split_by"],
                 direct=self._config_import["direct"],
                 driver=self._config_import["driver"],
-                extra_import_options=self._config_import["extra_import_options"],
             )
         )
 
@@ -383,5 +398,10 @@ def test_connection_string_preparation(self):
 
     def test_invalid_host(self):
         hook = SqoopHook(conn_id="invalid_host_conn")
-        with pytest.raises(ValueError, match="host should not contain a"):
+        with pytest.raises(ValueError, match="should not contain a"):
+            hook._prepare_command()
+
+    def test_invalid_schema(self):
+        hook = SqoopHook(conn_id="invalid_schema_conn")
+        with pytest.raises(ValueError, match="should not contain a"):
             hook._prepare_command()
