@@ -4,16 +4,16 @@
 
 from http import HTTPStatus
 from flask import g, request
-from flask_restful import reqparse, Api
-
+from flask_restful import Api
 
 from vantage6.server.resource import with_user_or_node, with_user
 from vantage6.server.resource import ServicesResources
 from vantage6.server.resource.common.pagination import Pagination
 from vantage6.server.permission import (Scope as S,
                                         Operation as P, PermissionManager)
 from vantage6.server import db
-from vantage6.server.resource.common._schema import NodeSchema
+from vantage6.server.resource.common.output_schema import NodeSchema
+from vantage6.server.resource.common.input_schema import NodeInputSchema
 
 
 module_name = __name__.split('.')[-1]
@@ -89,6 +89,7 @@ def permissions(permissions: PermissionManager) -> None:
 # Resources / API's
 # ------------------------------------------------------------------------------
 node_schema = NodeSchema()
+node_input_schema = NodeInputSchema()
 
 
 class NodeBase(ServicesResources):
@@ -255,10 +256,11 @@ def post(self):
                     description: Collaboration id
                   organization_id:
                     type: integer
-                    description: Organization id
+                    description: Organization id. If not provided, the user's
+                      organization is used
                   name:
-                    type: str
-                    description: Human-readable name, if not profided a name
+                    type: string
+                    description: Human-readable name. If not provided a name
                       is generated
 
         responses:
@@ -278,22 +280,21 @@ def post(self):
 
         tags: ["Node"]
         """
-        parser = reqparse.RequestParser()
-        parser.add_argument("collaboration_id", type=int, required=True,
-                            help="This field cannot be left blank!")
-        parser.add_argument("organization_id", type=int, required=False)
-        parser.add_argument("name", type=str, required=False)
-        data = parser.parse_args()
-
-        collaboration = db.Collaboration.get(data["collaboration_id"])
+        data = request.get_json()
+        # validate request body
+        errors = node_input_schema.validate(data)
+        if errors:
+            return {'msg': 'Request body is incorrect', 'errors': errors}, \
+                HTTPStatus.BAD_REQUEST
 
         # check that the collaboration exists
+        collaboration = db.Collaboration.get(data["collaboration_id"])
         if not collaboration:
             return {"msg": f"collaboration id={data['collaboration_id']} "
                     "does not exist"}, HTTPStatus.NOT_FOUND  # 404
 
         # check permissions
-        org_id = data["organization_id"]
+        org_id = data.get("organization_id", None)
         user_org_id = g.user.organization.id
         if not self.r.c_glo.can():
             own = not org_id or org_id == user_org_id
@@ -318,7 +319,7 @@ def post(self):
                         HTTPStatus.BAD_REQUEST
 
         # if no name is provided, generate one
-        name = data['name'] if data['name'] else \
+        name = data['name'] if 'name' in data else \
             f"{organization.name} - {collaboration.name} Node"
         if db.Node.exists("name", name):
             return {
@@ -519,6 +520,13 @@ def patch(self, id):
 
         tags: ["Node"]
         """
+        data = request.get_json()
+        # validate request body
+        errors = node_input_schema.validate(data, partial=True)
+        if errors:
+            return {'msg': 'Request body is incorrect', 'errors': errors}, \
+                HTTPStatus.BAD_REQUEST
+
         node = db.Node.get(id)
         if not node:
             return {'msg': f'Node id={id} not found!'}, HTTPStatus.NOT_FOUND
@@ -531,8 +539,6 @@ def patch(self, id):
                 return {'msg': 'You lack the permission to do that!'}, \
                     HTTPStatus.UNAUTHORIZED
 
-        data = request.get_json()
-
         # update fields
         if 'name' in data:
             name = data['name']