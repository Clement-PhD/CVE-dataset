--- /dev/null
+++ /dev/null
@@ -43,14 +49,19 @@ over :math:`\ZZ/n\ZZ`, and doing arithmetic on that
 curve--if something goes wrong when doing arithmetic, we factor
 :math:`n`.
 
-In the following example, GMP-ECM is much faster than Sage's generic
-factor function. Again, this emphasizes that the best factoring
-algorithm may depend on your specific problem.
+In the following example, GMP-ECM is over 10 times faster than
+Sage's generic factor function. Again, this emphasizes that Sage's
+generic factor command would benefit from a rewrite that uses
+GMP-ECM and qsieve.
 
 ::
 
-    sage: n = next_prime(2^40) * next_prime(2^300)
-    sage: n.factor(algorithm="ecm")
-    1099511627791 * 2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397533
-    sage: n.factor()  # uses PARI at the time of writing
+    sage: time ecm.factor(next_prime(2^40) * next_prime(2^300))    # not tested
+    CPU times: user 0.85 s, sys: 0.01 s, total: 0.86 s
+    Wall time: 1.73 s
+    [1099511627791,
+     2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397533]
+    sage: time factor(next_prime(2^40) * next_prime(2^300))        # not tested
+    CPU times: user 23.82 s, sys: 0.04 s, total: 23.86 s
+    Wall time: 24.35 s
 
