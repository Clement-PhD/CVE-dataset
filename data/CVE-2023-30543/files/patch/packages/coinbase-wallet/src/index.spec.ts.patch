@@ -1,7 +1,7 @@
 import { createWeb3ReactStoreAndActions } from '@web3-react/store'
 import type { Actions, Web3ReactStore } from '@web3-react/types'
 import { CoinbaseWallet } from '.'
-import { MockEIP1193Provider } from '../../eip1193/src/index.spec'
+import { MockEIP1193Provider } from '../../eip1193/src/mock'
 
 jest.mock(
   '@coinbase/wallet-sdk',
@@ -19,7 +19,7 @@ const accounts: string[] = []
 describe('Coinbase Wallet', () => {
   let store: Web3ReactStore
   let connector: CoinbaseWallet
-  let mockConnector: MockEIP1193Provider
+  let mockProvider: MockEIP1193Provider
 
   describe('connectEagerly = true', () => {
     beforeEach(async () => {
@@ -34,14 +34,20 @@ describe('Coinbase Wallet', () => {
       })
       await connector.connectEagerly().catch(() => {})
 
-      mockConnector = connector.provider as unknown as MockEIP1193Provider
-      mockConnector.chainId = chainId
-      mockConnector.accounts = accounts
+      mockProvider = connector.provider as unknown as MockEIP1193Provider
+      mockProvider.chainId = chainId
+      mockProvider.accounts = accounts
     })
 
     test('#activate', async () => {
       await connector.activate()
 
+      expect(mockProvider.eth_requestAccounts).toHaveBeenCalled()
+      expect(mockProvider.eth_accounts).not.toHaveBeenCalled()
+      expect(mockProvider.eth_chainId).toHaveBeenCalled()
+      expect(mockProvider.eth_chainId.mock.invocationCallOrder[0])
+        .toBeGreaterThan(mockProvider.eth_requestAccounts.mock.invocationCallOrder[0])
+
       expect(store.getState()).toEqual({
         chainId: Number.parseInt(chainId, 16),
         accounts,