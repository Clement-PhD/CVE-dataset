@@ -18,6 +18,8 @@ BEGIN {
 }
 use HTTP::Tiny;
 
+delete $ENV{PERL_HTTP_TINY_INSECURE_BY_DEFAULT};
+
 plan skip_all => 'Only run for $ENV{AUTOMATED_TESTING}'
   unless $ENV{AUTOMATED_TESTING};
 
@@ -27,33 +29,73 @@ if ( can_run('openssl') ) {
   diag "\nNote: running test with ", qx/openssl version/;
 }
 
-my $data = {
-    'https://www.google.ca/' => {
-        host => 'www.google.ca',
-        pass => { SSL_verifycn_scheme => 'http', SSL_verifycn_name => 'www.google.ca', SSL_verify_mode => 0x01, SSL_ca_file => Mozilla::CA::SSL_ca_file() },
-        fail => { SSL_verify_callback => sub { 0 }, SSL_verify_mode => 0x01 },
-        default_should_yield => '1',
-    },
-    'https://twitter.com/' => {
-        host => 'twitter.com',
-        pass => { SSL_verifycn_scheme => 'http', SSL_verifycn_name => 'twitter.com', SSL_verify_mode => 0x01, SSL_ca_file => Mozilla::CA::SSL_ca_file() },
-        fail => { SSL_verify_callback => sub { 0 }, SSL_verify_mode => 0x01 },
-        default_should_yield => '1',
-    },
-    'https://github.com/' => {
-        host => 'github.com',
-        pass => { SSL_verifycn_scheme => 'http', SSL_verifycn_name => 'github.com', SSL_verify_mode => 0x01, SSL_ca_file => Mozilla::CA::SSL_ca_file() },
-        fail => { SSL_verify_callback => sub { 0 }, SSL_verify_mode => 0x01 },
-        default_should_yield => '1',
-    },
-    'https://spinrite.com/' => {
-        host => 'spinrite.com',
-        pass => { SSL_verifycn_scheme => 'none', SSL_verifycn_name => 'spinrite.com', SSL_verify_mode => 0x00 },
-        fail => { SSL_verifycn_scheme => 'http', SSL_verifycn_name => 'spinrite.com', SSL_verify_mode => 0x01, SSL_ca_file => Mozilla::CA::SSL_ca_file() },
-        default_should_yield => '',
-    }
-};
-plan tests => 1+ scalar keys %$data;
+test_ssl('https://cpan.org/' => {
+    host => 'cpan.org',
+    pass => { verify_SSL => 1 },
+    fail => { verify_SSL => 1, SSL_options => { SSL_ca_file => "t/snake-oil.crt" } },
+    default_verify_should_return => !!1,
+});
+
+test_ssl('https://github.com/' => {
+    host => 'github.com',
+    pass => { verify_SSL => 1 },
+    fail => { verify_SSL => 1, SSL_options => { SSL_ca_file => "t/snake-oil.crt" } },
+    default_verify_should_return => !!1,
+});
+
+test_ssl('https://wrong.host.badssl.com/' => {
+    host => 'wrong.host.badssl.com',
+    pass => { SSL_options => { SSL_verifycn_scheme => 'none', SSL_verifycn_name => 'wrong.host.badssl.com', SSL_verify_mode => 0x00 } },
+    fail => { SSL_options => { SSL_verifycn_scheme => 'http', SSL_verifycn_name => 'wrong.host.badssl.com', SSL_verify_mode => 0x01, SSL_ca_file => Mozilla::CA::SSL_ca_file() } },
+    default_verify_should_return => !!0,
+});
+
+test_ssl('https://untrusted-root.badssl.com/' => {
+    host => 'untrusted-root.badssl.com',
+    pass => { verify_SSL => 0 },
+    fail => { verify_SSL => 1 },
+    default_verify_should_return => !!0,
+});
+
+test_ssl('https://mozilla-modern.badssl.com/' => {
+    host => 'mozilla-modern.badssl.com',
+    pass => { verify_SSL => 1 },
+    fail => { verify_SSL => 1, SSL_options => { SSL_ca_file => "t/snake-oil.crt" } },
+    default_verify_should_return => !!1,
+});
+
+{
+    local $ENV{PERL_HTTP_TINY_INSECURE_BY_DEFAULT} = 1;
+    test_ssl('https://wrong.host.badssl.com/' => {
+        host => 'wrong.host.badssl.com',
+        pass => { verify_SSL => 0 },
+        fail => { verify_SSL => 1 },
+        default_verify_should_return => !!1,
+    });
+    test_ssl('https://expired.badssl.com/' => {
+        host => 'expired.badssl.com',
+        pass => { verify_SSL => 0 },
+        fail => { verify_SSL => 1 },
+        default_verify_should_return => !!1,
+    });
+
+}
+
+test_ssl('https://wrong.host.badssl.com/' => {
+    host => 'wrong.host.badssl.com',
+    pass => { verify_SSL => 0 },
+    fail => { verify_SSL => 1 },
+    default_verify_should_return => !!0,
+});
+
+test_ssl('https://expired.badssl.com/' => {
+    host => 'expired.badssl.com',
+    pass => { verify_SSL => 0 },
+    fail => { verify_SSL => 1 },
+    default_verify_should_return => !!0,
+});
+
+
 
 subtest "can_ssl" => sub {
     ok( HTTP::Tiny->can_ssl, "class method" );
@@ -69,8 +111,10 @@ subtest "can_ssl" => sub {
     like( $why, qr/not found or not readable/, "failure reason" );
 };
 
+done_testing();
 
-while (my ($url, $data) = each %$data) {
+sub test_ssl {
+    my ($url, $data) = @_;
     subtest $url => sub {
         plan 'skip_all' => 'Internet connection timed out'
             unless IO::Socket::INET->new(
@@ -81,30 +125,34 @@ while (my ($url, $data) = each %$data) {
         );
 
         # the default verification
-        my $response = HTTP::Tiny->new(verify_ssl => 1)->get($url);
-        is $response->{success}, $data->{default_should_yield}, "Request to $url passed/failed using default as expected"
+        my $response = HTTP::Tiny->new()->get($url);
+        is $response->{success}, $data->{default_verify_should_return}, "Request to $url passed/failed using default as expected"
             or do {
                 # $response->{content} = substr $response->{content}, 0, 50;
                 $response->{content} =~ s{\n.*}{}s;
                 diag explain [IO::Socket::SSL::errstr(), $response]
             };
 
         # force validation to succeed
-        my $pass = HTTP::Tiny->new( SSL_options => $data->{pass} )->get($url);
-        isnt $pass->{status}, '599', "Request to $url completed (forced pass)"
-            or do {
-                $pass->{content} =~ s{\n.*}{}s;
-                diag explain $pass
-            };
-        ok $pass->{content}, 'Got some content';
+        if ($data->{pass}) {
+            my $pass = HTTP::Tiny->new( %{$data->{pass}} )->get($url);
+            isnt $pass->{status}, '599', "Request to $url completed (forced pass)"
+              or do {
+                  $pass->{content} =~ s{\n.*}{}s;
+                  diag explain $pass
+              };
+            ok $pass->{content}, 'Got some content';
+        }
 
         # force validation to fail
-        my $fail = HTTP::Tiny->new( SSL_options => $data->{fail} )->get($url);
-        is $fail->{status}, '599', "Request to $url failed (forced fail)"
-            or do {
-                $fail->{content} =~ s{\n.*}{}s;
-                diag explain [IO::Socket::SSL::errstr(), $fail]
-            };
-        ok $fail->{content}, 'Got some content';
+        if ($data->{fail}) {
+            my $fail = HTTP::Tiny->new( %{$data->{fail}} )->get($url);
+            is $fail->{status}, '599', "Request to $url failed (forced fail)"
+              or do {
+                  $fail->{content} =~ s{\n.*}{}s;
+                  diag explain [IO::Socket::SSL::errstr(), $fail]
+              };
+            ok $fail->{content}, 'Got some content';
+        }
     };
 }