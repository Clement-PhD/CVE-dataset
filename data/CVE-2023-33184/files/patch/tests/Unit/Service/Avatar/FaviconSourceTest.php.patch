@@ -30,6 +30,7 @@
 use OCA\Mail\Service\Avatar\AvatarFactory;
 use OCA\Mail\Service\Avatar\FaviconSource;
 use ChristophWurst\Nextcloud\Testing\TestCase;
+use OCA\Mail\Validation\RemoteHostValidator;
 use OCA\Mail\Vendor\Favicon\Favicon;
 use OCP\Files\IMimeTypeDetector;
 use OCP\Http\Client\IClient;
@@ -49,19 +50,46 @@ class FaviconSourceTest extends TestCase {
 
 	/** @var FaviconSource */
 	private $source;
+	/** @var RemoteHostValidator|(RemoteHostValidator&MockObject)|MockObject */
+	private RemoteHostValidator|MockObject $remoteHostValidator;
 
 	protected function setUp(): void {
 		parent::setUp();
 
 		$this->clientService = $this->createMock(IClientService::class);
 		$this->favicon = $this->createMock(Favicon::class);
 		$this->mimeDetector = $this->createMock(IMimeTypeDetector::class);
+		$this->remoteHostValidator = $this->createMock(RemoteHostValidator::class);
+
+		$this->source = new FaviconSource(
+			$this->clientService,
+			$this->favicon,
+			$this->mimeDetector,
+			$this->remoteHostValidator,
+		);
+	}
+
+	public function testFetchInvaild(): void {
+		$email = 'hey@jancborchardt.net';
+		$this->remoteHostValidator->expects(self::once())
+			->method('isValid')
+			->with('https://jancborchardt.net')
+			->willReturn(false);
+		$avatarFactory = $this->createMock(AvatarFactory::class);
+		$this->favicon->expects(self::never())
+			->method('get');
 
-		$this->source = new FaviconSource($this->clientService, $this->favicon, $this->mimeDetector);
+		$avatar = $this->source->fetch($email, $avatarFactory);
+
+		$this->assertNull($avatar);
 	}
 
-	public function testFetchNoIconsFound() {
+	public function testFetchNoIconsFound(): void {
 		$email = 'hey@jancborchardt.net';
+		$this->remoteHostValidator->expects(self::once())
+			->method('isValid')
+			->with('https://jancborchardt.net')
+			->willReturn(true);
 		$avatarFactory = $this->createMock(AvatarFactory::class);
 		$this->favicon->expects($this->once())
 			->method('get')
@@ -73,9 +101,13 @@ public function testFetchNoIconsFound() {
 		$this->assertNull($avatar);
 	}
 
-	public function testFetchSingleIcon() {
+	public function testFetchSingleIcon(): void {
 		$email = 'hey@jancborchardt.net';
 		$iconUrl = "https://domain.tld/favicon.ic";
+		$this->remoteHostValidator->expects(self::once())
+			->method('isValid')
+			->with('https://jancborchardt.net')
+			->willReturn(true);
 		$avatarFactory = $this->createMock(AvatarFactory::class);
 		$avatar = new Avatar('https://domain.tld/favicon.ico');
 		$this->favicon->expects($this->once())
@@ -108,9 +140,13 @@ public function testFetchSingleIcon() {
 		$this->assertSame($avatar, $actualAvatar);
 	}
 
-	public function testFetchEmptyIcon() {
+	public function testFetchEmptyIcon(): void {
 		$email = 'hey@jancborchardt.net';
 		$iconUrl = "https://domain.tld/favicon.ic";
+		$this->remoteHostValidator->expects(self::once())
+			->method('isValid')
+			->with('https://jancborchardt.net')
+			->willReturn(true);
 		$avatarFactory = $this->createMock(AvatarFactory::class);
 		$this->favicon->expects($this->once())
 			->method('get')