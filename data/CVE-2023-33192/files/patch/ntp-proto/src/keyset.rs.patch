@@ -149,6 +149,11 @@ impl KeySet {
         plaintext
     }
 
+    #[cfg(feature = "fuzz")]
+    pub fn encode_cookie_pub(&self, cookie: &DecodedServerCookie) -> Vec<u8> {
+        self.encode_cookie(cookie)
+    }
+
     pub(crate) fn encode_cookie(&self, cookie: &DecodedServerCookie) -> Vec<u8> {
         let mut plaintext = Self::plaintext(cookie);
         let plaintext_len = plaintext.as_slice().len();
@@ -171,8 +176,13 @@ impl KeySet {
         output
     }
 
+    #[cfg(feature = "fuzz")]
+    pub fn decode_cookie_pub(&self, cookie: &[u8]) -> Result<DecodedServerCookie, DecryptError> {
+        self.decode_cookie(cookie)
+    }
+
     pub(crate) fn decode_cookie(&self, cookie: &[u8]) -> Result<DecodedServerCookie, DecryptError> {
-        if cookie.len() < 20 {
+        if cookie.len() < 22 {
             return Err(DecryptError);
         }
 
@@ -182,10 +192,10 @@ impl KeySet {
             return Err(DecryptError);
         }
 
-        let cipher_text_length = u16::from_be_bytes(cookie[4..6].try_into().unwrap()) as usize;
+        let cipher_text_length = u16::from_be_bytes([cookie[4], cookie[5]]) as usize;
 
         let nonce = &cookie[6..22];
-        let ciphertext = &cookie[22..][..cipher_text_length];
+        let ciphertext = cookie[22..].get(..cipher_text_length).ok_or(DecryptError)?;
         let plaintext = self.keys[id].decrypt(nonce, ciphertext, &[])?;
 
         let algorithm =
@@ -378,4 +388,16 @@ mod tests {
 
         assert!(provider.get().decode_cookie(&encoded).is_err());
     }
+
+    #[test]
+    fn invalid_cookie_length() {
+        // this cookie data lies about its length, pretending to be longer than it actually is.
+        let input = b"\x23\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x00\x24\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x04\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x04\x00\x28\x00\x10\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
+
+        let provider = KeySetProvider::new(1);
+
+        let output = provider.get().decode_cookie(input);
+
+        assert!(output.is_err());
+    }
 }
