@@ -42,11 +42,6 @@ sealed class IrcProvider : Provider
 		/// <inheritdoc />
 		public override string BotMention => client.Nickname;
 
-		/// <summary>
-		/// The <see cref="IAsyncDelayer"/> for the <see cref="IrcProvider"/>.
-		/// </summary>
-		readonly IAsyncDelayer asyncDelayer;
-
 		/// <summary>
 		/// The <see cref="IrcFeatures"/> client.
 		/// </summary>
@@ -105,24 +100,22 @@ sealed class IrcProvider : Provider
 		/// <summary>
 		/// Initializes a new instance of the <see cref="IrcProvider"/> class.
 		/// </summary>
-		/// <param name="jobManager">The <see cref="IJobManager"/> for the provider.</param>
-		/// <param name="assemblyInformationProvider">The <see cref="IAssemblyInformationProvider"/> to get the <see cref="IAssemblyInformationProvider.VersionString"/> from.</param>
-		/// <param name="asyncDelayer">The value of <see cref="asyncDelayer"/>.</param>
+		/// <param name="jobManager">The <see cref="IJobManager"/> for the <see cref="Provider"/>.</param>
+		/// <param name="asyncDelayer">The <see cref="IAsyncDelayer"/> for the <see cref="Provider"/>.</param>
 		/// <param name="logger">The <see cref="ILogger"/> for the <see cref="Provider"/>.</param>
+		/// <param name="assemblyInformationProvider">The <see cref="IAssemblyInformationProvider"/> to get the <see cref="IAssemblyInformationProvider.VersionString"/> from.</param>
 		/// <param name="chatBot">The <see cref="Models.ChatBot"/> for the <see cref="Provider"/>.</param>
 		public IrcProvider(
 			IJobManager jobManager,
-			IAssemblyInformationProvider assemblyInformationProvider,
 			IAsyncDelayer asyncDelayer,
 			ILogger<IrcProvider> logger,
+			IAssemblyInformationProvider assemblyInformationProvider,
 			Models.ChatBot chatBot)
-			: base(jobManager, logger, chatBot)
+			: base(jobManager, asyncDelayer, logger, chatBot)
 		{
 			if (assemblyInformationProvider == null)
 				throw new ArgumentNullException(nameof(assemblyInformationProvider));
 
-			this.asyncDelayer = asyncDelayer ?? throw new ArgumentNullException(nameof(asyncDelayer));
-
 			var builder = chatBot.CreateConnectionStringBuilder();
 			if (builder == null || !builder.Valid || builder is not IrcConnectionStringBuilder ircBuilder)
 				throw new InvalidOperationException("Invalid ChatConnectionStringBuilder!");
@@ -172,53 +165,59 @@ public override async ValueTask DisposeAsync()
 		}
 
 		/// <inheritdoc />
-		public override Task SendMessage(Message replyTo, MessageContent message, ulong channelId, CancellationToken cancellationToken) => Task.Factory.StartNew(
-			() =>
-			{
-				// IRC doesn't allow newlines
-				// Explicitly ignore embeds
-				var messageText = message.Text;
-				messageText ??= $"Embed Only: {JsonConvert.SerializeObject(message.Embed)}";
-
-				messageText = String.Concat(
-					messageText
-						.Where(x => x != '\r')
-						.Select(x => x == '\n' ? '|' : x));
-
-				var channelName = channelIdMap[channelId];
-				SendType sendType;
-				if (channelName == null)
+		public override Task SendMessage(Message replyTo, MessageContent message, ulong channelId, CancellationToken cancellationToken)
+		{
+			if (message == null)
+				throw new ArgumentNullException(nameof(message));
+
+			return Task.Factory.StartNew(
+				() =>
 				{
-					channelName = queryChannelIdMap[channelId];
-					sendType = SendType.Notice;
-				}
-				else
-					sendType = SendType.Message;
+					// IRC doesn't allow newlines
+					// Explicitly ignore embeds
+					var messageText = message.Text;
+					messageText ??= $"Embed Only: {JsonConvert.SerializeObject(message.Embed)}";
+
+					messageText = String.Concat(
+						messageText
+							.Where(x => x != '\r')
+							.Select(x => x == '\n' ? '|' : x));
+
+					var channelName = channelIdMap[channelId];
+					SendType sendType;
+					if (channelName == null)
+					{
+						channelName = queryChannelIdMap[channelId];
+						sendType = SendType.Notice;
+					}
+					else
+						sendType = SendType.Message;
 
-				var messageSize = Encoding.UTF8.GetByteCount(messageText) + Encoding.UTF8.GetByteCount(channelName) + PreambleMessageLength;
-				var messageTooLong = messageSize > MessageBytesLimit;
-				if (messageTooLong)
-					messageText = $"TGS: Could not send message to IRC. Line write exceeded protocol limit of {MessageBytesLimit}B.";
+					var messageSize = Encoding.UTF8.GetByteCount(messageText) + Encoding.UTF8.GetByteCount(channelName) + PreambleMessageLength;
+					var messageTooLong = messageSize > MessageBytesLimit;
+					if (messageTooLong)
+						messageText = $"TGS: Could not send message to IRC. Line write exceeded protocol limit of {MessageBytesLimit}B.";
 
-				try
-				{
-					client.SendMessage(sendType, channelName, messageText);
-				}
-				catch (Exception e)
-				{
-					Logger.LogWarning(e, "Unable to send to channel {channelName}!", channelName);
-					return;
-				}
+					try
+					{
+						client.SendMessage(sendType, channelName, messageText);
+					}
+					catch (Exception e)
+					{
+						Logger.LogWarning(e, "Unable to send to channel {channelName}!", channelName);
+						return;
+					}
 
-				if (messageTooLong)
-					Logger.LogWarning(
-						"Failed to send to channel {channelId}: Message size ({messageSize}B) exceeds IRC limit of 512B",
-						channelId,
-						messageSize);
-			},
-			cancellationToken,
-			DefaultIOManager.BlockingTaskCreationOptions,
-			TaskScheduler.Current);
+					if (messageTooLong)
+						Logger.LogWarning(
+							"Failed to send to channel {channelId}: Message size ({messageSize}B) exceeds IRC limit of 512B",
+							channelId,
+							messageSize);
+				},
+				cancellationToken,
+				DefaultIOManager.BlockingTaskCreationOptions,
+				TaskScheduler.Current);
+		}
 
 		/// <inheritdoc />
 		public override async Task<Func<string, string, Task>> SendUpdateMessage(
@@ -231,6 +230,15 @@ public override async ValueTask DisposeAsync()
 			bool localCommitPushed,
 			CancellationToken cancellationToken)
 		{
+			if (revisionInformation == null)
+				throw new ArgumentNullException(nameof(revisionInformation));
+			if (byondVersion == null)
+				throw new ArgumentNullException(nameof(byondVersion));
+			if (gitHubOwner == null)
+				throw new ArgumentNullException(nameof(gitHubOwner));
+			if (gitHubRepo == null)
+				throw new ArgumentNullException(nameof(gitHubRepo));
+
 			var commitInsert = revisionInformation.CommitSha[..7];
 			string remoteCommitInsert;
 			if (revisionInformation.CommitSha == revisionInformation.OriginCommitSha)
@@ -626,14 +634,14 @@ void AuthenticationDelegate(object sender, ReadLineEventArgs e)
 
 				var listenTimeSpan = TimeSpan.FromMilliseconds(10);
 				for (; !recievedAck;
-					await asyncDelayer.Delay(listenTimeSpan, timeoutToken))
+					await AsyncDelayer.Delay(listenTimeSpan, timeoutToken))
 					await NonBlockingListen(cancellationToken);
 
 				client.WriteLine("AUTHENTICATE PLAIN", Priority.Critical);
 				timeoutToken.ThrowIfCancellationRequested();
 
 				for (; !recievedPlus;
-					await asyncDelayer.Delay(listenTimeSpan, timeoutToken))
+					await AsyncDelayer.Delay(listenTimeSpan, timeoutToken))
 					await NonBlockingListen(cancellationToken);
 			}
 			finally
@@ -699,8 +707,7 @@ async Task HardDisconnect(CancellationToken cancellationToken)
 				Task.WhenAll(
 					disconnectTask,
 					listenTask ?? Task.CompletedTask),
-				asyncDelayer.Delay(TimeSpan.FromSeconds(5), cancellationToken))
-				;
+				AsyncDelayer.Delay(TimeSpan.FromSeconds(5), cancellationToken));
 		}
 	}
 }