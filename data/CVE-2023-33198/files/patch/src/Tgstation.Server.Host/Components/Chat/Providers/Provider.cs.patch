@@ -10,6 +10,7 @@
 using Tgstation.Server.Host.Extensions;
 using Tgstation.Server.Host.Jobs;
 using Tgstation.Server.Host.Models;
+using Tgstation.Server.Host.Utils;
 
 namespace Tgstation.Server.Host.Components.Chat.Providers
 {
@@ -24,6 +25,11 @@ abstract class Provider : IProvider
 		/// </summary>
 		protected ChatBot ChatBot { get; }
 
+		/// <summary>
+		/// The <see cref="IAsyncDelayer"/> for the <see cref="Provider"/>.
+		/// </summary>
+		protected IAsyncDelayer AsyncDelayer { get; }
+
 		/// <summary>
 		/// The <see cref="ILogger"/> for the <see cref="Provider"/>.
 		/// </summary>
@@ -68,11 +74,13 @@ abstract class Provider : IProvider
 		/// Initializes a new instance of the <see cref="Provider"/> class.
 		/// </summary>
 		/// <param name="jobManager">The value of <see cref="jobManager"/>.</param>
+		/// <param name="asyncDelayer">The value of <see cref="AsyncDelayer"/>.</param>
 		/// <param name="logger">The value of <see cref="Logger"/>.</param>
 		/// <param name="chatBot">The value of <paramref name="chatBot"/>.</param>
-		protected Provider(IJobManager jobManager, ILogger<Provider> logger, ChatBot chatBot)
+		protected Provider(IJobManager jobManager, IAsyncDelayer asyncDelayer, ILogger<Provider> logger, ChatBot chatBot)
 		{
 			this.jobManager = jobManager ?? throw new ArgumentNullException(nameof(jobManager));
+			AsyncDelayer = asyncDelayer ?? throw new ArgumentNullException(nameof(asyncDelayer));
 			Logger = logger ?? throw new ArgumentNullException(nameof(logger));
 			ChatBot = chatBot ?? throw new ArgumentNullException(nameof(chatBot));
 
@@ -98,6 +106,9 @@ public virtual async ValueTask DisposeAsync()
 		{
 			Disposed = true;
 			await StopReconnectionTimer();
+
+			// queue a final message to shutdown the NextMessage Task
+			EnqueueMessage(null);
 			Logger.LogTrace("Disposed");
 		}
 
@@ -206,7 +217,7 @@ public Task SetReconnectInterval(uint reconnectInterval, bool connectNow)
 		/// <summary>
 		/// Queues a <paramref name="message"/> for <see cref="NextMessage(CancellationToken)"/>.
 		/// </summary>
-		/// <param name="message">The <see cref="Message"/> to queue. A value of <see langword="null"/> indicates the channel mappings a out of date.</param>
+		/// <param name="message">The <see cref="Message"/> to queue. A value of <see langword="null"/> indicates the channel mappings are out of date.</param>
 		protected void EnqueueMessage(Message message)
 		{
 			if (message == null)
@@ -256,7 +267,7 @@ async Task ReconnectionLoop(uint reconnectInterval, bool connectNow, Cancellatio
 				try
 				{
 					if (!connectNow)
-						await Task.Delay(TimeSpan.FromMinutes(reconnectInterval), cancellationToken);
+						await AsyncDelayer.Delay(TimeSpan.FromMinutes(reconnectInterval), cancellationToken);
 					else
 						connectNow = false;
 					if (!Connected)
@@ -290,6 +301,7 @@ async Task ReconnectionLoop(uint reconnectInterval, bool connectNow, Cancellatio
 								}
 								catch
 								{
+									// we set this here because otherwise there could be stuff waiting on to connect us forever
 									initialConnectionTcs.TrySetResult();
 									throw;
 								}