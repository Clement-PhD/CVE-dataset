@@ -23,6 +23,7 @@
 using Tgstation.Server.Host.Jobs;
 using Tgstation.Server.Host.Models;
 using Tgstation.Server.Host.System;
+using Tgstation.Server.Host.Utils;
 
 namespace Tgstation.Server.Host.Components.Deployment
 {
@@ -89,6 +90,11 @@ sealed class DreamMaker : IDreamMaker
 		/// </summary>
 		readonly IRemoteDeploymentManagerFactory remoteDeploymentManagerFactory;
 
+		/// <summary>
+		/// The <see cref="IAsyncDelayer"/> for <see cref="DreamMaker"/>.
+		/// </summary>
+		readonly IAsyncDelayer asyncDelayer;
+
 		/// <summary>
 		/// The <see cref="ILogger"/> for <see cref="DreamMaker"/>.
 		/// </summary>
@@ -147,6 +153,7 @@ static string FormatExceptionForUsers(Exception exception)
 		/// <param name="compileJobConsumer">The value of <see cref="compileJobConsumer"/>.</param>
 		/// <param name="repositoryManager">The value of <see cref="repositoryManager"/>.</param>
 		/// <param name="remoteDeploymentManagerFactory">The value of <see cref="remoteDeploymentManagerFactory"/>.</param>
+		/// <param name="asyncDelayer">The value of <see cref="asyncDelayer"/>.</param>
 		/// <param name="logger">The value of <see cref="logger"/>.</param>
 		/// <param name="sessionConfiguration">The value of <see cref="sessionConfiguration"/>.</param>
 		/// <param name="metadata">The value of <see cref="metadata"/>.</param>
@@ -161,6 +168,7 @@ static string FormatExceptionForUsers(Exception exception)
 			ICompileJobSink compileJobConsumer,
 			IRepositoryManager repositoryManager,
 			IRemoteDeploymentManagerFactory remoteDeploymentManagerFactory,
+			IAsyncDelayer asyncDelayer,
 			ILogger<DreamMaker> logger,
 			SessionConfiguration sessionConfiguration,
 			Api.Models.Instance metadata)
@@ -174,6 +182,7 @@ static string FormatExceptionForUsers(Exception exception)
 			this.processExecutor = processExecutor ?? throw new ArgumentNullException(nameof(processExecutor));
 			this.compileJobConsumer = compileJobConsumer ?? throw new ArgumentNullException(nameof(compileJobConsumer));
 			this.repositoryManager = repositoryManager ?? throw new ArgumentNullException(nameof(repositoryManager));
+			this.asyncDelayer = asyncDelayer ?? throw new ArgumentNullException(nameof(asyncDelayer));
 			this.remoteDeploymentManagerFactory = remoteDeploymentManagerFactory ?? throw new ArgumentNullException(nameof(remoteDeploymentManagerFactory));
 			this.logger = logger ?? throw new ArgumentNullException(nameof(logger));
 			this.sessionConfiguration = sessionConfiguration ?? throw new ArgumentNullException(nameof(sessionConfiguration));
@@ -741,13 +750,13 @@ async Task ProgressTask(JobProgressReporter progressReporter, TimeSpan? estimate
 							var remainingSleepThisInterval = nextInterval - DateTimeOffset.UtcNow;
 							var nextSleepSpan = remainingSleepThisInterval < minimumSleepInterval ? minimumSleepInterval : remainingSleepThisInterval;
 
-							await Task.Delay(nextSleepSpan, cancellationToken);
+							await asyncDelayer.Delay(nextSleepSpan, cancellationToken);
 							progressReporter.ReportProgress(lastReport);
 						}
 						while (DateTimeOffset.UtcNow < nextInterval);
 					}
 					else
-						await Task.Delay(minimumSleepInterval, cancellationToken);
+						await asyncDelayer.Delay(minimumSleepInterval, cancellationToken);
 
 					lastReport = estimatedDuration.HasValue ? sleepInterval * (iteration + 1) / estimatedDuration.Value : null;
 					progressReporter.ReportProgress(lastReport);