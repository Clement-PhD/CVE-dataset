@@ -327,49 +327,47 @@ async def file(path_or_url: str, request: fastapi.Request):
                 return RedirectResponse(
                     url=path_or_url, status_code=status.HTTP_302_FOUND
                 )
+
             abs_path = utils.abspath(path_or_url)
+
             in_blocklist = any(
                 utils.is_in_or_equal(abs_path, blocked_path)
                 for blocked_path in blocks.blocked_paths
             )
-            if in_blocklist or any(part.startswith(".") for part in abs_path.parts):
+            is_dotfile = any(part.startswith(".") for part in abs_path.parts)
+            is_dir = abs_path.is_dir()
+
+            if in_blocklist or is_dotfile or is_dir:
                 raise HTTPException(403, f"File not allowed: {path_or_url}.")
+            if not abs_path.exists():
+                raise HTTPException(404, f"File not found: {path_or_url}.")
 
-            in_app_dir = utils.abspath(app.cwd) in abs_path.parents
+            in_app_dir = utils.is_in_or_equal(abs_path, app.cwd)
             created_by_app = str(abs_path) in set().union(*blocks.temp_file_sets)
-            in_file_dir = any(
+            in_allowlist = any(
                 utils.is_in_or_equal(abs_path, allowed_path)
                 for allowed_path in blocks.allowed_paths
             )
-            was_uploaded = utils.abspath(app.uploaded_file_dir) in abs_path.parents
-
-            if in_app_dir or created_by_app or in_file_dir or was_uploaded:
-                if not abs_path.exists():
-                    raise HTTPException(404, "File not found")
-                if abs_path.is_dir():
-                    raise HTTPException(403)
-
-                range_val = request.headers.get("Range", "").strip()
-                if range_val.startswith("bytes=") and "-" in range_val:
-                    range_val = range_val[6:]
-                    start, end = range_val.split("-")
-                    if start.isnumeric() and end.isnumeric():
-                        start = int(start)
-                        end = int(end)
-                        response = ranged_response.RangedFileResponse(
-                            abs_path,
-                            ranged_response.OpenRange(start, end),
-                            dict(request.headers),
-                            stat_result=os.stat(abs_path),
-                        )
-                        return response
-                return FileResponse(abs_path, headers={"Accept-Ranges": "bytes"})
+            was_uploaded = utils.is_in_or_equal(abs_path, app.uploaded_file_dir)
 
-            else:
-                raise HTTPException(
-                    403,
-                    f"File cannot be fetched: {path_or_url}. All files must contained within the Gradio python app working directory, or be a temp file created by the Gradio python app.",
-                )
+            if not (in_app_dir or created_by_app or in_allowlist or was_uploaded):
+                raise HTTPException(403, f"File not allowed: {path_or_url}.")
+
+            range_val = request.headers.get("Range", "").strip()
+            if range_val.startswith("bytes=") and "-" in range_val:
+                range_val = range_val[6:]
+                start, end = range_val.split("-")
+                if start.isnumeric() and end.isnumeric():
+                    start = int(start)
+                    end = int(end)
+                    response = ranged_response.RangedFileResponse(
+                        abs_path,
+                        ranged_response.OpenRange(start, end),
+                        dict(request.headers),
+                        stat_result=os.stat(abs_path),
+                    )
+                    return response
+            return FileResponse(abs_path, headers={"Accept-Ranges": "bytes"})
 
         @app.get("/file/{path:path}", dependencies=[Depends(login_check)])
         async def file_deprecated(path: str, request: fastapi.Request):