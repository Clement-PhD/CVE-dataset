@@ -54,8 +54,12 @@ import logger from '../services/logger.js'
 import { EncryptedFile } from '../services/crypto.js'
 import { uploadFile } from '../services/uploadFile.js'
 import { lock, unlock } from '../services/lock.js'
-import FolderMetadata from '../services/metadata.js'
+import { getFileDropEntry, uploadFileDrop } from '../services/filedrop.js'
 
+/**
+ * @readonly
+ * @enum {string}
+ */
 const UploadStep = {
 	NONE: 'none',
 	ENCRYPTING: 'encrypting',
@@ -66,6 +70,14 @@ const UploadStep = {
 	DONE: 'done',
 }
 
+/**
+ * @typedef {object} UploadProgress
+ * @property {File} file
+ * @property {UploadStep} step
+ * @property {boolean} error
+ * @property {Object<string, import('../services/filedrop.js').EncryptedFileMetadata>} fileDrop
+ */
+
 export default {
 	name: 'FileDrop',
 	components: {
@@ -130,50 +142,47 @@ export default {
 				return
 			}
 
-			this.error = ''
 			this.loading = true
+			/** @type {UploadProgress[]} */
 			let progresses = []
-			let folderMetadata = null
 			let lockToken = null
 
 			try {
 				logger.debug('Locking the folder', { lockToken: this.lockToken, shareToken: this.shareToken })
 				lockToken = await lock(this.folderId, this.shareToken)
-
 			} catch (exception) {
 				logger.error('Could not lock the folder', { exception })
-				showError('Could not lock the folder')
+				showError(t('end_to_end_encryption', 'Could not lock the folder'))
 				this.loading = false
 				return
 			}
 
 			try {
-				logger.debug('Getting the folder metadata', { lockToken, shareToken: this.shareToken })
-				folderMetadata = new FolderMetadata(this.folderId)
-				await folderMetadata.retrieveMetadata(this.shareToken)
-
 				progresses = await Promise.all(
 					Array
 						.from(fileList)
-						.map((file) => this.uploadFile(file, folderMetadata))
+						.map((file) => this.uploadFile(file))
 				)
 			} catch (exception) {
 				logger.error('Error while uploading files', { exception })
-				showError('Error while uploading files')
+				showError(t('end_to_end_encryption', 'Error while uploading files'))
 				progresses.forEach(progress => { progress.error = true })
 			}
 
 			try {
-				if (folderMetadata !== null) {
-					logger.debug('Updating the folder metadata', { lockToken, shareToken: this.shareToken })
-					progresses
-						.filter(({ error }) => !error)
-						.forEach(progress => { progress.step = UploadStep.UPLOADING_METADATA })
-					await folderMetadata.uploadMetadata(lockToken, this.shareToken)
-				}
+				logger.debug('Updating the fileDrop entries', { lockToken, shareToken: this.shareToken })
+				progresses
+					.filter(({ error }) => !error)
+					.forEach(progress => { progress.step = UploadStep.UPLOADING_METADATA })
+
+				const fileDrops = progresses
+					.filter(({ error }) => !error)
+					.reduce((fileDropEntries, { fileDrop }) => ({ ...fileDropEntries, ...fileDrop }), {})
+
+				await uploadFileDrop(this.folderId, fileDrops, lockToken, this.shareToken)
 			} catch (exception) {
 				logger.error('Error while uploading metadata', { exception })
-				showError('Error while uploading metadata')
+				showError(t('end_to_end_encryption', 'Error while uploading metadata'))
 				progresses.forEach(progress => { progress.error = true })
 			}
 
@@ -188,7 +197,7 @@ export default {
 					.forEach(progress => { progress.step = UploadStep.DONE })
 			} catch (exception) {
 				logger.error('Error while unlocking the folder', { exception })
-				showError('Error while unlocking the folder')
+				showError(t('end_to_end_encryption', 'Error while unlocking the folder'))
 				progresses.forEach(progress => { progress.error = true })
 			}
 
@@ -197,10 +206,11 @@ export default {
 
 		/**
 		 * @param {File} unencryptedFile
-		 * @param {FolderMetadata} folderMetadata
+		 * @return {Promise<UploadProgress>}
 		 */
-		async uploadFile(unencryptedFile, folderMetadata) {
-			const progress = { file: unencryptedFile, step: UploadStep.NONE, error: false }
+		async uploadFile(unencryptedFile) {
+			/** @type {UploadProgress} */
+			const progress = { file: unencryptedFile, step: UploadStep.NONE, error: false, fileDrop: undefined }
 			this.uploadedFiles.push(progress)
 
 			try {
@@ -210,12 +220,12 @@ export default {
 				const blob = await unencryptedFile.arrayBuffer()
 				const { content, tag } = await file.encrypt(blob)
 
+				progress.fileDrop = await getFileDropEntry(file, tag, this.publicKey)
+
 				progress.step = UploadStep.UPLOADING
 				logger.debug('Uploading the file', { unencryptedFile, shareToken: this.shareToken })
 				await uploadFile('/public.php/webdav/', file.encryptedFileName, content, this.shareToken)
 				progress.step = UploadStep.UPLOADED
-
-				await folderMetadata.addFileDrop(file, tag, this.publicKey)
 			} catch (exception) {
 				progress.error = true
 				logger.error(`Fail to upload the file (${progress.step})`, { exception })