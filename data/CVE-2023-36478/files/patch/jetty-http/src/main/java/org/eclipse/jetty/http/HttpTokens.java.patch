@@ -231,5 +231,49 @@ else if (b >= 0x80) // OBS
             }
         }
     }
+
+    /**
+     * This is used when decoding to not decode illegal characters based on RFC9110.
+     * CR, LF, or NUL are replaced with ' ', all other control and multibyte characters
+     * are replaced with '?'. If this is given a legal character the same value will be returned.
+     * <pre>
+     * field-vchar = VCHAR / obs-text
+     * obs-text    = %x80-FF
+     * VCHAR       = %x21-7E
+     * </pre>
+     * @param c the character to test.
+     * @return the original character or the replacement character ' ' or '?',
+     * the return value is guaranteed to be a valid ISO-8859-1 character.
+     */
+    public static char sanitizeFieldVchar(char c)
+    {
+        switch (c)
+        {
+            // A recipient of CR, LF, or NUL within a field value MUST either reject the message
+            // or replace each of those characters with SP before further processing
+            case '\r':
+            case '\n':
+            case 0x00:
+                return ' ';
+
+            default:
+                if (isIllegalFieldVchar(c))
+                    return '?';
+        }
+        return c;
+    }
+
+    /**
+     * Checks whether this is an invalid VCHAR based on RFC9110.
+     * If this not a valid ISO-8859-1 character or a control character
+     * we say that it is illegal.
+     *
+     * @param c the character to test.
+     * @return true if this is invalid VCHAR.
+     */
+    public static boolean isIllegalFieldVchar(char c)
+    {
+        return (c >= 256 || c < ' ');
+    }
 }
 