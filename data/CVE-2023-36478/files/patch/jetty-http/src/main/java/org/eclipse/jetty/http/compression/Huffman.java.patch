@@ -11,14 +11,16 @@
 // ========================================================================
 //
 
-package org.eclipse.jetty.http2.hpack;
-
-import java.nio.ByteBuffer;
-
-import org.eclipse.jetty.util.Utf8StringBuilder;
+package org.eclipse.jetty.http.compression;
 
+/**
+ * This class contains the Huffman Codes defined in RFC7541.
+ */
 public class Huffman
 {
+    private Huffman()
+    {
+    }
 
     // Appendix C: Huffman Codes
     // http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#appendix-C
@@ -286,7 +288,7 @@ public class Huffman
     static final int[][] LCCODES = new int[CODES.length][];
     static final char EOS = 256;
 
-    // Huffman decode tree stored in a flattened char array for good 
+    // Huffman decode tree stored in a flattened char array for good
     // locality of reference.
     static final char[] tree;
     static final char[] rowsym;
@@ -302,9 +304,9 @@ public class Huffman
         }
 
         int r = 0;
-        for (int i = 0; i < CODES.length; i++)
+        for (int[] ints : CODES)
         {
-            r += (CODES[i][1] + 7) / 8;
+            r += (ints[1] + 7) / 8;
         }
         tree = new char[r * 256];
         rowsym = new char[r];
@@ -347,200 +349,4 @@ public class Huffman
             }
         }
     }
-
-    public static String decode(ByteBuffer buffer) throws HpackException.CompressionException
-    {
-        return decode(buffer, buffer.remaining());
-    }
-
-    public static String decode(ByteBuffer buffer, int length) throws HpackException.CompressionException
-    {
-        Utf8StringBuilder utf8 = new Utf8StringBuilder(length * 2);
-        int node = 0;
-        int current = 0;
-        int bits = 0;
-
-        for (int i = 0; i < length; i++)
-        {
-            int b = buffer.get() & 0xFF;
-            current = (current << 8) | b;
-            bits += 8;
-            while (bits >= 8)
-            {
-                int c = (current >>> (bits - 8)) & 0xFF;
-                node = tree[node * 256 + c];
-                if (rowbits[node] != 0)
-                {
-                    if (rowsym[node] == EOS)
-                        throw new HpackException.CompressionException("EOS in content");
-
-                    // terminal node
-                    utf8.append((byte)(0xFF & rowsym[node]));
-                    bits -= rowbits[node];
-                    node = 0;
-                }
-                else
-                {
-                    // non-terminal node
-                    bits -= 8;
-                }
-            }
-        }
-
-        while (bits > 0)
-        {
-            int c = (current << (8 - bits)) & 0xFF;
-            int lastNode = node;
-            node = tree[node * 256 + c];
-
-            if (rowbits[node] == 0 || rowbits[node] > bits)
-            {
-                int requiredPadding = 0;
-                for (int i = 0; i < bits; i++)
-                {
-                    requiredPadding = (requiredPadding << 1) | 1;
-                }
-
-                if ((c >> (8 - bits)) != requiredPadding)
-                    throw new HpackException.CompressionException("Incorrect padding");
-
-                node = lastNode;
-                break;
-            }
-
-            utf8.append((byte)(0xFF & rowsym[node]));
-            bits -= rowbits[node];
-            node = 0;
-        }
-
-        if (node != 0)
-            throw new HpackException.CompressionException("Bad termination");
-
-        return utf8.toString();
-    }
-
-    public static int octetsNeeded(String s)
-    {
-        return octetsNeeded(CODES, s);
-    }
-
-    public static int octetsNeeded(byte[] b)
-    {
-        return octetsNeeded(CODES, b);
-    }
-
-    public static void encode(ByteBuffer buffer, String s)
-    {
-        encode(CODES, buffer, s);
-    }
-
-    public static void encode(ByteBuffer buffer, byte[] b)
-    {
-        encode(CODES, buffer, b);
-    }
-
-    public static int octetsNeededLC(String s)
-    {
-        return octetsNeeded(LCCODES, s);
-    }
-
-    public static void encodeLC(ByteBuffer buffer, String s)
-    {
-        encode(LCCODES, buffer, s);
-    }
-
-    private static int octetsNeeded(final int[][] table, String s)
-    {
-        int needed = 0;
-        int len = s.length();
-        for (int i = 0; i < len; i++)
-        {
-            char c = s.charAt(i);
-            if (c >= 128 || c < ' ')
-                return -1;
-            needed += table[c][1];
-        }
-
-        return (needed + 7) / 8;
-    }
-
-    private static int octetsNeeded(final int[][] table, byte[] b)
-    {
-        int needed = 0;
-        int len = b.length;
-        for (int i = 0; i < len; i++)
-        {
-            int c = 0xFF & b[i];
-            needed += table[c][1];
-        }
-        return (needed + 7) / 8;
-    }
-
-    /**
-     * @param table The table to encode by
-     * @param buffer The buffer to encode to
-     * @param s The string to encode
-     */
-    private static void encode(final int[][] table, ByteBuffer buffer, String s)
-    {
-        long current = 0;
-        int n = 0;
-        int len = s.length();
-        for (int i = 0; i < len; i++)
-        {
-            char c = s.charAt(i);
-            if (c >= 128 || c < ' ')
-                throw new IllegalArgumentException();
-            int code = table[c][0];
-            int bits = table[c][1];
-
-            current <<= bits;
-            current |= code;
-            n += bits;
-
-            while (n >= 8)
-            {
-                n -= 8;
-                buffer.put((byte)(current >> n));
-            }
-        }
-
-        if (n > 0)
-        {
-            current <<= (8 - n);
-            current |= (0xFF >>> n);
-            buffer.put((byte)(current));
-        }
-    }
-
-    private static void encode(final int[][] table, ByteBuffer buffer, byte[] b)
-    {
-        long current = 0;
-        int n = 0;
-
-        int len = b.length;
-        for (int i = 0; i < len; i++)
-        {
-            int c = 0xFF & b[i];
-            int code = table[c][0];
-            int bits = table[c][1];
-
-            current <<= bits;
-            current |= code;
-            n += bits;
-
-            while (n >= 8)
-            {
-                n -= 8;
-                buffer.put((byte)(current >> n));
-            }
-        }
-
-        if (n > 0)
-        {
-            current <<= (8 - n);
-            current |= (0xFF >>> n);
-            buffer.put((byte)(current));
-        }
-    }
 }