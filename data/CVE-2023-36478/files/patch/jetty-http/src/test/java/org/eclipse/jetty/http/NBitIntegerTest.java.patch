@@ -11,12 +11,12 @@
 // ========================================================================
 //
 
-package org.eclipse.jetty.http3.qpack;
+package org.eclipse.jetty.http;
 
 import java.nio.ByteBuffer;
 
-import org.eclipse.jetty.http3.qpack.internal.util.NBitIntegerEncoder;
-import org.eclipse.jetty.http3.qpack.internal.util.NBitIntegerParser;
+import org.eclipse.jetty.http.compression.NBitIntegerDecoder;
+import org.eclipse.jetty.http.compression.NBitIntegerEncoder;
 import org.eclipse.jetty.util.BufferUtil;
 import org.eclipse.jetty.util.TypeUtil;
 import org.junit.jupiter.api.Test;
@@ -26,22 +26,22 @@
 @SuppressWarnings("PointlessArithmeticExpression")
 public class NBitIntegerTest
 {
-    private final NBitIntegerParser _parser = new NBitIntegerParser();
+    private final NBitIntegerDecoder _decoder = new NBitIntegerDecoder();
 
     @Test
     public void testOctetsNeeded()
     {
-        assertEquals(0, NBitIntegerEncoder.octectsNeeded(5, 10));
-        assertEquals(2, NBitIntegerEncoder.octectsNeeded(5, 1337));
-        assertEquals(1, NBitIntegerEncoder.octectsNeeded(8, 42));
-        assertEquals(3, NBitIntegerEncoder.octectsNeeded(8, 1337));
-
-        assertEquals(0, NBitIntegerEncoder.octectsNeeded(6, 62));
-        assertEquals(1, NBitIntegerEncoder.octectsNeeded(6, 63));
-        assertEquals(1, NBitIntegerEncoder.octectsNeeded(6, 64));
-        assertEquals(2, NBitIntegerEncoder.octectsNeeded(6, 63 + 0x00 + 0x80 * 0x01));
-        assertEquals(3, NBitIntegerEncoder.octectsNeeded(6, 63 + 0x00 + 0x80 * 0x80));
-        assertEquals(4, NBitIntegerEncoder.octectsNeeded(6, 63 + 0x00 + 0x80 * 0x80 * 0x80));
+        assertEquals(0, NBitIntegerEncoder.octetsNeeded(5, 10));
+        assertEquals(2, NBitIntegerEncoder.octetsNeeded(5, 1337));
+        assertEquals(1, NBitIntegerEncoder.octetsNeeded(8, 42));
+        assertEquals(3, NBitIntegerEncoder.octetsNeeded(8, 1337));
+
+        assertEquals(0, NBitIntegerEncoder.octetsNeeded(6, 62));
+        assertEquals(1, NBitIntegerEncoder.octetsNeeded(6, 63));
+        assertEquals(1, NBitIntegerEncoder.octetsNeeded(6, 64));
+        assertEquals(2, NBitIntegerEncoder.octetsNeeded(6, 63 + 0x00 + 0x80 * 0x01));
+        assertEquals(3, NBitIntegerEncoder.octetsNeeded(6, 63 + 0x00 + 0x80 * 0x80));
+        assertEquals(4, NBitIntegerEncoder.octetsNeeded(6, 63 + 0x00 + 0x80 * 0x80 * 0x80));
     }
 
     @Test
@@ -87,7 +87,7 @@ public void testEncode(int n, int i, String expected)
         String r = TypeUtil.toHexString(BufferUtil.toArray(buf));
         assertEquals(expected, r);
 
-        assertEquals(expected.length() / 2, (n < 8 ? 1 : 0) + NBitIntegerEncoder.octectsNeeded(n, i));
+        assertEquals(expected.length() / 2, (n < 8 ? 1 : 0) + NBitIntegerEncoder.octetsNeeded(n, i));
     }
 
     @Test
@@ -125,8 +125,8 @@ public void testDecode()
     public void testDecode(int n, int expected, String encoded)
     {
         ByteBuffer buf = ByteBuffer.wrap(TypeUtil.fromHexString(encoded));
-        _parser.setPrefix(n);
-        assertEquals(expected, _parser.decodeInt(buf));
+        _decoder.setPrefix(n);
+        assertEquals(expected, _decoder.decodeInt(buf));
     }
 
     @Test
@@ -149,8 +149,8 @@ public void testDecodeExampleD11()
     {
         ByteBuffer buf = ByteBuffer.wrap(TypeUtil.fromHexString("77EaFF"));
         buf.position(1);
-        _parser.setPrefix(5);
-        assertEquals(10, _parser.decodeInt(buf));
+        _decoder.setPrefix(5);
+        assertEquals(10, _decoder.decodeInt(buf));
     }
 
     @Test
@@ -173,8 +173,8 @@ public void testDecodeExampleD12()
     {
         ByteBuffer buf = ByteBuffer.wrap(TypeUtil.fromHexString("881f9a0aff"));
         buf.position(1);
-        _parser.setPrefix(5);
-        assertEquals(1337, _parser.decodeInt(buf));
+        _decoder.setPrefix(5);
+        assertEquals(1337, _decoder.decodeInt(buf));
     }
 
     @Test
@@ -197,7 +197,7 @@ public void testDecodeExampleD13()
     {
         ByteBuffer buf = ByteBuffer.wrap(TypeUtil.fromHexString("882aFf"));
         buf.position(1);
-        _parser.setPrefix(8);
-        assertEquals(42, _parser.decodeInt(buf));
+        _decoder.setPrefix(8);
+        assertEquals(42, _decoder.decodeInt(buf));
     }
 }