@@ -465,7 +465,7 @@ public void testHuffmanEncodedExtraPadding()
         String encoded = "82868441" + "84" + "49509FFF";
         ByteBuffer buffer = ByteBuffer.wrap(TypeUtil.fromHexString(encoded));
         CompressionException ex = assertThrows(CompressionException.class, () -> decoder.decode(buffer));
-        assertThat(ex.getMessage(), Matchers.containsString("Bad termination"));
+        assertThat(ex.getMessage(), Matchers.containsString("bad_termination"));
     }
 
     /* 5.2.2: Sends a Huffman-encoded string literal representation padded by zero */
@@ -478,7 +478,7 @@ public void testHuffmanEncodedZeroPadding()
         ByteBuffer buffer = ByteBuffer.wrap(TypeUtil.fromHexString(encoded));
 
         CompressionException ex = assertThrows(CompressionException.class, () -> decoder.decode(buffer));
-        assertThat(ex.getMessage(), Matchers.containsString("Incorrect padding"));
+        assertThat(ex.getMessage(), Matchers.containsString("incorrect_padding"));
     }
 
     /* 5.2.3: Sends a Huffman-encoded string literal representation containing the EOS symbol */
@@ -491,7 +491,7 @@ public void testHuffmanEncodedWithEOS()
         ByteBuffer buffer = ByteBuffer.wrap(TypeUtil.fromHexString(encoded));
 
         CompressionException ex = assertThrows(CompressionException.class, () -> decoder.decode(buffer));
-        assertThat(ex.getMessage(), Matchers.containsString("EOS in content"));
+        assertThat(ex.getMessage(), Matchers.containsString("eos_in_content"));
     }
 
     @Test
@@ -503,7 +503,7 @@ public void testHuffmanEncodedOneIncompleteOctet()
         ByteBuffer buffer = ByteBuffer.wrap(TypeUtil.fromHexString(encoded));
 
         CompressionException ex = assertThrows(CompressionException.class, () -> decoder.decode(buffer));
-        assertThat(ex.getMessage(), Matchers.containsString("Bad termination"));
+        assertThat(ex.getMessage(), Matchers.containsString("bad_termination"));
     }
 
     @Test
@@ -515,7 +515,7 @@ public void testHuffmanEncodedTwoIncompleteOctet()
         ByteBuffer buffer = ByteBuffer.wrap(TypeUtil.fromHexString(encoded));
 
         CompressionException ex = assertThrows(CompressionException.class, () -> decoder.decode(buffer));
-        assertThat(ex.getMessage(), Matchers.containsString("Bad termination"));
+        assertThat(ex.getMessage(), Matchers.containsString("bad_termination"));
     }
 
     @Test