@@ -45,19 +45,35 @@ describe('LinkValue', () => {
 describe('<KeyValuesTable>', () => {
   let wrapper;
 
-  const jsonkeyValue = { hello: 'world' };
+  const jsonValue = {
+    hello: 'world',
+    '<xss>': 'safe',
+    link: 'https://example.com',
+    xss_link: 'https://example.com with "quotes"',
+    boolean: true,
+    number: 42,
+    null: null,
+    array: ['x', 'y', 'z'],
+    object: { a: 'b', x: 'y' },
+  };
   const data = [
     { key: 'span.kind', value: 'client', expected: 'client' },
     { key: 'omg', value: 'mos-def', expected: 'mos-def' },
     { key: 'numericString', value: '12345678901234567890', expected: '12345678901234567890' },
     { key: 'numeric', value: 123456789, expected: '123456789' },
-    { key: 'jsonkey', value: JSON.stringify(jsonkeyValue), expected: JSON.stringify(jsonkeyValue, null, 4) },
     { key: 'http.request.header.accept', value: ['application/json'], expected: 'application/json' },
     {
       key: 'http.response.header.set_cookie',
       value: JSON.stringify(['name=mos-def', 'code=12345']),
       expected: 'name=mos-def, code=12345',
     },
+    // render().text() does not preserve full escaping of rendered JSON,
+    // so instead rely on jest snapshot comparison.
+    // Key observations:
+    // - "<xss>" key is encoded as &lt;xss&gt;
+    // - link value is rendered as <a>
+    // - xss_link value is rendered as plain string
+    { key: 'jsonkey', value: JSON.stringify(jsonValue), snapshot: true },
   ];
 
   beforeEach(() => {
@@ -77,6 +93,18 @@ describe('<KeyValuesTable>', () => {
     });
   });
 
+  it('renders the expected text for each span value', () => {
+    const el = wrapper.find('.ub-inline-block');
+    expect(el.length).toBe(data.length);
+    el.forEach((valueDiv, i) => {
+      if (data[i].expected) {
+        expect(valueDiv.render().text()).toBe(data[i].expected);
+      } else if (data[i].snapshot) {
+        expect(valueDiv).toMatchSnapshot();
+      }
+    });
+  });
+
   it('renders a single link correctly', () => {
     wrapper.setProps({
       linksGetter: (array, i) =>
@@ -128,14 +156,4 @@ describe('<KeyValuesTable>', () => {
       expect(copyIcon.prop('tooltipTitle')).toBe('Copy JSON');
     });
   });
-
-  it('renders the expected text for each span value', () => {
-    const el = wrapper.find('.ub-inline-block');
-    expect(el.length).toBe(data.length);
-    el.forEach((valueDiv, i) => {
-      if (data[i].expected) {
-        expect(valueDiv.render().text()).toBe(data[i].expected);
-      }
-    });
-  });
 });