@@ -2,9 +2,11 @@ import { EventEmitter, on } from 'events';
 import { getMessenger } from '../../messenger.js';
 import type { GraphQLService } from './index.js';
 import { getSchema } from '../../utils/get-schema.js';
-import { ItemsService } from '../items.js';
-import type { Query } from '@directus/types';
 import type { GraphQLResolveInfo, SelectionNode } from 'graphql';
+import { refreshAccountability } from '../../websocket/authenticate.js';
+import { getSinglePayload } from '../../websocket/utils/items.js';
+import type { Subscription } from '../../websocket/types.js';
+import type { WebSocketEvent } from '../../websocket/messages.js';
 
 const messages = createPubSub(new EventEmitter());
 
@@ -22,36 +24,61 @@ export function createSubscriptionGenerator(self: GraphQLService, event: string)
 		const args = parseArguments(request);
 
 		for await (const payload of messages.subscribe(event)) {
-			const eventData = payload as Record<string, any>;
+			const eventData = payload as WebSocketEvent;
 
 			if ('event' in args && eventData['action'] !== args['event']) {
 				continue; // skip filtered events
 			}
 
+			const accountability = await refreshAccountability(self.accountability);
 			const schema = await getSchema();
 
-			if (eventData['action'] === 'create') {
-				const { collection, key } = eventData;
-				const service = new ItemsService(collection, { schema });
-				const data = await service.readOne(key, { fields } as Query);
-				yield { [event]: { key, data, event: 'create' } };
-			}
+			const subscription: Omit<Subscription, 'client'> = {
+				collection: eventData['collection'],
+				event: eventData['action'],
+				query: { fields },
+			};
 
-			if (eventData['action'] === 'update') {
-				const { collection, keys } = eventData;
-				const service = new ItemsService(collection, { schema });
-
-				for (const key of keys) {
-					const data = await service.readOne(key, { fields } as Query);
-					yield { [event]: { key, data, event: 'update' } };
+			if (eventData['action'] === 'delete') {
+				// we have no data to send besides the key
+				for (const key of eventData.keys) {
+					yield { [event]: { key, data: null, event: eventData['action'] } };
 				}
 			}
 
-			if (eventData['action'] === 'delete') {
-				const { keys } = eventData;
+			if (eventData['action'] === 'create') {
+				try {
+					subscription.item = eventData['key'];
+					const result = await getSinglePayload(subscription, accountability, schema, eventData);
+
+					yield {
+						[event]: {
+							key: eventData['key'],
+							data: result['data'],
+							event: eventData['action'],
+						},
+					};
+				} catch {
+					// dont notify the subscription of permission errors
+				}
+			}
 
-				for (const key of keys) {
-					yield { [event]: { key, data: null, event: 'delete' } };
+			if (eventData['action'] === 'update') {
+				for (const key of eventData['keys']) {
+					try {
+						subscription.item = key;
+						const result = await getSinglePayload(subscription, accountability, schema, eventData);
+
+						yield {
+							[event]: {
+								key,
+								data: result['data'],
+								event: eventData['action'],
+							},
+						};
+					} catch {
+						// dont notify the subscription of permission errors
+					}
 				}
 			}
 		}