@@ -1,18 +1,16 @@
-import type { Accountability, SchemaOverview } from '@directus/types';
 import emitter from '../../emitter.js';
 import { InvalidPayloadError } from '../../errors/index.js';
 import type { Messenger } from '../../messenger.js';
 import { getMessenger } from '../../messenger.js';
-import { CollectionsService, FieldsService, MetaService } from '../../services/index.js';
 import { getSchema } from '../../utils/get-schema.js';
-import { getService } from '../../utils/get-service.js';
 import { sanitizeQuery } from '../../utils/sanitize-query.js';
 import { refreshAccountability } from '../authenticate.js';
 import { WebSocketError, handleWebSocketError } from '../errors.js';
 import type { WebSocketEvent } from '../messages.js';
 import { WebSocketSubscribeMessage } from '../messages.js';
 import type { Subscription, SubscriptionEvent, WebSocketClient } from '../types.js';
 import { fmtMessage, getMessageType } from '../utils/message.js';
+import { getMultiPayload, getSinglePayload } from '../utils/items.js';
 
 /**
  * Handler responsible for subscriptions
@@ -125,8 +123,8 @@ export class SubscribeHandler {
 
 				const result =
 					'item' in subscription
-						? await this.getSinglePayload(subscription, client.accountability, schema, event)
-						: await this.getMultiPayload(subscription, client.accountability, schema, event);
+						? await getSinglePayload(subscription, client.accountability, schema, event)
+						: await getMultiPayload(subscription, client.accountability, schema, event);
 
 				if (Array.isArray(result?.['data']) && result?.['data']?.length === 0) return;
 
@@ -182,8 +180,8 @@ export class SubscribeHandler {
 				if (subscription.event === undefined) {
 					data =
 						'item' in subscription
-							? await this.getSinglePayload(subscription, accountability, schema)
-							: await this.getMultiPayload(subscription, accountability, schema);
+							? await getSinglePayload(subscription, accountability, schema)
+							: await getMultiPayload(subscription, accountability, schema);
 				} else {
 					data = { event: 'init' };
 				}
@@ -209,125 +207,6 @@ export class SubscribeHandler {
 		}
 	}
 
-	private async getSinglePayload(
-		subscription: Subscription,
-		accountability: Accountability | null,
-		schema: SchemaOverview,
-		event?: WebSocketEvent
-	): Promise<Record<string, any>> {
-		const metaService = new MetaService({ schema, accountability });
-		const query = subscription.query ?? {};
-		const id = subscription.item!;
-
-		const result: Record<string, any> = {
-			event: event?.action ?? 'init',
-		};
-
-		if (subscription.collection === 'directus_collections') {
-			const service = new CollectionsService({ schema, accountability });
-			result['data'] = await service.readOne(String(id));
-		} else {
-			const service = getService(subscription.collection, { schema, accountability });
-			result['data'] = await service.readOne(id, query);
-		}
-
-		if ('meta' in query) {
-			result['meta'] = await metaService.getMetaForQuery(subscription.collection, query);
-		}
-
-		return result;
-	}
-
-	private async getMultiPayload(
-		subscription: Subscription,
-		accountability: Accountability | null,
-		schema: SchemaOverview,
-		event?: WebSocketEvent
-	): Promise<Record<string, any>> {
-		const metaService = new MetaService({ schema, accountability });
-
-		const result: Record<string, any> = {
-			event: event?.action ?? 'init',
-		};
-
-		switch (subscription.collection) {
-			case 'directus_collections':
-				result['data'] = await this.getCollectionPayload(accountability, schema, event);
-				break;
-			case 'directus_fields':
-				result['data'] = await this.getFieldsPayload(accountability, schema, event);
-				break;
-			case 'directus_relations':
-				result['data'] = event?.payload;
-				break;
-			default:
-				result['data'] = await this.getItemsPayload(subscription, accountability, schema, event);
-				break;
-		}
-
-		const query = subscription.query ?? {};
-
-		if ('meta' in query) {
-			result['meta'] = await metaService.getMetaForQuery(subscription.collection, query);
-		}
-
-		return result;
-	}
-
-	private async getCollectionPayload(
-		accountability: Accountability | null,
-		schema: SchemaOverview,
-		event?: WebSocketEvent
-	) {
-		const service = new CollectionsService({ schema, accountability });
-
-		if (!event?.action) {
-			return await service.readByQuery();
-		} else if (event.action === 'create') {
-			return await service.readMany([String(event.key)]);
-		} else if (event.action === 'delete') {
-			return event.keys;
-		} else {
-			return await service.readMany(event.keys.map((key: any) => String(key)));
-		}
-	}
-
-	private async getFieldsPayload(
-		accountability: Accountability | null,
-		schema: SchemaOverview,
-		event?: WebSocketEvent
-	) {
-		const service = new FieldsService({ schema, accountability });
-
-		if (!event?.action) {
-			return await service.readAll();
-		} else if (event.action === 'delete') {
-			return event.keys;
-		} else {
-			return await service.readOne(event.payload?.['collection'], event.payload?.['field']);
-		}
-	}
-
-	private async getItemsPayload(
-		subscription: Subscription,
-		accountability: Accountability | null,
-		schema: SchemaOverview,
-		event?: WebSocketEvent
-	) {
-		const query = subscription.query ?? {};
-		const service = getService(subscription.collection, { schema, accountability });
-
-		if (!event?.action) {
-			return await service.readByQuery(query);
-		} else if (event.action === 'create') {
-			return await service.readMany([event.key], query);
-		} else if (event.action === 'delete') {
-			return event.keys;
-		} else {
-			return await service.readMany(event.keys, query);
-		}
-	}
-
 	private getSubscription(client: WebSocketClient, uid: string | number) {
 		for (const userSubscriptions of Object.values(this.subscriptions)) {
 			for (const subscription of userSubscriptions) {