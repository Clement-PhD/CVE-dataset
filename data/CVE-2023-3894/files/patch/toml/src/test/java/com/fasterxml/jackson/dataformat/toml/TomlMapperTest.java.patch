@@ -19,7 +19,7 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
-public class TomlMapperTest {
+public class TomlMapperTest extends TomlMapperTestBase {
     @SuppressWarnings("deprecation")
     @Rule
     public final ExpectedException expectedException = ExpectedException.none();
@@ -37,22 +37,22 @@ public class TomlMapperTest {
 
     @Test
     public void string() throws JsonProcessingException {
-        Assert.assertEquals(TEST_OBJECT, new TomlMapper().readValue(TEST_STRING, TestClass.class));
+        Assert.assertEquals(TEST_OBJECT, newTomlMapper().readValue(TEST_STRING, TestClass.class));
     }
 
     @Test
     public void bytes() throws IOException {
-        Assert.assertEquals(TEST_OBJECT, new TomlMapper().readValue(TEST_STRING.getBytes(StandardCharsets.UTF_8), TestClass.class));
+        Assert.assertEquals(TEST_OBJECT, newTomlMapper().readValue(TEST_STRING.getBytes(StandardCharsets.UTF_8), TestClass.class));
     }
 
     @Test
     public void stream() throws IOException {
-        Assert.assertEquals(TEST_OBJECT, new TomlMapper().readValue(new ByteArrayInputStream(TEST_STRING.getBytes(StandardCharsets.UTF_8)), TestClass.class));
+        Assert.assertEquals(TEST_OBJECT, newTomlMapper().readValue(new ByteArrayInputStream(TEST_STRING.getBytes(StandardCharsets.UTF_8)), TestClass.class));
     }
 
     @Test
     public void reader() throws IOException {
-        Assert.assertEquals(TEST_OBJECT, new TomlMapper().readValue(new StringReader(TEST_STRING), TestClass.class));
+        Assert.assertEquals(TEST_OBJECT, newTomlMapper().readValue(new StringReader(TEST_STRING), TestClass.class));
     }
 
     public static class TestClass {
@@ -108,7 +108,7 @@ public void bigDecimal() throws JsonProcessingException {
         Assert.assertEquals(
                 JsonNodeFactory.instance.objectNode()
                         .put("abc", testValue),
-                new TomlMapper().readTree("abc = " + testValue.toString())
+                newTomlMapper().readTree("abc = " + testValue.toString())
         );
     }
 
@@ -121,7 +121,7 @@ public void veryBigDecimal() throws JsonProcessingException {
         }
         final String value = sb.toString();
         try {
-            new TomlMapper().readTree("abc = " + value);
+            newTomlMapper().readTree("abc = " + value);
             Assert.fail("expected TomlStreamReadException");
         } catch (TomlStreamReadException e) {
             Assert.assertTrue("unexpected message: " + e.getMessage(),
@@ -141,7 +141,7 @@ public void veryBigDecimalWithNumLenUnlimited() throws JsonProcessingException {
         TomlFactory factory = TomlFactory.builder()
                 .streamReadConstraints(StreamReadConstraints.builder().maxNumberLength(Integer.MAX_VALUE).build())
                 .build();
-        TomlMapper mapper = new TomlMapper(factory);
+        TomlMapper mapper = newTomlMapper(factory);
         Assert.assertEquals(
                 testValue,
                 mapper.readTree("abc = " + value).get("abc").decimalValue()
@@ -159,7 +159,7 @@ public void temporalFieldFlag() throws JsonProcessingException {
         );
         Assert.assertEquals(
                 "2021-03-26",
-                new TomlMapper().readValue("foo = 2021-03-26", ObjectField.class).foo
+                newTomlMapper().readValue("foo = 2021-03-26", ObjectField.class).foo
         );
     }
 