@@ -27,21 +27,29 @@
 
 use OCA\UserOIDC\Db\Provider;
 use OCP\Http\Client\IClientService;
+use OCP\Security\ICrypto;
 use Psr\Log\LoggerInterface;
 use Throwable;
 
 class OIDCService {
 
 	/** @var LoggerInterface */
 	private $logger;
-
 	/** @var IClientService */
 	private $clientService;
+	/** @var ICrypto */
+	private $crypto;
 
-	public function __construct(DiscoveryService $discoveryService, LoggerInterface $logger, IClientService $clientService) {
+	public function __construct(
+		DiscoveryService $discoveryService,
+		LoggerInterface $logger,
+		IClientService $clientService,
+		ICrypto $crypto
+	) {
 		$this->discoveryService = $discoveryService;
 		$this->logger = $logger;
 		$this->clientService = $clientService;
+		$this->crypto = $crypto;
 	}
 
 	public function userinfo(Provider $provider, string $accessToken): array {
@@ -65,6 +73,12 @@ public function userinfo(Provider $provider, string $accessToken): array {
 	}
 
 	public function introspection(Provider $provider, string $accessToken): array {
+		try {
+			$providerClientSecret = $this->crypto->decrypt($provider->getClientSecret());
+		} catch (\Exception $e) {
+			$this->logger->error('Failed to decrypt the client secret', ['exception' => $e]);
+			return [];
+		}
 		$url = $this->discoveryService->obtainDiscovery($provider)['introspection_endpoint'] ?? null;
 		if ($url === null) {
 			return [];
@@ -74,7 +88,7 @@ public function introspection(Provider $provider, string $accessToken): array {
 		$this->logger->debug('Fetching user info endpoint');
 		$options = [
 			'headers' => [
-				'Authorization' => base64_encode($provider->getClientId() . ':' . $provider->getClientSecret()),
+				'Authorization' => base64_encode($provider->getClientId() . ':' . $providerClientSecret),
 			],
 			'body' => [
 				'token' => $accessToken,