@@ -220,6 +220,8 @@ def paginated_list(
             The url of the list endpoint
         headers: dict
             The headers to use for the request
+        kwargs: dict
+            Additional arguments to pass to the request
 
         Returns
         -------
@@ -229,13 +231,16 @@ def paginated_list(
         result = self.app.get(url, headers=headers)
         links = result.json.get('links')
         page = 1
-        json_data = result.json['data']
+        json_data = result.json.get('data')
+        if json_data is None:
+            json_data = []
         while links and links.get('next'):
             page += 1
             new_response = self.app.get(
                 links.get('next'), headers=headers
             )
-            json_data += new_response.json.get('data')
+            json_data += new_response.json.get('data') \
+                if new_response.json.get('data') else []
             links = new_response.json.get('links')
         return result, json_data
 
@@ -411,17 +416,13 @@ def test_run_without_id(self):
         result1 = self.app.get("/api/run", headers=headers)
         self.assertEqual(result1.status_code, 200)
 
-        result2 = self.app.get("/api/run?state=open&&node_id=1",
+        result2 = self.app.get("/api/run?state=open",
                                headers=headers)
         self.assertEqual(result2.status_code, 200)
 
         result3 = self.app.get("/api/run?task_id=1", headers=headers)
         self.assertEqual(result3.status_code, 200)
 
-        result4 = self.app.get("/api/run?task_id=1&&node_id=1",
-                               headers=headers)
-        self.assertEqual(result4.status_code, 200)
-
     def test_stats(self):
         headers = self.login("root")
         result = self.app.get("/api/run", headers=headers)
@@ -620,6 +621,100 @@ def test_view_roles(self):
         for field in expected_fields:
             self.assertIn(field, body[0])
 
+    def test_view_role_permissions(self):
+        org = Organization()
+        org.save()
+        other_org = Organization()
+        other_org.save()
+        col = Collaboration(organizations=[org, other_org])
+        col.save()
+        org_outside_collab = Organization()
+        org_outside_collab.save()
+
+        # non-existing role
+        headers = self.login('root')
+        result = self.app.get("/api/role/9999", headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.NOT_FOUND)
+
+        # root user can view all roles
+        result, json_data = self.paginated_list('/api/role', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+        self.assertEqual(len(json_data), len(Role.get()))
+
+        role = Role(organization=org)
+        role.save()
+
+        # without permissions should allow you to view your own roles, which
+        # in this case is an empty list
+        headers = self.create_user_and_login()
+        result, json_data = self.paginated_list('/api/role', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+        self.assertEqual(len(json_data), 0)
+
+        # view roles of your organization
+        rule = Rule.get_by_("role", Scope.ORGANIZATION, Operation.VIEW)
+        headers = self.create_user_and_login(org, rules=[rule])
+        result, json_data = self.paginated_list('/api/role', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # +3 for the root, container and node roles (other default roles are
+        # not generated for unit tests)
+        self.assertEqual(len(json_data), len(org.roles) + 3)
+
+        # view a single role of your organization
+        result = self.app.get(f'/api/role/{role.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # check that user of other organization cannot view roles with
+        # organization scope
+        headers = self.create_user_and_login(other_org, rules=[rule])
+        result = self.app.get(
+            '/api/role', headers=headers,
+            query_string={'organization_id': org.id}
+        )
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # user can view their own roles. This should always be possible
+        user = self.create_user(rules=[])
+        headers = self.login(user.username)
+        result = self.app.get('/api/role', headers=headers, query_string={
+            'user_id': user.id
+        })
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # collaboration permission - in same collaboration with id
+        rule = Rule.get_by_("role", Scope.COLLABORATION, Operation.VIEW)
+        headers = self.create_user_and_login(other_org, rules=[rule])
+        result = self.app.get(f"/api/role/{role.id}", headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # collaboration permission - in same collaboration without id
+        result, json_data = self.paginated_list('/api/role', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+        # +3 for the root, container and node roles (other default roles are
+        # not generated for unit tests)
+        self.assertEqual(len(json_data), len([
+            role_ for org in col.organizations for role_ in org.roles
+        ]) + 3)
+
+        # collaboration permission - in different collaboration with id
+        headers = self.create_user_and_login(org_outside_collab, rules=[rule])
+        result = self.app.get(f"/api/role/{role.id}", headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # collaboration permission - in different collaboration without id
+        result = self.app.get('/api/role', headers=headers,
+                              query_string={'collaboration_id': col.id})
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # cleanup
+        org.delete()
+        other_org.delete()
+        org_outside_collab.delete()
+        col.delete()
+        role.delete()
+        user.delete()
+
     def test_create_role_as_root(self):
         headers = self.login("root")
 
@@ -685,12 +780,11 @@ def test_create_role_permissions(self):
 
         body = {
             "name": "some-role-name",
-            "description": "Testing if we can create a rol for another org",
+            "description": "Testing if we can create a role for another org",
             "rules": [rule.id for rule in all_rules],
         }
         result = self.app.post("/api/role", headers=headers, json=body)
         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
-
         # check that user with a missing rule cannot create a role with that
         # missing rule
         headers = self.create_user_and_login(rules=(all_rules[:-2]))
@@ -719,6 +813,28 @@ def test_create_role_permissions(self):
         result = self.app.post("/api/role", headers=headers, json=body)
         self.assertEqual(result.status_code, HTTPStatus.NOT_FOUND)
 
+        # check creating role inside the collaboration
+        org1 = Organization()
+        org1.save()
+        org2 = Organization()
+        org2.save()
+        col = Collaboration(organizations=[org1, org2])
+        col.save()
+        rule = Rule.get_by_("role", scope=Scope.COLLABORATION,
+                            operation=Operation.CREATE)
+        headers = self.create_user_and_login(organization=org1, rules=[rule])
+        body["rules"] = [rule.id]
+        body["organization_id"] = org2.id
+        result = self.app.post("/api/role", headers=headers, json=body)
+        self.assertEqual(result.status_code, HTTPStatus.CREATED)
+
+        # check creating role outside the collaboration fails
+        org3 = Organization()
+        org3.save()
+        body["organization_id"] = org3.id
+        result = self.app.post("/api/role", headers=headers, json=body)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
     def test_edit_role(self):
         headers = self.login('root')
 
@@ -773,6 +889,29 @@ def test_edit_role(self):
         })
         self.assertEqual(result.status_code, HTTPStatus.OK)
 
+        # test editing role inside the collaboration
+        org2 = Organization()
+        org2.save()
+        col = Collaboration(organizations=[org, org2])
+        col.save()
+        rule = Rule.get_by_("role", scope=Scope.COLLABORATION,
+                            operation=Operation.EDIT)
+        headers = self.create_user_and_login(organization=org2, rules=[rule])
+        result = self.app.patch(f"/api/role/{role.id}", headers=headers, json={
+            "name": "new-role-name",
+        })
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # check editing role outside the collaboration fails
+        org3 = Organization()
+        org3.save()
+        role = Role(name="some-role-name", organization=org3)
+        role.save()
+        result = self.app.patch(f"/api/role/{role.id}", headers=headers, json={
+            "name": "this-will-not-be-updated"
+        })
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
     def test_remove_role(self):
 
         org = Organization()
@@ -805,6 +944,32 @@ def test_remove_role(self):
         result = self.app.delete(f'/api/role/{role.id}', headers=headers)
         self.assertEqual(result.status_code, HTTPStatus.OK)
 
+        # check removing role outside the collaboration fails
+        org2 = Organization()
+        org2.save()
+        col = Collaboration(organizations=[org, org2])
+        col.save()
+        role = Role(organization=org)  # because we removed it...
+        role.save()
+
+        org3 = Organization()
+        org3.save()
+        rule = Rule.get_by_("role", Scope.COLLABORATION, Operation.DELETE)
+        headers = self.create_user_and_login(organization=org3, rules=[rule])
+        result = self.app.delete(f"/api/role/{role.id}", headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # test removing role inside the collaboration
+        headers = self.create_user_and_login(organization=org2, rules=[rule])
+        result = self.app.delete(f"/api/role/{role.id}", headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # cleanup
+        org3.delete()
+        org2.delete()
+        org.delete()
+        col.delete()
+
     def test_rules_from_role(self):
         headers = self.login('root')
         role = Role.get()[0]
@@ -881,7 +1046,9 @@ def test_remove_single_rule_from_role(self):
     def test_view_permission_rules(self):
         rule = Rule.get_by_("role", Scope.ORGANIZATION, Operation.VIEW)
 
-        role = Role(name="some-role", organization=Organization())
+        org = Organization()
+        org.save()
+        role = Role(name="some-role", organization=org)
         role.save()
 
         # user does not belong to organization
@@ -901,11 +1068,14 @@ def test_view_permission_rules(self):
         result = self.app.get(f'/api/role/{role.id}/rule', headers=headers)
         self.assertEqual(result.status_code, HTTPStatus.OK)
 
+        # cleanup
         role.delete()
+        org.delete()
 
     def test_add_rule_to_role_permission(self):
-
-        role = Role(name="new-role", organization=Organization())
+        org = Organization()
+        org.save()
+        role = Role(name="new-role", organization=org)
         role.save()
 
         rule = Rule.get_by_("role", Scope.ORGANIZATION, Operation.EDIT)
@@ -935,14 +1105,42 @@ def test_add_rule_to_role_permission(self):
                                headers=headers)
         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
 
+        # test inside the collaboration
+        org2 = Organization()
+        org2.save()
+        col = Collaboration(organizations=[org, org2])
+        col.save()
+        rule = Rule.get_by_("role", scope=Scope.COLLABORATION,
+                            operation=Operation.EDIT)
+        headers = self.create_user_and_login(organization=org2, rules=[rule])
+        result = self.app.post(f'/api/role/{role.id}/rule/{rule.id}',
+                               headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.CREATED)
+
+        # check outside the collaboration fails
+        org3 = Organization()
+        org3.save()
+        role2 = Role(name="some-role-name", organization=org3)
+        role2.save()
+        result = self.app.post(f'/api/role/{role2.id}/rule/{rule.id}',
+                               headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # cleanup
         role.delete()
+        role2.delete()
+        org.delete()
+        org2.delete()
+        org3.delete()
+        col.delete()
 
     def test_remove_rule_from_role_permissions(self):
-
-        role = Role(name="new-role", organization=Organization())
+        org = Organization()
+        org.save()
+        role = Role(name="new-role", organization=org)
         role.save()
         rule = Rule.get_by_("role", Scope.ORGANIZATION,
-                            Operation.DELETE)
+                            Operation.EDIT)
 
         # try removing without any permissions
         headers = self.create_user_and_login()
@@ -958,8 +1156,7 @@ def test_remove_rule_from_role_permissions(self):
         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
 
         # try removing rule which is not in the role
-        headers = self.create_user_and_login(organization=role.organization,
-                                             rules=[rule])
+        headers = self.create_user_and_login(organization=org, rules=[rule])
         result = self.app.delete(f'/api/role/{role.id}/rule/{rule.id}',
                                  headers=headers)
         self.assertEqual(result.status_code, HTTPStatus.NOT_FOUND)
@@ -979,13 +1176,43 @@ def test_remove_rule_from_role_permissions(self):
 
         # power users can edit other organization rules
         power_rule = Rule.get_by_("role", Scope.GLOBAL,
-                                  Operation.DELETE)
+                                  Operation.EDIT)
         headers = self.create_user_and_login(rules=[power_rule, rule])
         result = self.app.delete(f'/api/role/{role.id}/rule/{rule.id}',
                                  headers=headers)
         self.assertEqual(result.status_code, HTTPStatus.OK)
 
+        # test inside the collaboration
+        org2 = Organization()
+        org2.save()
+        col = Collaboration(organizations=[org, org2])
+        col.save()
+        rule = Rule.get_by_("role", scope=Scope.COLLABORATION,
+                            operation=Operation.EDIT)
+        role.rules.append(rule)
+        role.save()
+        headers = self.create_user_and_login(organization=org2, rules=[rule])
+        result = self.app.delete(f'/api/role/{role.id}/rule/{rule.id}',
+                                 headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # check outside the collaboration fails
+        org3 = Organization()
+        org3.save()
+        role2 = Role(name="some-role-name", organization=org3)
+        role2.rules.append(rule)
+        role2.save()
+        result = self.app.delete(f'/api/role/{role2.id}/rule/{rule.id}',
+                                 headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # cleanup
         role.delete()
+        role2.delete()
+        org.delete()
+        org2.delete()
+        org3.delete()
+        col.delete()
 
     def test_view_permission_user(self):
 
@@ -1007,7 +1234,8 @@ def test_view_permission_user(self):
 
         # view users of your organization
         rule = Rule.get_by_("user", Scope.ORGANIZATION, Operation.VIEW)
-        org = Organization.get(1)
+        org = Organization()
+        org.save()
         headers = self.create_user_and_login(org, rules=[rule])
         result, json_data = self.paginated_list('/api/user', headers=headers)
         self.assertEqual(result.status_code, HTTPStatus.OK)
@@ -1024,6 +1252,48 @@ def test_view_permission_user(self):
         result = self.app.get(f'/api/user/{user.id}', headers=headers)
         self.assertEqual(result.status_code, HTTPStatus.OK)
 
+        # collaboration permission - view single user
+        org2 = Organization()
+        org2.save()
+        org3 = Organization()
+        org3.save()
+        col = Collaboration(organizations=[org2, org3])
+        col.save()
+        user = self.create_user(organization=org2, rules=[])
+        rule = Rule.get_by_("user", scope=Scope.COLLABORATION,
+                            operation=Operation.VIEW)
+        headers = self.create_user_and_login(organization=org3, rules=[rule])
+        result = self.app.get(f'/api/user/{user.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # collaboration permission - view list of users
+        result = self.app.get('/api/user', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+        # expecting 2 users: 1 in org2 and the 1 in org3 which is logged in now
+        self.assertEqual(len(result.json['data']), 2)
+
+        # collaboration permission - viewing outside collaboration should fail
+        org_outside_col = Organization()
+        org_outside_col.save()
+        headers = self.create_user_and_login(organization=org_outside_col,
+                                             rules=[rule])
+        result = self.app.get(f'/api/user/{user.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # collaboration permission - viewing other collaborations should fail
+        result = self.app.get('/api/user', headers=headers, query_string={
+            'collaboration_id': col.id
+        })
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # cleanup
+        org.delete()
+        org2.delete()
+        org3.delete()
+        org_outside_col.delete()
+        col.delete()
+        user.delete()
+
     def test_bounce_existing_username_and_email(self):
         headers = self.create_user_and_login()
         User(username="something", email="mail@me.org").save()
@@ -1073,7 +1343,31 @@ def test_new_permission_user(self):
         result = self.app.post('/api/user', headers=headers, json=userdata)
         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
 
-        # you can only assign roles in which you have all rules
+        # test inside the collaboration
+        org2 = Organization()
+        org2.save()
+        col = Collaboration(organizations=[org, org2])
+        col.save()
+        rule = Rule.get_by_("user", scope=Scope.COLLABORATION,
+                            operation=Operation.CREATE)
+        headers = self.create_user_and_login(organization=org, rules=[rule])
+        userdata['username'] = 'smarty4'
+        userdata['email'] = 'mail4@me.org'
+        userdata['organization_id'] = org2.id
+        userdata['rules'] = [rule.id]
+        result = self.app.post('/api/user', headers=headers, json=userdata)
+        self.assertEqual(result.status_code, HTTPStatus.CREATED)
+
+        # check outside the collaboration fails
+        org3 = Organization()
+        org3.save()
+        userdata['username'] = 'smarty5'
+        userdata['email'] = 'mail5@me.org'
+        userdata['organization_id'] = org3.id
+        result = self.app.post('/api/user', headers=headers, json=userdata)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # you can only create users for in which you have all rules
         rule_view_roles = Rule.get_by_(
             "role", Scope.ORGANIZATION, Operation.VIEW)
         headers = self.create_user_and_login(
@@ -1092,6 +1386,13 @@ def test_new_permission_user(self):
                               query_string={'user_id': result.json['id']})
         self.assertEqual(len(result.json['data']), 1)
 
+        # cleanup
+        org.delete()
+        org2.delete()
+        org3.delete()
+        col.delete()
+        role.delete()
+
     def test_patch_user_permissions(self):
 
         org = Organization()
@@ -1174,6 +1475,29 @@ def test_patch_user_permissions(self):
         self.assertEqual("again", user.firstname)
         self.assertEqual("and again", user.lastname)
 
+        # test editing user inside the collaboration
+        org2 = Organization()
+        org2.save()
+        col = Collaboration(organizations=[org, org2])
+        col.save()
+        rule2 = Rule.get_by_("user", scope=Scope.COLLABORATION,
+                             operation=Operation.EDIT)
+        headers = self.create_user_and_login(organization=org2, rules=[rule2])
+        result = self.app.patch(f'/api/user/{user.id}', headers=headers, json={
+            'firstname': 'something',
+            'lastname': 'everything',
+        })
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # check editing outside the collaboration fails
+        org3 = Organization()
+        org3.save()
+        headers = self.create_user_and_login(organization=org3, rules=[rule2])
+        result = self.app.patch(f'/api/user/{user.id}', headers=headers, json={
+            'firstname': 'will-not-work',
+        })
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
         # test that you cannot assign rules that you not own
         not_owning_rule = Rule.get_by_("user", Scope.OWN,
                                        Operation.DELETE)
@@ -1270,12 +1594,16 @@ def test_patch_user_permissions(self):
 
         user.delete()
         role.delete()
+        org.delete()
+        org2.delete()
+        org3.delete()
+        col.delete()
 
     def test_delete_user_permissions(self):
-
+        org = Organization()
         user = User(firstname="Firstname", lastname="Lastname",
                     username="Username", password="Password", email="a@b.c",
-                    organization=Organization())
+                    organization=org)
         user.save()
         self.credentials[user.username] = {'username': user.username,
                                            'password': "Password"}
@@ -1338,6 +1666,34 @@ def test_delete_user_permissions(self):
         self.assertEqual(result.status_code, HTTPStatus.OK)
         # user is deleted by endpoint! user.delete()
 
+        # check delete outside the collaboration fails
+        user = User(firstname="Firstname", lastname="Lastname",
+                    username="Username", password="Password", email="a@b.c",
+                    organization=org)
+        user.save()
+        org2 = Organization()
+        org2.save()
+        col = Collaboration(organizations=[org, org2])
+        col.save()
+        org3 = Organization()
+        org3.save()
+        rule = Rule.get_by_("user", Scope.COLLABORATION,
+                            Operation.DELETE)
+        headers = self.create_user_and_login(organization=org3, rules=[rule])
+        result = self.app.delete(f'/api/user/{user.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # test delete inside the collaboration
+        headers = self.create_user_and_login(organization=org2, rules=[rule])
+        result = self.app.delete(f'/api/user/{user.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # cleanup
+        org.delete()
+        org2.delete()
+        org3.delete()
+        col.delete()
+
     def test_view_organization_as_user_permissions(self):
 
         # view without any permissions
@@ -1362,18 +1718,40 @@ def test_view_organization_as_user_permissions(self):
         self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
 
         # Missing organization with global view
-        rule = Rule.get_by_("organization", Scope.GLOBAL,
-                            Operation.VIEW)
+        rule = Rule.get_by_("organization", Scope.GLOBAL, Operation.VIEW)
         headers = self.create_user_and_login(rules=[rule])
         result = self.app.get('/api/organization/9999',
                               headers=headers)
         self.assertEqual(result.status_code, HTTPStatus.NOT_FOUND)
 
         # test global view
-        result = self.app.get(f'/api/organization/{org.id}',
-                              headers=headers)
+        result = self.app.get(f'/api/organization/{org.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # test view inside the collaboration
+        org2 = Organization()
+        org2.save()
+        col = Collaboration(organizations=[org, org2])
+        col.save()
+        rule = Rule.get_by_("organization", scope=Scope.COLLABORATION,
+                            operation=Operation.VIEW)
+        headers = self.create_user_and_login(organization=org2, rules=[rule])
+        result = self.app.get(f'/api/organization/{org.id}', headers=headers)
         self.assertEqual(result.status_code, HTTPStatus.OK)
 
+        # check view outside the collaboration fails
+        org3 = Organization()
+        org3.save()
+        headers = self.create_user_and_login(organization=org3, rules=[rule])
+        result = self.app.get(f'/api/organization/{org.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # cleanup
+        org.delete()
+        org2.delete()
+        org3.delete()
+        col.delete()
+
     def test_view_organization_as_node_permission(self):
         node, api_key = self.create_node()
         headers = self.login_node(api_key)
@@ -1464,10 +1842,9 @@ def test_patch_organization_permissions(self):
         rule = Rule.get_by_("organization", Scope.ORGANIZATION,
                             Operation.EDIT)
         headers = self.create_user_and_login(organization=org, rules=[rule])
-        results = self.app.patch(f'/api/organization/{org.id}',
-                                 headers=headers, json={
-                                     "name": "third-name"
-                                 })
+        results = self.app.patch(
+            f'/api/organization/{org.id}', headers=headers,
+            json={"name": "third-name"})
         self.assertEqual(results.status_code, HTTPStatus.OK)
         self.assertEqual(results.json['name'], "third-name")
 
@@ -1481,6 +1858,28 @@ def test_patch_organization_permissions(self):
                                  })
         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
 
+        # test editing organization inside the collaboration
+        org2 = Organization()
+        org2.save()
+        col = Collaboration(organizations=[org, org2])
+        col.save()
+        rule2 = Rule.get_by_("organization", scope=Scope.COLLABORATION,
+                             operation=Operation.EDIT)
+        headers = self.create_user_and_login(organization=org2, rules=[rule2])
+        results = self.app.patch(
+            f'/api/organization/{org.id}', headers=headers,
+            json={"name": "fourth-name"})
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+
+        # check editing outside the collaboration fails
+        org3 = Organization()
+        org3.save()
+        headers = self.create_user_and_login(organization=org3, rules=[rule2])
+        results = self.app.patch(
+            f'/api/organization/{org.id}', headers=headers,
+            json={"name": "not-going-to-happen"})
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
     def test_organization_view_nodes(self):
 
         # create organization, collaboration and node
@@ -1650,6 +2049,35 @@ def test_edit_collaboration_permissions(self):
                                  })
         self.assertEqual(results.status_code, HTTPStatus.OK)
         self.assertEqual(results.json["name"], "this-is-gonna-fly")
+        col.delete()
+
+        # test editing collaboration from within the collaboration
+        org = Organization()
+        org.save()
+        col = Collaboration(organizations=[org])
+        col.save()
+        rule = Rule.get_by_("collaboration", scope=Scope.COLLABORATION,
+                            operation=Operation.EDIT)
+        headers = self.create_user_and_login(organization=org, rules=[rule])
+        results = self.app.patch(
+            f'/api/collaboration/{col.id}', headers=headers,
+            json={"name": "some-name"})
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+
+        # check editing collaboration outside the collaboration fails without
+        # root access
+        org2 = Organization()
+        org2.save()
+        headers = self.create_user_and_login(organization=org2, rules=[rule])
+        results = self.app.patch(
+            f'/api/collaboration/{col.id}', headers=headers,
+            json={"name": "not-going-to-happen"})
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # cleanup
+        org.delete()
+        org2.delete()
+        col.delete()
 
     def test_delete_collaboration_permissions(self):
 
@@ -1674,6 +2102,33 @@ def test_delete_collaboration_permissions(self):
                                   headers=headers)
         self.assertEqual(results.status_code, HTTPStatus.OK)
 
+        # check deleting with collaboration permission outside the
+        # collaboration fails
+        org = Organization()
+        org.save()
+        col = Collaboration(organizations=[org])
+        col.save()
+        org_not_member = Organization()
+        org_not_member.save()
+        rule = Rule.get_by_("collaboration", Scope.COLLABORATION,
+                            Operation.DELETE)
+        headers = self.create_user_and_login(organization=org_not_member,
+                                             rules=[rule])
+        result = self.app.delete(f"/api/collaboration/{col.id}",
+                                 headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # check deleting with collaboration permission inside the collaboration
+        # succeeds
+        headers = self.create_user_and_login(organization=org, rules=[rule])
+        result = self.app.delete(f"/api/collaboration/{col.id}",
+                                 headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # cleanup
+        org.delete()
+        org_not_member.delete()
+
     def test_view_collaboration_organization_permissions_as_user(self):
         headers = self.create_user_and_login()
 
@@ -1778,11 +2233,40 @@ def test_edit_collaboration_organization_permissions(self):
         self.assertEqual(results.status_code, HTTPStatus.OK)
         self.assertEqual(len(results.json), 2)
 
-    def test_delete_collaboration_organization_pesmissions(self):
+        # test adding new organization to collaboration from within the
+        # collaboration
+        org3 = Organization()
+        org3.save()
+        rule = Rule.get_by_("collaboration", scope=Scope.COLLABORATION,
+                            operation=Operation.EDIT)
+        headers = self.create_user_and_login(organization=org, rules=[rule])
+        results = self.app.post(f"/api/collaboration/{col.id}/organization",
+                                headers=headers, json={'id': org3.id})
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+
+        # adding new organization to collaboration from outside the
+        # collaboration should fail with collaboration permission
+        org4 = Organization()
+        org4.save()
+        headers = self.create_user_and_login(organization=org4, rules=[rule])
+        results = self.app.post(f"/api/collaboration/{col.id}/organization",
+                                headers=headers, json={'id': org4.id})
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # cleanup
+        org.delete()
+        org2.delete()
+        org3.delete()
+        org4.delete()
+        col.delete()
+
+    def test_delete_collaboration_organization_permissions(self):
 
         org = Organization()
         org.save()
-        col = Collaboration(organizations=[org])
+        org2 = Organization()
+        org2.save()
+        col = Collaboration(organizations=[org, org2])
         col.save()
 
         # try to do it without permission
@@ -1791,13 +2275,41 @@ def test_delete_collaboration_organization_pesmissions(self):
                                   headers=headers, json={'id': org.id})
         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
 
-        # delete it!
-        rule = Rule.get_by_("collaboration", Scope.GLOBAL, Operation.DELETE)
+        # delete first organization
+        rule = Rule.get_by_("collaboration", Scope.GLOBAL, Operation.EDIT)
         headers = self.create_user_and_login(rules=[rule])
         results = self.app.delete(f"/api/collaboration/{col.id}/organization",
                                   headers=headers, json={'id': org.id})
         self.assertEqual(results.status_code, HTTPStatus.OK)
-        self.assertEqual(results.json, [])
+        self.assertEqual(len(results.json), 1)  # one organization left
+
+        # add back first organization
+        col.organizations.append(org)
+        col.save()
+
+        # removing organization from collaboration from outside the
+        # collaboration should fail with collaboration permission
+        org3 = Organization()
+        org3.save()
+        rule = Rule.get_by_("collaboration", scope=Scope.COLLABORATION,
+                            operation=Operation.EDIT)
+        headers = self.create_user_and_login(organization=org3, rules=[rule])
+        results = self.app.delete(f"/api/collaboration/{col.id}/organization",
+                                  headers=headers, json={'id': org2.id})
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # test removing organization from collaboration from within the
+        # collaboration
+        headers = self.create_user_and_login(organization=org, rules=[rule])
+        results = self.app.delete(f"/api/collaboration/{col.id}/organization",
+                                  headers=headers, json={'id': org2.id})
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+
+        # cleanup
+        org.delete()
+        org2.delete()
+        org3.delete()
+        col.delete()
 
     def test_view_collaboration_node_permissions(self):
 
@@ -1848,10 +2360,19 @@ def test_add_collaboration_node_permissions(self):
 
         org = Organization()
         org.save()
-        col = Collaboration(organizations=[org])
+        org2 = Organization()
+        org2.save()
+        col = Collaboration(organizations=[org, org2])
         col.save()
         node = Node(organization=org)
         node.save()
+        node2 = Node(organization=org2)
+        node2.save()
+
+        org3 = Organization()
+        org3.save()
+        node3 = Node(organization=org3)
+        node3.save()
 
         # try non-existant collaboration
         headers = self.create_user_and_login()
@@ -1883,13 +2404,41 @@ def test_add_collaboration_node_permissions(self):
                                 headers=headers, json={'id': node.id})
         self.assertEqual(results.status_code, HTTPStatus.BAD_REQUEST)
 
+        # adding new node to collaboration from an organization that is not
+        # part of the collaboration should fail
+        results = self.app.post(f'/api/collaboration/{col.id}/node',
+                                headers=headers, json={'id': node3.id})
+        self.assertEqual(results.status_code, HTTPStatus.BAD_REQUEST)
+
+        # test new node to collaboration from within the collaboration
+        rule = Rule.get_by_("collaboration", scope=Scope.COLLABORATION,
+                            operation=Operation.EDIT)
+        headers = self.create_user_and_login(organization=org, rules=[rule])
+        results = self.app.post(f'/api/collaboration/{col.id}/node',
+                                headers=headers, json={'id': node2.id})
+        self.assertEqual(results.status_code, HTTPStatus.CREATED)
+
+        # adding new node to collaboration from outside collaboration should
+        # fail with collaboration-scope permission
+        headers = self.create_user_and_login(organization=org3, rules=[rule])
+        results = self.app.post(f'/api/collaboration/{col.id}/node',
+                                headers=headers, json={'id': node3.id})
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
         # cleanup
         node.delete()
+        node2.delete()
+        node3.delete()
+        org.delete()
+        org2.delete()
+        org3.delete()
+        col.delete()
 
     def test_delete_collaboration_node_permissions(self):
 
         org = Organization()
-        col = Collaboration(organizations=[org])
+        org2 = Organization()
+        col = Collaboration(organizations=[org, org2])
         node = Node(organization=org, collaboration=col)
         node.save()
 
@@ -1917,15 +2466,40 @@ def test_delete_collaboration_node_permissions(self):
         results = self.app.delete(f'/api/collaboration/{col.id}/node',
                                   headers=headers, json={'id': node2.id})
         self.assertEqual(results.status_code, HTTPStatus.BAD_REQUEST)
+        node2.delete()
 
-        # delete a node!
+        # delete node from collaboration!
         results = self.app.delete(f'/api/collaboration/{col.id}/node',
                                   headers=headers, json={'id': node.id})
         self.assertEqual(results.status_code, HTTPStatus.OK)
 
+        # removing node from collaboration from outside the
+        # collaboration should fail with collaboration permission
+        node2 = Node(organization=org2, collaboration=col)
+        node2.save()
+        org3 = Organization()
+        org3.save()
+        rule = Rule.get_by_("collaboration", scope=Scope.COLLABORATION,
+                            operation=Operation.EDIT)
+        headers = self.create_user_and_login(organization=org3, rules=[rule])
+        results = self.app.delete(f"/api/collaboration/{col.id}/node",
+                                  headers=headers, json={'id': node2.id})
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # test removing organization from collaboration from within the
+        # collaboration
+        headers = self.create_user_and_login(organization=org, rules=[rule])
+        results = self.app.delete(f"/api/collaboration/{col.id}/node",
+                                  headers=headers, json={'id': node2.id})
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+
         # cleanup
         node.delete()
         node2.delete()
+        org.delete()
+        org2.delete()
+        org3.delete()
+        col.delete()
 
     def test_view_collaboration_task_permissions_as_user(self):
 
@@ -1946,8 +2520,7 @@ def test_view_collaboration_task_permissions_as_user(self):
         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
 
         # view from another organization
-        rule = Rule.get_by_("task", Scope.ORGANIZATION,
-                            Operation.VIEW)
+        rule = Rule.get_by_("task", Scope.COLLABORATION, Operation.VIEW)
         headers = self.create_user_and_login(rules=[rule])
         results = self.app.get(f'/api/collaboration/{col.id}/task',
                                headers=headers)
@@ -1987,9 +2560,12 @@ def test_view_collaboration_task_permissions_as_node(self):
     def test_view_node_permissions_as_user(self):
 
         org = Organization()
-        col = Collaboration(organizations=[org])
+        org2 = Organization()
+        col = Collaboration(organizations=[org, org2])
         node = Node(organization=org, collaboration=col)
         node.save()
+        node2 = Node(organization=org2, collaboration=col)
+        node2.save()
 
         # view non existing node
         headers = self.create_user_and_login()
@@ -2021,16 +2597,45 @@ def test_view_node_permissions_as_user(self):
         headers = self.create_user_and_login(organization=org, rules=[rule1])
         results = self.app.get('/api/node', headers=headers)
         self.assertEqual(results.status_code, HTTPStatus.OK)
-        self.assertEqual(len(results.json['data']), len(col.nodes))
+        self.assertEqual(len(results.json['data']), 1)  # collab has 1 node
 
         # list global permissions
         headers = self.create_user_and_login(rules=[rule2])
         results, json_data = self.paginated_list('/api/node', headers=headers)
         self.assertEqual(results.status_code, HTTPStatus.OK)
         self.assertEqual(len(json_data), len(Node.get()))
 
+        # collaboration permission inside the collaboration
+        rule = Rule.get_by_("node", scope=Scope.COLLABORATION,
+                            operation=Operation.VIEW)
+        headers = self.create_user_and_login(organization=org2, rules=[rule])
+        results = self.app.get(f'/api/node/{node.id}', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+
+        # list collaboration permissions - in collaboration
+        results = self.app.get('/api/node', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+        self.assertEqual(len(results.json['data']), len(col.nodes))
+
+        # collaboration permission outside the collaboration should fail
+        org3 = Organization()
+        org3.save()
+        headers = self.create_user_and_login(organization=org3, rules=[rule])
+        results = self.app.get(f'/api/node/{node.id}', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # list collaboration permissions - other collaboration
+        results = self.app.get('/api/node', headers=headers,
+                               query_string={'collaboration_id': col.id})
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
         # cleanup
         node.delete()
+        node2.delete()
+        org.delete()
+        org2.delete()
+        org3.delete()
+        col.delete()
 
     def test_view_node_permissions_as_node(self):
 
@@ -2089,9 +2694,10 @@ def test_create_node_permissions(self):
         })
         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
 
-        # test adding a node to an collaboration from an organization witch
+        # test adding a node to an collaboration from an organization which
         # does not belong to the collaboration
-        headers = self.create_user_and_login(organization=org2, rules=[rule])
+        rule2 = Rule.get_by_("node", Scope.GLOBAL, Operation.CREATE)
+        headers = self.create_user_and_login(organization=org2, rules=[rule2])
         results = self.app.post('/api/node', headers=headers, json={
             'collaboration_id': col.id
         })
@@ -2123,6 +2729,41 @@ def test_create_node_permissions(self):
         })
         self.assertEqual(results.status_code, HTTPStatus.CREATED)
 
+        # test collaboration permissions
+        org3 = Organization()
+        org3.save()
+        col.organizations.append(org3)
+        col.save()
+        rule = Rule.get_by_("node", scope=Scope.COLLABORATION,
+                            operation=Operation.CREATE)
+        headers = self.create_user_and_login(organization=org, rules=[rule])
+        result = self.app.post('/api/node', headers=headers, json={
+            'collaboration_id': col.id,
+            'organization_id': org3.id
+        })
+        self.assertEqual(result.status_code, HTTPStatus.CREATED)
+
+        # test collaboration permissions - outside of collaboration should fail
+        org4 = Organization()
+        org4.save()
+        col.organizations.append(org4)
+        col.save()
+        headers = self.create_user_and_login(organization=Organization(),
+                                             rules=[rule])
+        result = self.app.post('/api/node', headers=headers, json={
+            'collaboration_id': col.id,
+            'organization_id': org4.id
+        })
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # cleanup
+        node.delete()
+        org.delete()
+        org2.delete()
+        org3.delete()
+        org4.delete()
+        col.delete()
+
     def test_delete_node_permissions(self):
 
         org = Organization(name=str(uuid.uuid1()))
@@ -2156,6 +2797,34 @@ def test_delete_node_permissions(self):
         results = self.app.delete(f'/api/node/{node2.id}', headers=headers)
         self.assertEqual(results.status_code, HTTPStatus.OK)
 
+        # collaboration permission - removing node from outside collaboration
+        # should fail
+        org3 = Organization()
+        node3 = Node(organization=org3, collaboration=col)
+        node3.save()
+        col.organizations.append(org3)
+        col.save()
+        org_not_in_collab = Organization()
+        org_not_in_collab.save()
+        rule = Rule.get_by_("node", scope=Scope.COLLABORATION,
+                            operation=Operation.DELETE)
+        headers = self.create_user_and_login(organization=org_not_in_collab,
+                                             rules=[rule])
+        results = self.app.delete(f'/api/node/{node3.id}', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # collaboration permission - now within collaboration
+        headers = self.create_user_and_login(organization=org, rules=[rule])
+        results = self.app.delete(f'/api/node/{node3.id}', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+
+        # cleanup
+        org.delete()
+        org2.delete()
+        org3.delete()
+        org_not_in_collab.delete()
+        col.delete()
+
     def test_patch_node_permissions_as_user(self):
         # test patching non-existant node
         headers = self.create_user_and_login()
@@ -2164,7 +2833,8 @@ def test_patch_node_permissions_as_user(self):
 
         # test user without any permissions
         org = Organization()
-        col = Collaboration(organizations=[org])
+        org2 = Organization()
+        col = Collaboration(organizations=[org, org2])
         node = Node(organization=org, collaboration=col)
         node.save()
 
@@ -2230,8 +2900,28 @@ def test_patch_node_permissions_as_user(self):
                                  json={'organization_id': 9999})
         self.assertEqual(results.status_code, HTTPStatus.NOT_FOUND)
 
+        # collaboration permission - inside the collaboration
+        rule = Rule.get_by_("node", Scope.COLLABORATION, Operation.EDIT)
+        headers = self.create_user_and_login(organization=org2, rules=[rule])
+        results = self.app.patch(f"/api/node/{node.id}", headers=headers,
+                                 json={"name": "A"})
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+
+        # collaboration permission - outside the collaboration
+        org3 = Organization()
+        org3.save()
+        headers = self.create_user_and_login(organization=org3, rules=[rule])
+        results = self.app.patch(f"/api/node/{node.id}", headers=headers,
+                                 json={"name": "A"})
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
         # cleanup
         node.delete()
+        org.delete()
+        org2.delete()
+        org3.delete()
+        col.delete()
+        col2.delete()
 
     def test_view_task_permissions_as_user(self):
         # non existing task
@@ -2241,20 +2931,29 @@ def test_view_task_permissions_as_user(self):
 
         # test user without any permissions and id
         org = Organization()
-        col = Collaboration(organizations=[org])
-        task = Task(name="unit", collaboration=col)
+        org2 = Organization()
+        col = Collaboration(organizations=[org, org2])
+        task = Task(name="unit", collaboration=col, init_org=org)
         task.save()
 
         results = self.app.get(f'/api/task/{task.id}', headers=headers)
         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
 
-        # test user with org permissions with id
-        rule = Rule.get_by_("task", Scope.ORGANIZATION, Operation.VIEW)
+        # test user with col permissions with id
+        rule = Rule.get_by_("task", Scope.COLLABORATION, Operation.VIEW)
         headers = self.create_user_and_login(org, rules=[rule])
         results = self.app.get(f'/api/task/{task.id}', headers=headers)
         self.assertEqual(results.status_code, HTTPStatus.OK)
         self.assertEqual(results.json['name'], 'unit')
 
+        # collaboration permission outside the collaboration should fail
+        org_not_in_collab = Organization()
+        org_not_in_collab.save()
+        headers = self.create_user_and_login(organization=org_not_in_collab,
+                                             rules=[rule])
+        results = self.app.get(f'/api/task/{task.id}', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
         # test user with org permissions with id from another org
         headers = self.create_user_and_login(rules=[rule])
         results = self.app.get(f'/api/task/{task.id}', headers=headers)
@@ -2265,23 +2964,111 @@ def test_view_task_permissions_as_user(self):
         results = self.app.get('/api/task', headers=headers)
         self.assertEqual(results.status_code, HTTPStatus.OK)
 
+        # test that user is not allowed to view task results without id
+        results = self.app.get('/api/task', headers=headers,
+                               query_string={'include': 'results'})
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # test that user is allowed to view task results if they have the rule
+        # to view results
+        rule_view_results = Rule.get_by_("run", Scope.GLOBAL, Operation.VIEW)
+        headers = self.create_user_and_login(org,
+                                             rules=[rule, rule_view_results])
+        results = self.app.get('/api/task', headers=headers,
+                               query_string={'include': 'results'})
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+
         # test user with global permissions and id
         rule = Rule.get_by_("task", Scope.GLOBAL, Operation.VIEW)
         headers = self.create_user_and_login(rules=[rule])
         results = self.app.get(f'/api/task/{task.id}', headers=headers)
         self.assertEqual(results.status_code, HTTPStatus.OK)
 
+        # test that user is not allowed to view task results with id
+        results = self.app.get(f'/api/task/{task.id}', headers=headers,
+                               query_string={'include': 'results'})
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # test that user is allowed to view task results if they have the rule
+        # to view results
+        headers = self.create_user_and_login(org,
+                                             rules=[rule, rule_view_results])
+        results = self.app.get(f'/api/task/{task.id}', headers=headers,
+                               query_string={'include': 'results'})
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+
         # test user with global permissions without id
         results = self.app.get('/api/task', headers=headers)
         self.assertEqual(results.status_code, HTTPStatus.OK)
 
+        # list collaboration permissions - in collaboration
+        rule = Rule.get_by_("task", Scope.COLLABORATION, Operation.VIEW)
+        headers = self.create_user_and_login(org, rules=[rule])
+        results = self.app.get('/api/task', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+        self.assertEqual(len(results.json['data']), len(col.tasks))
+
+        # list collaboration permissions - other collaboration
+        headers = self.create_user_and_login(org_not_in_collab, rules=[rule])
+        results = self.app.get('/api/task', headers=headers,
+                               query_string={'collaboration_id': col.id})
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # list own organization permissions - same organization
+        rule = Rule.get_by_("task", Scope.ORGANIZATION, Operation.VIEW)
+        headers = self.create_user_and_login(org, rules=[rule])
+        results = self.app.get('/api/task', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+        self.assertEqual(len(results.json['data']), len(col.tasks))
+
+        # list own organization permissions - other organization
+        headers = self.create_user_and_login(org2, rules=[rule])
+        results = self.app.get('/api/task', headers=headers, query_string={
+            'init_org_id': org.id
+        })
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # list own user's task permissions - same user without id
+        rule = Rule.get_by_("task", Scope.OWN, Operation.VIEW)
+        user = self.create_user(rules=[rule], organization=org)
+        headers = self.login(user.username)
+        task2 = Task(name="unit", collaboration=col, init_org=org,
+                     init_user=user)
+        task2.save()
+        results = self.app.get('/api/task', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+        self.assertEqual(len(results.json['data']), 1)
+
+        # list own user's task permissions - same user with id
+        results = self.app.get(f'/api/task/{task2.id}', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+
+        # list own user's task permissions - other user without id
+        headers = self.create_user_and_login(org, rules=[rule])
+        results = self.app.get('/api/task', headers=headers, query_string={
+            'init_user_id': user.id
+        })
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # list own user's task permissions - other user with id
+        results = self.app.get(f'/api/task/{task2.id}', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # cleanup
+        task.delete()
+        task2.delete()
+        user.delete()
+        org.delete()
+        org2.delete()
+        col.delete()
+
     def test_view_task_permissions_as_node_and_container(self):
         # test node with id
         org = Organization()
         org.save()
         col = Collaboration(organizations=[org])
         col.save()
-        task = Task(collaboration=col, image="some-image")
+        task = Task(collaboration=col, image="some-image", init_org=org)
         task.save()
         res = Run(task=task, status=TaskStatus.PENDING)
         res.save()
@@ -2345,7 +3132,7 @@ def test_create_task_permission_as_user(self):
         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
 
         # user with organization permissions for other organization
-        rule = Rule.get_by_("task", Scope.ORGANIZATION, Operation.CREATE)
+        rule = Rule.get_by_("task", Scope.COLLABORATION, Operation.CREATE)
         headers = self.create_user_and_login(rules=[rule])
         results = self.app.post('/api/task', headers=headers, json=task_json)
         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
@@ -2440,16 +3227,18 @@ def test_delete_task_permissions(self):
 
         # test with organization permissions from other organization
         org = Organization()
-        col = Collaboration(organizations=[org])
-        task = Task(collaboration=col)
+        org2 = Organization()
+        col = Collaboration(organizations=[org, org2])
+        task = Task(collaboration=col, init_org=org)
         task.save()
 
-        rule = Rule.get_by_("task", Scope.ORGANIZATION, Operation.DELETE)
+        # test with user who is not member of collaboration
+        rule = Rule.get_by_("task", Scope.COLLABORATION, Operation.DELETE)
         headers = self.create_user_and_login(rules=[rule])
         results = self.app.delete(f'/api/task/{task.id}', headers=headers)
         self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
 
-        # test with organization permissions
+        # test with collaboration permissions
         headers = self.create_user_and_login(org, [rule])
         results = self.app.delete(f'/api/task/{task.id}', headers=headers)
         self.assertEqual(results.status_code, HTTPStatus.OK)
@@ -2471,6 +3260,41 @@ def test_delete_task_permissions(self):
         self.assertEqual(results.status_code, HTTPStatus.OK)
         self.assertIsNone(Task.get(run_id))
 
+        # test permission to delete tasks of own organization - other
+        # organization should fail
+        task = Task(collaboration=col, init_org=org)
+        task.save()
+        rule = Rule.get_by_("task", Scope.ORGANIZATION, Operation.DELETE)
+        headers = self.create_user_and_login(rules=[rule], organization=org2)
+        results = self.app.delete(f'/api/task/{task.id}', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # test permission to delete tasks of own organization - should work
+        headers = self.create_user_and_login(rules=[rule], organization=org)
+        results = self.app.delete(f'/api/task/{task.id}', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+
+        # test permission to delete own tasks - other user of organization
+        # should fail
+        rule = Rule.get_by_("task", Scope.OWN, Operation.DELETE)
+        user = self.create_user(rules=[rule], organization=org)
+        task = Task(collaboration=col, init_org=org, init_user=user)
+        task.save()
+        headers = self.create_user_and_login(rules=[rule], organization=org)
+        results = self.app.delete(f'/api/task/{task.id}', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # test permission to delete own tasks with same user
+        headers = self.login(user.username)
+        results = self.app.delete(f'/api/task/{task.id}', headers=headers)
+        self.assertEqual(results.status_code, HTTPStatus.OK)
+
+        # cleanup
+        user.delete()
+        org.delete()
+        org2.delete()
+        col.delete()
+
     def test_view_task_result_permissions_as_user(self):
 
         # non-existing task
@@ -2480,19 +3304,22 @@ def test_view_task_result_permissions_as_user(self):
 
         # test with organization permissions from other organization
         org = Organization()
-        col = Collaboration(organizations=[org])
-        task = Task(collaboration=col)
+        org2 = Organization()
+        col = Collaboration(organizations=[org, org2])
+        col.save()
+        task = Task(collaboration=col, init_org=org)
         # NB: node is used implicitly in task/{id}/result schema
         node = Node(organization=org, collaboration=col)
         res = Run(task=task, organization=org)
         res.save()
 
-        rule = Rule.get_by_("run", Scope.ORGANIZATION, Operation.VIEW)
+        # Test with permissions of someone who is not in the collaboration
+        rule = Rule.get_by_("run", Scope.COLLABORATION, Operation.VIEW)
         headers = self.create_user_and_login(rules=[rule])
         result = self.app.get(f'/api/run?task_id={task.id}', headers=headers)
-        self.assertEqual(len(result.json['data']), 0)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
 
-        # test with organization permission
+        # test with collaboration permission
         headers = self.create_user_and_login(org, [rule])
         result = self.app.get(f'/api/run?task_id={task.id}', headers=headers)
         self.assertEqual(result.status_code, HTTPStatus.OK)
@@ -2504,33 +3331,76 @@ def test_view_task_result_permissions_as_user(self):
         self.assertEqual(result.status_code, HTTPStatus.OK)
 
         # test also result endpoint
-        rule = Rule.get_by_("run", Scope.ORGANIZATION, Operation.VIEW)
+        rule = Rule.get_by_("run", Scope.COLLABORATION, Operation.VIEW)
         headers = self.create_user_and_login(rules=[rule])
         result = self.app.get(
             f'/api/result?task_id={task.id}', headers=headers)
-        self.assertEqual(len(result.json['data']), 0)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
 
-        # test with organization permission
+        # test result endpoint with organization permission
         headers = self.create_user_and_login(org, [rule])
         result = self.app.get(
             f'/api/result?task_id={task.id}', headers=headers)
         self.assertEqual(result.status_code, HTTPStatus.OK)
 
-        # test with global permission
+        # test result endpoint with global permission
         rule = Rule.get_by_("run", Scope.GLOBAL, Operation.VIEW)
         headers = self.create_user_and_login(rules=[rule])
         result = self.app.get(
             f'/api/result?task_id={task.id}', headers=headers)
         self.assertEqual(result.status_code, HTTPStatus.OK)
 
+        # test with organization permission
+        rule = Rule.get_by_("run", Scope.ORGANIZATION, Operation.VIEW)
+        headers = self.create_user_and_login(org, [rule])
+        result = self.app.get(f'/api/run?task_id={task.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+        result = self.app.get(f'/api/run/{res.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # test with organization permission - other organization should fail
+        headers = self.create_user_and_login(org2, [rule])
+        result = self.app.get(
+            f'/api/run?task_id={task.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+        result = self.app.get(f'/api/run/{res.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
+        # test with permission to view own runs
+        rule = Rule.get_by_("run", Scope.OWN, Operation.VIEW)
+        user = self.create_user(rules=[rule], organization=org)
+        headers = self.login(user.username)
+        task2 = Task(collaboration=col, init_org=org, init_user=user)
+        task2.save()
+        res2 = Run(task=task2, organization=org)
+        res2.save()
+        result = self.app.get(f'/api/run?task_id={task2.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+        result = self.app.get(f'/api/run/{res2.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.OK)
+
+        # test with permission to view own runs - other user should fail
+        headers = self.create_user_and_login(rules=[rule], organization=org)
+        result = self.app.get(f'/api/run?task_id={task2.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+        result = self.app.get(f'/api/run/{res2.id}', headers=headers)
+        self.assertEqual(result.status_code, HTTPStatus.UNAUTHORIZED)
+
         # cleanup
         node.delete()
+        task.delete()
+        task2.delete()
+        res.delete()
+        res2.delete()
+        org.delete()
+        org2.delete()
+        col.delete()
 
     def test_view_task_run_permissions_as_container(self):
         # test if container can
         org = Organization()
         col = Collaboration(organizations=[org])
-        task = Task(collaboration=col, image="some-image")
+        task = Task(collaboration=col, image="some-image", init_org=org)
         task.save()
         res = Run(task=task, organization=org, status=TaskStatus.PENDING)
         res.save()