@@ -9,12 +9,15 @@
 
 from vantage6.server import db
 from vantage6.server.resource import (
+    get_org_ids_from_collabs,
     with_user,
     ServicesResources
 )
 from vantage6.common import logger_name
 from vantage6.server.permission import (
-    PermissionManager
+    PermissionManager,
+    RuleCollection,
+    Operation as P,
 )
 from vantage6.server.model.rule import Operation, Scope
 from vantage6.server.resource.common.output_schema import RoleSchema, RuleSchema
@@ -87,20 +90,29 @@ def permissions(permissions: PermissionManager) -> None:
     add = permissions.appender(module_name)
     add(scope=Scope.GLOBAL, operation=Operation.VIEW,
         description="View any role")
+    add(scope=Scope.COLLABORATION, operation=Operation.VIEW,
+        description="View any role in your collaborations")
     add(scope=Scope.ORGANIZATION, operation=Operation.VIEW,
         description="View the roles of your organization")
     add(scope=Scope.GLOBAL, operation=Operation.CREATE,
         description="Create role for any organization")
+    add(scope=Scope.COLLABORATION, operation=Operation.CREATE,
+        description="Create role for any organization in your collaborations")
     add(scope=Scope.ORGANIZATION, operation=Operation.CREATE,
         description="Create role for your organization")
     add(scope=Scope.GLOBAL, operation=Operation.EDIT,
         description="Edit any role")
+    add(scope=Scope.COLLABORATION, operation=Operation.EDIT,
+        description="Edit any role in your collaborations")
     add(scope=Scope.ORGANIZATION, operation=Operation.EDIT,
         description="Edit a role from your organization")
     add(scope=Scope.GLOBAL, operation=Operation.DELETE,
-        description="Delete any organization")
+        description="Delete a role from any organization")
+    add(scope=Scope.COLLABORATION, operation=Operation.DELETE,
+        description="Delete a role from any organization in your "
+                    "collaborations")
     add(scope=Scope.ORGANIZATION, operation=Operation.DELETE,
-        description="Delete your organization")
+        description="Delete a role from your organization")
 
 
 # -----------------------------------------------------------------------------
@@ -115,7 +127,7 @@ class RoleBase(ServicesResources):
 
     def __init__(self, socketio, mail, api, permissions, config):
         super().__init__(socketio, mail, api, permissions, config)
-        self.r = getattr(self.permissions, module_name)
+        self.r: RuleCollection = getattr(self.permissions, module_name)
 
 
 class Roles(RoleBase):
@@ -135,6 +147,8 @@ def get(self):
             Description|\n
             |--|--|--|--|--|--|\n
             |Role|Global|View|❌|❌|View all roles|\n
+            |Role|Collaboration|View|❌|❌|View all roles in your
+            collaborations|\n
             |Role|Organization|View|❌|❌|View roles that are part of your
             organization|\n
 
@@ -166,6 +180,11 @@ def get(self):
                 items:
                   type: integer
                   description: Organization id of which you want to get roles
+            - in: query
+              name: collaboration_id
+              schema:
+              type: integer
+              description: Collaboration id
             - in: query
               name: rule_id
               schema:
@@ -214,20 +233,43 @@ def get(self):
         """
         q = g.session.query(db.Role)
 
-        auth_org_id = self.obtain_organization_id()
+        auth_org = self.obtain_auth_organization()
         args = request.args
 
         # filter by organization ids (include root role if desired)
         org_filters = args.getlist('organization_id')
         if org_filters:
+            for org_id in org_filters:
+                if not self.r.can_for_org(P.VIEW, org_id):
+                    return {
+                        'msg': 'You lack the permission view all roles from '
+                        f'organization {org_id}!'
+                    }, HTTPStatus.UNAUTHORIZED
             if 'include_root' in args and args['include_root']:
                 q = q.filter(or_(
                     db.Role.organization_id.in_(org_filters),
-                    db.Role.organization_id == None
+                    db.Role.organization_id.is_(None)
                 ))
             else:
                 q = q.filter(db.Role.organization_id.in_(org_filters))
 
+        # filter by collaboration id
+        if 'collaboration_id' in args:
+            if not self.r.can_for_col(P.VIEW, args['collaboration_id']):
+                return {
+                    'msg': 'You lack the permission view all roles from '
+                    f'collaboration {args["collaboration_id"]}!'
+                }, HTTPStatus.UNAUTHORIZED
+            org_ids = get_org_ids_from_collabs(g.user,
+                                               args['collaboration_id'])
+            if 'include_root' in args and args['include_root']:
+                q = q.filter(or_(
+                    db.Role.organization_id.in_(org_ids),
+                    db.Role.organization_id.is_(None)
+                ))
+            else:
+                q = q.filter(db.Role.organization_id.in_(org_ids))
+
         # filter by one or more names or descriptions
         for param in ['name', 'description']:
             filters = args.getlist(param)
@@ -238,23 +280,49 @@ def get(self):
 
         # find roles containing a specific rule
         if 'rule_id' in args:
+            rule = db.Rule.get(args['rule_id'])
+            if not rule:
+                return {'msg': f'Rule with id={args["rule_id"]} does not '
+                        'exist!'}, HTTPStatus.BAD_REQUEST
             q = q.join(db.role_rule_association).join(db.Rule)\
                  .filter(db.Rule.id == args['rule_id'])
 
         if 'user_id' in args:
+            user = db.User.get(args['user_id'])
+            if not user:
+                return {'msg': f'User with id={args["user_id"]} does not '
+                        'exist!'}, HTTPStatus.BAD_REQUEST
+            elif not self.r.can_for_org(P.VIEW, user.organization_id) and not \
+                    g.user.id == user.id:
+                return {
+                    'msg': 'You lack the permission view roles from the '
+                    f'organization that user id={user.id} belongs to!'
+                }, HTTPStatus.UNAUTHORIZED
             q = q.join(db.Permission).join(db.User)\
                  .filter(db.User.id == args['user_id'])
 
         if not self.r.v_glo.can():
             own_role_ids = [role.id for role in g.user.roles]
-            if self.r.v_org.can():
+            if self.r.v_col.can():
+                q = q.filter(or_(
+                    db.Role.id.in_(own_role_ids),
+                    db.Role.organization_id.is_(None),
+                    db.Role.organization_id.in_(
+                        [
+                            org.id
+                            for col in self.obtain_auth_collaborations()
+                            for org in col.organizations
+                        ]
+                    )
+                ))
+            elif self.r.v_org.can():
                 # allow user to view all roles of their organization and any
                 # other roles they may have themselves, or default roles from
                 # the root organization
                 q = q.filter(or_(
-                        db.Role.organization_id == auth_org_id,
+                        db.Role.organization_id == auth_org.id,
                         db.Role.id.in_(own_role_ids),
-                        db.Role.organization_id == None
+                        db.Role.organization_id.is_(None)
                     ))
             else:
                 # allow users without permission to view only their own roles
@@ -282,6 +350,8 @@ def post(self):
           Description|\n
           |--|--|--|--|--|--|\n
           |Role|Global|Create|❌|❌|Create a role for any organization|\n
+          |Role|Collaboration|Create|❌|❌|Create a role for organization in
+          your collaborations|\n
           |Role|Organization|Create|❌|❌|Create a role for your organization|\n
 
           Accessible to users.
@@ -356,14 +426,10 @@ def post(self):
                     'exist!'}, HTTPStatus.NOT_FOUND
 
         # check if user is allowed to create this role
-        if (not self.r.c_glo.can() and
-                organization_id != g.user.organization_id):
+        if not self.r.can_for_org(P.CREATE, organization_id):
             return {
-                'msg': 'You cannot create roles for other organizations!'
+                'msg': 'You cannot create a role for this organization!'
             }, HTTPStatus.UNAUTHORIZED
-        elif not self.r.c_glo.can() and not self.r.c_org.can():
-            return {'msg': 'You lack the permission to create roles!'}, \
-                HTTPStatus.UNAUTHORIZED
 
         # create the actual role
         role = db.Role(name=data.get("name"),
@@ -388,6 +454,8 @@ def get(self, id):
           Description|\n
           |--|--|--|--|--|--|\n
           |Role|Global|View|❌|❌|View all roles|\n
+          |Role|Collaboration|View|❌|❌|View all roles for your
+          collaborations|\n
           |Role|Organization|View|❌|❌|View roles that are part of your
           organization|\n
 
@@ -420,11 +488,12 @@ def get(self, id):
                 HTTPStatus.NOT_FOUND
 
         # check permissions. A user can always view their own roles
-        if not (self.r.v_glo.can() or role in g.user.roles):
-            if not (self.r.v_org.can()
-                    and role.organization == g.user.organization):
-                return {"msg": "You do not have permission to view this."},\
-                     HTTPStatus.UNAUTHORIZED
+        if not (
+            self.r.can_for_org(P.VIEW, role.organization_id) or
+            role in g.user.roles
+        ):
+            return {"msg": "You do not have permission to view this."},\
+                    HTTPStatus.UNAUTHORIZED
 
         return role_schema.dump(role, many=False), HTTPStatus.OK
 
@@ -440,6 +509,8 @@ def patch(self, id):
           Description|\n
           |--|--|--|--|--|--|\n
           |Role|Global|Edit|❌|❌|Update any role|\n
+          |Role|Collaboration|Edit|❌|❌|Update any role in your
+          collaborations|\n
           |Role|Organization|Edit|❌|❌|Update a role from your organization|\n
 
           Accessible to users.
@@ -510,13 +581,9 @@ def patch(self, id):
             }, HTTPStatus.BAD_REQUEST
 
         # check permission of the user
-        if not self.r.e_glo.can():
-            if not self.r.e_org.can():
-                return {'msg': 'You do not have permission to edit roles!'}, \
-                    HTTPStatus.UNAUTHORIZED
-            elif g.user.organization_id != role.organization.id:
-                return {'msg': 'You can\'t edit roles from another '
-                        'organization'}, HTTPStatus.UNAUTHORIZED
+        if not self.r.can_for_org(P.EDIT, role.organization_id):
+            return {'msg': 'You do not have permission to edit this role!'}, \
+                HTTPStatus.UNAUTHORIZED
 
         # process patch
         if 'name' in data:
@@ -552,6 +619,8 @@ def delete(self, id):
           Description|\n
           |--|--|--|--|--|--|\n
           |Role|Global|Delete|❌|❌|Delete any role|\n
+          |Role|Collaboration|Delete|❌|❌|Delete any role in your
+          collaborations|\n
           |Role|Organization|Delete|❌|❌|Delete a role in your organization|\n
 
           Accessible to users.
@@ -574,6 +643,8 @@ def delete(self, id):
         responses:
           200:
             description: Ok
+          400:
+            description: Cannot delete default roles
           401:
             description: Unauthorized
           404:
@@ -589,13 +660,15 @@ def delete(self, id):
             return {"msg": f"Role with id={id} not found."}, \
                 HTTPStatus.NOT_FOUND
 
-        if not self.r.d_glo.can():
-            if not self.r.d_org.can():
-                return {'msg': 'You do not have permission to delete roles!'},\
-                    HTTPStatus.UNAUTHORIZED
-            elif role.organization.id != g.user.organization.id:
-                return {'msg': 'You can\'t delete a role from another '
-                        'organization'}, HTTPStatus.UNAUTHORIZED
+        if role.name in [role for role in DefaultRole]:
+            return {
+                "msg": f"This role ('{role.name}') is a default role. Default"
+                       " roles cannot be deleted."
+            }, HTTPStatus.BAD_REQUEST
+
+        if not self.r.can_for_org(P.DELETE, role.organization_id):
+            return {'msg': 'You do not have permission to delete this role!'},\
+                HTTPStatus.UNAUTHORIZED
 
         # check if role is assigned to users
         if role.users:
@@ -707,6 +780,8 @@ def post(self, id, rule_id):
           Description|\n
           |--|--|--|--|--|--|\n
           |Role|Global|Edit|❌|❌|Edit any role|\n
+          |Role|Collaboration|Edit|❌|❌|Edit any role in your collaborations
+          |\n
           |Role|Organization|Edit|❌|❌|Edit any role in your organization|\n
 
           Accessible to users.
@@ -747,11 +822,9 @@ def post(self, id, rule_id):
                 HTTPStatus.NOT_FOUND
 
         # check that this user can edit rules
-        if not self.r.e_glo.can():
-            if not (self.r.e_org.can() and
-                    g.user.organization == role.organization):
-                return {'msg': 'You lack permissions to do that'}, \
-                    HTTPStatus.UNAUTHORIZED
+        if not self.r.can_for_org(P.EDIT, role.organization_id):
+            return {'msg': 'You lack permissions to do that'}, \
+                HTTPStatus.UNAUTHORIZED
 
         # user needs to role to assign it
         denied = self.permissions.check_user_rules([rule])
@@ -776,8 +849,10 @@ def delete(self, id, rule_id):
           |Rule name|Scope|Operation|Assigned to node|Assigned to container|
           Description|\n
           |--|--|--|--|--|--|\n
-          |Role|Global|Delete|❌|❌|Delete any role rule|\n
-          |Role|Organization|Delete|❌|❌|Delete any role rule in your
+          |Role|Global|Edit|❌|❌|Delete any rule in a role|\n
+          |Role|Collaboration|Edit|❌|❌|Delete any rule in roles in your
+          collaborations|\n
+          |Role|Organization|Edit|❌|❌|Delete any rule in roles in your
           organization|\n
 
           Accessible to users.
@@ -813,11 +888,9 @@ def delete(self, id, rule_id):
             return {'msg': f'Rule id={rule_id} not found!'}, \
                 HTTPStatus.NOT_FOUND
 
-        if not self.r.d_glo.can():
-            if not (self.r.d_org.can() and
-                    g.user.organization == role.organization):
-                return {'msg': 'You lack permissions to do that'}, \
-                    HTTPStatus.UNAUTHORIZED
+        if not self.r.can_for_org(P.EDIT, role.organization_id):
+            return {'msg': 'You lack permissions to do that'}, \
+                HTTPStatus.UNAUTHORIZED
 
         # user needs to role to remove it
         denied = self.permissions.check_user_rules([rule])