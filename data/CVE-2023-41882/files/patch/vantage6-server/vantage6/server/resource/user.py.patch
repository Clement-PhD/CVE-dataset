@@ -11,9 +11,11 @@
 from vantage6.server.permission import (
     Scope as S,
     Operation as P,
-    PermissionManager
+    PermissionManager,
+    RuleCollection
 )
 from vantage6.server.resource import (
+    get_org_ids_from_collabs,
     with_user,
     ServicesResources
 )
@@ -73,20 +75,27 @@ def permissions(permissions: PermissionManager) -> None:
     add = permissions.appender(module_name)
     add(S.GLOBAL, P.VIEW,
         description='View any user')
+    add(S.COLLABORATION, P.VIEW,
+        description='View users from your collaboration')
     add(S.ORGANIZATION, P.VIEW,
         description='View users from your organization')
     add(S.GLOBAL, P.CREATE,
         description='Create a new user for any organization')
+    add(S.COLLABORATION, P.CREATE,
+        description='Create a new user for organizations in your '
+                    'collaborations')
     add(S.ORGANIZATION, P.CREATE,
         description='Create a new user for your organization')
-    add(S.GLOBAL, P.EDIT,
-        description='Edit any user')
+    add(S.GLOBAL, P.EDIT, description='Edit any user')
+    add(S.COLLABORATION, P.EDIT,
+        description='Edit any user in your collaborations')
     add(S.ORGANIZATION, P.EDIT,
         description='Edit users from your organization')
     add(S.OWN, P.EDIT,
         description='Edit your own info')
-    add(S.GLOBAL, P.DELETE,
-        description='Delete any user')
+    add(S.GLOBAL, P.DELETE, description='Delete any user')
+    add(S.COLLABORATION, P.DELETE,
+        description='Delete any user in your collaborations')
     add(S.ORGANIZATION, P.DELETE,
         description='Delete users from your organization')
     add(S.OWN, P.DELETE,
@@ -104,7 +113,7 @@ class UserBase(ServicesResources):
 
     def __init__(self, socketio, mail, api, permissions, config):
         super().__init__(socketio, mail, api, permissions, config)
-        self.r = getattr(self.permissions, module_name)
+        self.r: RuleCollection = getattr(self.permissions, module_name)
 
 
 class Users(UserBase):
@@ -121,6 +130,8 @@ def get(self):
             Description|\n
             |--|--|--|--|--|--|\n
             |User|Global|View|❌|❌|View any user details|\n
+            |User|Collaboration|View|❌|❌|View user details from your
+            collaborations|\n
             |User|Organization|View|❌|❌|View users from your organization|\n
 
             Accessible to users.
@@ -140,6 +151,11 @@ def get(self):
             schema:
               type: integer
             description: Organization id
+          - in: query
+            name: collaboration_id
+            schema:
+              type: integer
+            description: Collaboration id
           - in: query
             name: firstname
             schema:
@@ -210,6 +226,8 @@ def get(self):
             description: Ok
           401:
             description: Unauthorized
+          400:
+            description: Invalid values provided for request parameters
 
         security:
             - bearerAuth: []
@@ -224,6 +242,11 @@ def get(self):
             if param in args:
                 q = q.filter(getattr(db.User, param).like(args[param]))
         if 'organization_id' in args:
+            if not self.r.can_for_org(P.VIEW, args['organization_id']):
+                return {
+                    'msg': 'You lack the permission view users from the '
+                    f'organization with id {args["organization_id"]}!'
+                }, HTTPStatus.UNAUTHORIZED
             q = q.filter(db.User.organization_id == args['organization_id'])
         if 'last_seen_till' in args:
             q = q.filter(db.User.last_seen <= args['last_seen_till'])
@@ -232,15 +255,48 @@ def get(self):
 
         # find users with a particulare role or rule assigned
         if 'role_id' in args:
+            role = db.Role.query.get(args['role_id'])
+            if not role:
+                return {
+                    'msg': f'Role with id={args["role_id"]} does not exist!'
+                }, HTTPStatus.BAD_REQUEST
+            elif not self.r.can_for_org(P.VIEW, role.organization_id):
+                return {
+                    'msg': 'You lack the permission view users from the '
+                    f'organization that role with id={role.organization_id} '
+                    'belongs to!'
+                }, HTTPStatus.UNAUTHORIZED
             q = q.join(db.Permission).join(db.Role)\
                  .filter(db.Role.id == args['role_id'])
+
         if 'rule_id' in args:
+            rule = db.Rule.query.get(args['rule_id'])
+            if not rule:
+                return {
+                    'msg': f'Rule with id={args["rule_id"]} does not exist!'
+                }, HTTPStatus.BAD_REQUEST
             q = q.join(db.UserPermission).join(db.Rule)\
                  .filter(db.Rule.id == args['rule_id'])
 
+        if 'collaboration_id' in args:
+            if not self.r.can_for_col(P.VIEW, args['collaboration_id']):
+                return {
+                    'msg': 'You lack the permission view all users from '
+                    f'collaboration {args["collaboration_id"]}!'
+                }, HTTPStatus.UNAUTHORIZED
+            q = q.filter(db.User.organization_id.in_(
+                get_org_ids_from_collabs(g.user, args['collaboration_id'])
+            ))
+
         # check permissions and apply filter if neccessary
         if not self.r.v_glo.can():
-            if self.r.v_org.can():
+            if self.r.v_col.can():
+                q = q.filter(db.User.organization_id.in_(
+                    [org.id
+                     for col in g.user.organization.collaborations
+                     for org in col.organizations]
+                ))
+            elif self.r.v_org.can():
                 q = q.filter(db.User.organization_id == g.user.organization_id)
             else:
                 return {'msg': 'You lack the permission to do that!'}, \
@@ -267,6 +323,8 @@ def post(self):
           Description|\n
           |--|--|--|--|--|--|\n
           |User|Global|Create|❌|❌|Create a new user|\n
+          |User|Collaboration|Create|❌|❌|Create a new user for any
+          organization in your collaborations|\n
           |User|Organization|Create|❌|❌|Create a new user as part of your
           organization|\n
 
@@ -346,13 +404,10 @@ def post(self):
                     if not org:
                         return {'msg': "Organization does not exist."}, \
                             HTTPStatus.NOT_FOUND
-                else:  # not-root user cant create users for other organization
-                    return {'msg': 'You lack the permission to do that!'}, \
-                        HTTPStatus.UNAUTHORIZED
             organization_id = data['organization_id']
 
         # check that user is allowed to create users
-        if not (self.r.c_glo.can() or self.r.c_org.can()):
+        if not self.r.can_for_org(P.CREATE, organization_id):
             return {'msg': 'You lack the permission to do that!'}, \
                 HTTPStatus.UNAUTHORIZED
 
@@ -425,6 +480,8 @@ def get(self, id):
             Description|\n
             |-- |--|--|--|--|--|\n
             |User|Global|View|❌|❌|View any user details|\n
+            |User|Collaboration|View|❌|❌|View users from your
+            collaborations|\n
             |User|Organization|View|❌|❌|View users from your
             organization|\n
             |User|Organization|Own|❌|❌|View details about your own user|\n
@@ -457,17 +514,11 @@ def get(self, id):
             return {"msg": f"user id={id} is not found"}, HTTPStatus.NOT_FOUND
 
         same_user = g.user.id == user.id
-        same_org = g.user.organization.id == user.organization_id
-
-        # allow user to be returned if:
-        # 1. auth can see all users
-        # 2. auth can see organization users and user is within organization
-        # 3. auth is requesting own user details
-        if (
-            self.r.v_glo.can() or
-            (self.r.v_org.can() and same_org) or
-            same_user
-        ):
+
+        # allow user to be returned if authenticated user can view users from
+        # that organization or if the user is the same as the authenticated
+        # user.
+        if (same_user or self.r.can_for_org(P.VIEW, user.organization_id)):
             return user_schema.dump(user, many=False), HTTPStatus.OK
         else:
             return {'msg': 'You lack the permission to do that!'}, \
@@ -485,7 +536,8 @@ def patch(self, id):
           Description|\n
           |--|--|--|--|--|--|\n
           |User|Global|Edit|❌|❌|Edit any user|\n
-          |User|Organization|Edit|❌|❌|Edit any user in your organization|\n
+          |User|Collaboration|Edit|❌|❌|Edit users in your collaborations|\n
+          |User|Organization|Edit|❌|❌|Edit users in your organization|\n
           |User|Own|Edit|❌|❌|Edit your own user account|\n
 
           Accessible to users.
@@ -557,13 +609,13 @@ def patch(self, id):
             return {"msg": "You cannot change your password here!"}, \
                 HTTPStatus.BAD_REQUEST
 
-        if not self.r.e_glo.can():
-            if not (self.r.e_org.can() and user.organization ==
-                    g.user.organization):
-                if not (self.r.e_own.can() and user == g.user):
-                    return {'msg': 'You lack the permission to do that!'}, \
-                        HTTPStatus.UNAUTHORIZED
+        # check permissions
+        if not (self.r.e_own.can() and user == g.user) and \
+                not self.r.can_for_org(P.EDIT, user.organization_id):
+            return {'msg': 'You lack the permission to do that!'}, \
+                HTTPStatus.UNAUTHORIZED
 
+        # update user and check for unique constraints
         if data.get("username") is not None:
             if user.username != data["username"]:
                 if db.User.exists("username", data["username"]):
@@ -689,6 +741,8 @@ def delete(self, id):
           Description|\n
           |--|--|--|--|--|--|\n
           |User|Global|Delete|❌|❌|Delete any user|\n
+          |User|Collaboration|Delete|❌|❌|Delete users from your
+          collaboration|\n
           |User|Organization|Delete|❌|❌|Delete users from your
           organization|\n
           |User|Own|Delete|❌|❌|Delete your own account|\n
@@ -727,12 +781,10 @@ def delete(self, id):
             return {"msg": f"user id={id} not found"}, \
                 HTTPStatus.NOT_FOUND
 
-        if not self.r.d_glo.can():
-            if not (self.r.d_org.can() and user.organization ==
-                    g.user.organization):
-                if not (self.r.d_own.can() and user == g.user):
-                    return {'msg': 'You lack the permission to do that!'}, \
-                        HTTPStatus.UNAUTHORIZED
+        if not (self.r.d_own.can() and user == g.user) and \
+                not self.r.can_for_org(P.DELETE, user.organization_id):
+            return {'msg': 'You lack the permission to do that!'}, \
+                HTTPStatus.UNAUTHORIZED
 
         # check if user created any tasks
         if user.created_tasks: