@@ -248,6 +248,11 @@ public UserIdentity login(String username, Object credentials, ServletRequest re
     public void logout(ServletRequest request)
     {
         attemptLogoutRedirect(request);
+        logoutWithoutRedirect(request);
+    }
+
+    private void logoutWithoutRedirect(ServletRequest request)
+    {
         super.logout(request);
         HttpServletRequest httpRequest = (HttpServletRequest)request;
         HttpSession session = httpRequest.getSession(false);
@@ -265,13 +270,13 @@ public void logout(ServletRequest request)
     }
 
     /**
-     * This will attempt to redirect the request to the end_session_endpoint, and finally to the {@link #REDIRECT_PATH}.
+     * <p>This will attempt to redirect the request to the end_session_endpoint, and finally to the {@link #REDIRECT_PATH}.</p>
      *
-     * If end_session_endpoint is defined the request will be redirected to the end_session_endpoint, the optional
-     * post_logout_redirect_uri parameter will be set if {@link #REDIRECT_PATH} is non-null.
+     * <p>If end_session_endpoint is defined the request will be redirected to the end_session_endpoint, the optional
+     * post_logout_redirect_uri parameter will be set if {@link #REDIRECT_PATH} is non-null.</p>
      *
-     * If the end_session_endpoint is not defined then the request will be redirected to {@link #REDIRECT_PATH} if it is a
-     * non-null value, otherwise no redirection will be done.
+     * <p>If the end_session_endpoint is not defined then the request will be redirected to {@link #REDIRECT_PATH} if it is a
+     * non-null value, otherwise no redirection will be done.</p>
      *
      * @param request the request to redirect.
      */
@@ -366,6 +371,17 @@ public void prepareRequest(ServletRequest request)
         baseRequest.setMethod(method);
     }
 
+    private boolean hasExpiredIdToken(HttpSession session)
+    {
+        if (session != null)
+        {
+            Map<String, Object> claims = (Map)session.getAttribute(CLAIMS);
+            if (claims != null)
+                return OpenIdCredentials.checkExpiry(claims);
+        }
+        return false;
+    }
+
     @Override
     public Authentication validateRequest(ServletRequest req, ServletResponse res, boolean mandatory) throws ServerAuthException
     {
@@ -381,6 +397,17 @@ public Authentication validateRequest(ServletRequest req, ServletResponse res, b
         if (uri == null)
             uri = URIUtil.SLASH;
 
+        HttpSession session = request.getSession(false);
+        if (_openIdConfiguration.isLogoutWhenIdTokenIsExpired() && hasExpiredIdToken(session))
+        {
+            // After logout, fall through to the code below and send another login challenge.
+            logoutWithoutRedirect(request);
+
+            // If we expired a valid authentication we do not want to defer authentication,
+            // we want to try re-authenticate the user.
+            mandatory = true;
+        }
+
         mandatory |= isJSecurityCheck(uri);
         if (!mandatory)
             return new DeferredAuthentication(this);
@@ -391,7 +418,9 @@ public Authentication validateRequest(ServletRequest req, ServletResponse res, b
         try
         {
             // Get the Session.
-            HttpSession session = request.getSession();
+            if (session == null)
+                session = request.getSession(true);
+
             if (request.isRequestedSessionIdFromURL())
             {
                 sendError(request, response, "Session ID must be a cookie to support OpenID authentication");
@@ -464,10 +493,7 @@ public Authentication validateRequest(ServletRequest req, ServletResponse res, b
                 {
                     if (LOG.isDebugEnabled())
                         LOG.debug("auth revoked {}", authentication);
-                    synchronized (session)
-                    {
-                        session.removeAttribute(SessionAuthentication.__J_AUTHENTICATED);
-                    }
+                    logoutWithoutRedirect(request);
                 }
                 else
                 {
@@ -499,10 +525,10 @@ public Authentication validateRequest(ServletRequest req, ServletResponse res, b
                             }
                         }
                     }
+                    if (LOG.isDebugEnabled())
+                        LOG.debug("auth {}", authentication);
+                    return authentication;
                 }
-                if (LOG.isDebugEnabled())
-                    LOG.debug("auth {}", authentication);
-                return authentication;
             }
 
             // If we can't send challenge.
@@ -513,12 +539,11 @@ public Authentication validateRequest(ServletRequest req, ServletResponse res, b
                 return Authentication.UNAUTHENTICATED;
             }
 
-            // Send the the challenge.
+            // Send the challenge.
             String challengeUri = getChallengeUri(baseRequest);
             if (LOG.isDebugEnabled())
                 LOG.debug("challenge {}->{}", session.getId(), challengeUri);
             baseResponse.sendRedirect(challengeUri, true);
-
             return Authentication.SEND_CONTINUE;
         }
         catch (IOException e)