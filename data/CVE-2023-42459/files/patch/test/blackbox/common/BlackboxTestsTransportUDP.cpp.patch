@@ -12,17 +12,23 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-#include "BlackboxTests.hpp"
-
-#include "PubSubReader.hpp"
-#include "PubSubWriter.hpp"
+#include <cstdint>
+#include <fstream>
+#include <mutex>
+#include <set>
+#include <vector>
 
 #include <gtest/gtest.h>
 
 #include <fastdds/rtps/transport/UDPv4TransportDescriptor.h>
 #include <fastdds/rtps/transport/UDPv6TransportDescriptor.h>
-#include <fastrtps/utils/IPFinder.h>
 #include <fastrtps/log/Log.h>
+#include <fastrtps/utils/IPFinder.h>
+
+#include "BlackboxTests.hpp"
+#include "DatagramInjectionTransport.hpp"
+#include "PubSubReader.hpp"
+#include "PubSubWriter.hpp"
 
 using namespace eprosima::fastrtps;
 using namespace eprosima::fastrtps::rtps;
@@ -507,6 +513,43 @@ TEST_P(TransportUDP, whitelisting_udp_localhost_alone)
     }
 }
 
+void deliver_datagram_from_file(
+        const std::set<eprosima::fastdds::rtps::TransportReceiverInterface*>& receivers,
+        const char* filename)
+{
+    std::basic_ifstream<char> file(filename, std::ios::binary | std::ios::in);
+
+    file.seekg(0, file.end);
+    size_t file_size = file.tellg();
+    file.seekg(0, file.beg);
+
+    std::vector<uint8_t> buf(file_size);
+    file.read(reinterpret_cast<char*>(buf.data()), file_size);
+
+    eprosima::fastdds::rtps::Locator loc;
+    for (const auto& rec : receivers)
+    {
+        rec->OnDataReceived(buf.data(), static_cast<uint32_t>(file_size), loc, loc);
+    }
+}
+
+TEST(TransportUDP, DatagramInjection)
+{
+    using eprosima::fastdds::rtps::DatagramInjectionTransportDescriptor;
+
+    auto low_level_transport = std::make_shared<UDPv4TransportDescriptor>();
+    auto transport = std::make_shared<DatagramInjectionTransportDescriptor>(low_level_transport);
+
+    PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);
+    writer.disable_builtin_transport().add_user_transport_to_pparams(transport).init();
+    ASSERT_TRUE(writer.isInitialized());
+
+    auto receivers = transport->get_receivers();
+    ASSERT_FALSE(receivers.empty());
+
+    deliver_datagram_from_file(receivers, "datagrams/16784.bin");
+}
+
 // Test for ==operator UDPTransportDescriptor is not required as it is an abstract class and in UDPv4 is same method
 // Test for copy UDPTransportDescriptor is not required as it is an abstract class and in UDPv4 is same method
 