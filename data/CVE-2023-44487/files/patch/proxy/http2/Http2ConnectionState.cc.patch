@@ -28,6 +28,7 @@
 #include "Http2Frame.h"
 #include "Http2DebugNames.h"
 #include "HttpDebugNames.h"
+#include "TLSSNISupport.h"
 
 #include "tscpp/util/PostScript.h"
 #include "tscpp/util/LocalBuffer.h"
@@ -465,8 +466,8 @@ rcv_priority_frame(Http2ConnectionState &cstate, const Http2Frame &frame)
   // Update PRIORITY frame count per minute
   cstate.increment_received_priority_frame_count();
   // Close this connection if its priority frame count received exceeds a limit
-  if (Http2::max_priority_frames_per_minute != 0 &&
-      cstate.get_received_priority_frame_count() > Http2::max_priority_frames_per_minute) {
+  if (cstate.configured_max_priority_frames_per_minute != 0 &&
+      cstate.get_received_priority_frame_count() > cstate.configured_max_priority_frames_per_minute) {
     HTTP2_INCREMENT_THREAD_DYN_STAT(HTTP2_STAT_MAX_PRIORITY_FRAMES_PER_MINUTE_EXCEEDED, this_ethread());
     Http2StreamDebug(cstate.session, stream_id, "Observed too frequent priority changes: %u priority changes within a last minute",
                      cstate.get_received_priority_frame_count());
@@ -537,6 +538,18 @@ rcv_rst_stream_frame(Http2ConnectionState &cstate, const Http2Frame &frame)
                       "reset frame wrong length");
   }
 
+  // Update RST_STREAM frame count per minute
+  cstate.increment_received_rst_stream_frame_count();
+  // Close this connection if its RST_STREAM frame count exceeds a limit
+  if (cstate.configured_max_rst_stream_frames_per_minute != 0 &&
+      cstate.get_received_rst_stream_frame_count() > cstate.configured_max_rst_stream_frames_per_minute) {
+    HTTP2_INCREMENT_THREAD_DYN_STAT(HTTP2_STAT_MAX_RST_STREAM_FRAMES_PER_MINUTE_EXCEEDED, this_ethread());
+    Http2StreamDebug(cstate.session, stream_id, "Observed too frequent RST_STREAM frames: %u frames within a last minute",
+                     cstate.get_received_settings_frame_count());
+    return Http2Error(Http2ErrorClass::HTTP2_ERROR_CLASS_CONNECTION, Http2ErrorCode::HTTP2_ERROR_ENHANCE_YOUR_CALM,
+                      "reset too frequent RST_STREAM frames");
+  }
+
   if (stream == nullptr || !stream->change_state(frame.header().type, frame.header().flags)) {
     // If a RST_STREAM frame identifying an idle stream is received, the
     // recipient MUST treat this as a connection error of type PROTOCOL_ERROR.
@@ -578,7 +591,8 @@ rcv_settings_frame(Http2ConnectionState &cstate, const Http2Frame &frame)
   // Update SETTIGNS frame count per minute
   cstate.increment_received_settings_frame_count();
   // Close this connection if its SETTINGS frame count exceeds a limit
-  if (cstate.get_received_settings_frame_count() > Http2::max_settings_frames_per_minute) {
+  if (cstate.configured_max_settings_frames_per_minute != 0 &&
+      cstate.get_received_settings_frame_count() > cstate.configured_max_settings_frames_per_minute) {
     HTTP2_INCREMENT_THREAD_DYN_STAT(HTTP2_STAT_MAX_SETTINGS_FRAMES_PER_MINUTE_EXCEEDED, this_ethread());
     Http2StreamDebug(cstate.session, stream_id, "Observed too frequent SETTINGS frames: %u frames within a last minute",
                      cstate.get_received_settings_frame_count());
@@ -712,7 +726,8 @@ rcv_ping_frame(Http2ConnectionState &cstate, const Http2Frame &frame)
   // Update PING frame count per minute
   cstate.increment_received_ping_frame_count();
   // Close this connection if its ping count received exceeds a limit
-  if (cstate.get_received_ping_frame_count() > Http2::max_ping_frames_per_minute) {
+  if (cstate.configured_max_ping_frames_per_minute != 0 &&
+      cstate.get_received_ping_frame_count() > cstate.configured_max_ping_frames_per_minute) {
     HTTP2_INCREMENT_THREAD_DYN_STAT(HTTP2_STAT_MAX_PING_FRAMES_PER_MINUTE_EXCEEDED, this_ethread());
     Http2StreamDebug(cstate.session, stream_id, "Observed too frequent PING frames: %u PING frames within a last minute",
                      cstate.get_received_ping_frame_count());
@@ -1073,6 +1088,25 @@ Http2ConnectionState::init(Http2CommonSession *ssn)
     dependency_tree = new DependencyTree(Http2::max_concurrent_streams_in);
   }
 
+  configured_max_settings_frames_per_minute   = Http2::max_settings_frames_per_minute;
+  configured_max_ping_frames_per_minute       = Http2::max_ping_frames_per_minute;
+  configured_max_priority_frames_per_minute   = Http2::max_priority_frames_per_minute;
+  configured_max_rst_stream_frames_per_minute = Http2::max_rst_stream_frames_per_minute;
+  if (auto snis = dynamic_cast<TLSSNISupport *>(session->get_netvc()); snis) {
+    if (snis->hints_from_sni.http2_max_settings_frames_per_minute.has_value()) {
+      configured_max_settings_frames_per_minute = snis->hints_from_sni.http2_max_settings_frames_per_minute.value();
+    }
+    if (snis->hints_from_sni.http2_max_ping_frames_per_minute.has_value()) {
+      configured_max_ping_frames_per_minute = snis->hints_from_sni.http2_max_ping_frames_per_minute.value();
+    }
+    if (snis->hints_from_sni.http2_max_priority_frames_per_minute.has_value()) {
+      configured_max_priority_frames_per_minute = snis->hints_from_sni.http2_max_priority_frames_per_minute.value();
+    }
+    if (snis->hints_from_sni.http2_max_rst_stream_frames_per_minute.has_value()) {
+      configured_max_rst_stream_frames_per_minute = snis->hints_from_sni.http2_max_rst_stream_frames_per_minute.value();
+    }
+  }
+
   _cop = ActivityCop<Http2Stream>(this->mutex, &stream_list, 1);
   _cop.start();
 }
@@ -2094,6 +2128,18 @@ Http2ConnectionState::get_received_priority_frame_count()
   return this->_received_priority_frame_counter.get_count();
 }
 
+void
+Http2ConnectionState::increment_received_rst_stream_frame_count()
+{
+  this->_received_rst_stream_frame_counter.increment();
+}
+
+uint32_t
+Http2ConnectionState::get_received_rst_stream_frame_count()
+{
+  return this->_received_rst_stream_frame_counter.get_count();
+}
+
 // Return min_concurrent_streams_in when current client streams number is larger than max_active_streams_in.
 // Main purpose of this is preventing DDoS Attacks.
 unsigned