@@ -74,12 +74,19 @@ def get_config(*, section: str | None = None) -> Response:
         "application/json": _config_to_json,
     }
     return_type = request.accept_mimetypes.best_match(serializer.keys())
+    if conf.get("webserver", "expose_config").lower() == "non-sensitive-only":
+        expose_config = True
+        display_sensitive = False
+    else:
+        expose_config = conf.getboolean("webserver", "expose_config")
+        display_sensitive = True
+
     if return_type not in serializer:
         return Response(status=HTTPStatus.NOT_ACCEPTABLE)
-    elif conf.getboolean("webserver", "expose_config"):
+    elif expose_config:
         if section and not conf.has_section(section):
             raise NotFound("section not found.", detail=f"section={section} not found.")
-        conf_dict = conf.as_dict(display_source=False, display_sensitive=True)
+        conf_dict = conf.as_dict(display_source=False, display_sensitive=display_sensitive)
         if section:
             conf_section_value = conf_dict[section]
             conf_dict.clear()
@@ -103,14 +110,24 @@ def get_value(section: str, option: str) -> Response:
         "application/json": _config_to_json,
     }
     return_type = request.accept_mimetypes.best_match(serializer.keys())
+    if conf.get("webserver", "expose_config").lower() == "non-sensitive-only":
+        expose_config = True
+    else:
+        expose_config = conf.getboolean("webserver", "expose_config")
+
     if return_type not in serializer:
         return Response(status=HTTPStatus.NOT_ACCEPTABLE)
-    elif conf.getboolean("webserver", "expose_config"):
+    elif expose_config:
         if not conf.has_option(section, option):
             raise NotFound(
                 "Config not found.", detail=f"The option [{section}/{option}] is not found in config."
             )
-        value = conf.get(section, option)
+
+        print(conf.sensitive_config_values)
+        if (section, option) in conf.sensitive_config_values:
+            value = "< hidden >"
+        else:
+            value = conf.get(section, option)
 
         config = Config(
             sections=[ConfigSection(name=section, options=[ConfigOption(key=option, value=value)])]