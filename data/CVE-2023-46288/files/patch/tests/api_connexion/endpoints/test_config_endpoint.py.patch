@@ -35,6 +35,14 @@
     },
 }
 
+MOCK_CONF_WITH_SENSITIVE_VALUE = {
+    "core": {"parallelism": "1024", "sql_alchemy_conn": "mock_conn"},
+    "smtp": {
+        "smtp_host": "localhost",
+        "smtp_mail_from": "airflow@example.com",
+    },
+}
+
 
 @pytest.fixture(scope="module")
 def configured_app(minimal_app_for_api):
@@ -65,6 +73,27 @@ def test_should_respond_200_text_plain(self, mock_as_dict):
         response = self.client.get(
             "/api/v1/config", headers={"Accept": "text/plain"}, environ_overrides={"REMOTE_USER": "test"}
         )
+        mock_as_dict.assert_called_with(display_source=False, display_sensitive=True)
+        assert response.status_code == 200
+        expected = textwrap.dedent(
+            """\
+        [core]
+        parallelism = 1024
+
+        [smtp]
+        smtp_host = localhost
+        smtp_mail_from = airflow@example.com
+        """
+        )
+        assert expected == response.data.decode()
+
+    @patch("airflow.api_connexion.endpoints.config_endpoint.conf.as_dict", return_value=MOCK_CONF)
+    @conf_vars({("webserver", "expose_config"): "non-sensitive-only"})
+    def test_should_respond_200_text_plain_with_non_sensitive_only(self, mock_as_dict):
+        response = self.client.get(
+            "/api/v1/config", headers={"Accept": "text/plain"}, environ_overrides={"REMOTE_USER": "test"}
+        )
+        mock_as_dict.assert_called_with(display_source=False, display_sensitive=False)
         assert response.status_code == 200
         expected = textwrap.dedent(
             """\
@@ -85,6 +114,7 @@ def test_should_respond_200_application_json(self, mock_as_dict):
             headers={"Accept": "application/json"},
             environ_overrides={"REMOTE_USER": "test"},
         )
+        mock_as_dict.assert_called_with(display_source=False, display_sensitive=True)
         assert response.status_code == 200
         expected = {
             "sections": [
@@ -112,6 +142,7 @@ def test_should_respond_200_single_section_as_text_plain(self, mock_as_dict):
             headers={"Accept": "text/plain"},
             environ_overrides={"REMOTE_USER": "test"},
         )
+        mock_as_dict.assert_called_with(display_source=False, display_sensitive=True)
         assert response.status_code == 200
         expected = textwrap.dedent(
             """\
@@ -129,6 +160,7 @@ def test_should_respond_200_single_section_as_json(self, mock_as_dict):
             headers={"Accept": "application/json"},
             environ_overrides={"REMOTE_USER": "test"},
         )
+        mock_as_dict.assert_called_with(display_source=False, display_sensitive=True)
         assert response.status_code == 200
         expected = {
             "sections": [
@@ -210,6 +242,26 @@ def test_should_respond_200_text_plain(self, mock_as_dict):
         )
         assert expected == response.data.decode()
 
+    @patch(
+        "airflow.api_connexion.endpoints.config_endpoint.conf.as_dict",
+        return_value=MOCK_CONF_WITH_SENSITIVE_VALUE,
+    )
+    @conf_vars({("webserver", "expose_config"): "non-sensitive-only"})
+    def test_should_respond_200_text_plain_with_non_sensitive_only(self, mock_as_dict):
+        response = self.client.get(
+            "/api/v1/config/section/core/option/sql_alchemy_conn",
+            headers={"Accept": "text/plain"},
+            environ_overrides={"REMOTE_USER": "test"},
+        )
+        assert response.status_code == 200
+        expected = textwrap.dedent(
+            """\
+        [core]
+        sql_alchemy_conn = < hidden >
+        """
+        )
+        assert expected == response.data.decode()
+
     @patch("airflow.api_connexion.endpoints.config_endpoint.conf.as_dict", return_value=MOCK_CONF)
     def test_should_respond_200_application_json(self, mock_as_dict):
         response = self.client.get(