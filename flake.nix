{
  description = "Impure Python environment flake";

  inputs.nixpkgs.url = "github:NixOS/nixpkgs/nixos-23.05";
  

  outputs = { self, nixpkgs }:
    let
    
        system = "x86_64-linux";
        pkgs = nixpkgs.legacyPackages.${system};
        pythonPackages = pkgs.python310Packages;

      impurePythonEnv = pkgs.mkShell rec {
        name = "impurePythonEnv";
        venvDir = "./.venv";
        buildInputs = [
          # rust
          pkgs.clang
          pkgs.llvmPackages.bintools
          pkgs.rustup

          pkgs.zip
          pkgs.unzip

           # plotter
            pkgs.pkg-config 
            pkgs.fontconfig
            pkgs.freetype
            pkgs.openssl.dev

          # python env
          pythonPackages.python
          pythonPackages.venvShellHook
          pkgs.autoPatchelfHook
          
          # python packages

          pythonPackages.python-dotenv
          pythonPackages.requests
          pythonPackages.psycopg2

          pythonPackages.tqdm

          # dependances

          # github
          pkgs.gh # github cli


          # sqlite
          pkgs.sqlite
        ];

         RUSTC_VERSION = pkgs.lib.readFile ./rust-toolchain;
        LIBCLANG_PATH = pkgs.lib.makeLibraryPath [ pkgs.llvmPackages_latest.libclang.lib ];

        postVenvCreation = ''
          unset SOURCE_DATE_EPOCH
          pip install -r requirements.txt
          autoPatchelf ./venv
        '';

        postShellHook = ''
          unset SOURCE_DATE_EPOCH
          export PATH=$PATH:''${CARGO_HOME:-~/.cargo}/bin
          export PATH=$PATH:''${RUSTUP_HOME:-~/.rustup}/toolchains/$RUSTC_VERSION-x86_64-unknown-linux-gnu/bin/
        '';

         RUSTFLAGS = (builtins.map (a: ''-L ${a}/lib'') [
            # add libraries here
            
          ]);

          BINDGEN_EXTRA_CLANG_ARGS = 
            (builtins.map (a: ''-I"${a}/include"'') [
              pkgs.pkg-config 
              pkgs.openssl.dev
              pkgs.glibc.dev 
              pkgs.fontconfig.dev
              pkgs.freetype.dev
            ])
            ++ [
              ''-I"${pkgs.llvmPackages_latest.libclang.lib}/lib/clang/${pkgs.llvmPackages_latest.libclang.version}/include"''
              ''-I"${pkgs.glib.dev}/include/glib-2.0"''
              ''-I${pkgs.glib.out}/lib/glib-2.0/include/''
            ];
      };

    in {
      # Expose the environment as a default package
      defaultPackage.x86_64-linux = impurePythonEnv;
      # Expose the environment as a default shell
      devShells.x86_64-linux.default = impurePythonEnv;
    };
}