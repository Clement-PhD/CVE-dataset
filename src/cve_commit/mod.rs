use std::path::Path;

use walkdir::WalkDir;

use crate::language::Language;

use self::cve_commit_file_patched::CveCommitFilePatched;

pub mod cve_commit_file_patched;
pub mod cve_metadata;


/// represent a Commit for a cve with all the patched files
pub struct CveCommit {
    pub cve_id: String,
    pub files: Vec<CveCommitFilePatched>,
}



impl CveCommit {
    /// INFO : All the file in a commit are patched !
    pub fn new<P: AsRef<Path>>(cve_id: &str, data_folder: P) -> CveCommit {
        let data_folder_path = data_folder.as_ref();
        let cve_folder_path = data_folder_path.join(cve_id);
        let files_folder_path = cve_folder_path.join("files");
        let patch_folder_path = files_folder_path.join("patch");

        let mut files: Vec<CveCommitFilePatched> = vec![];

        for entry in WalkDir::new(patch_folder_path.clone()) {
            if let Ok(entry) = entry {
                if !entry.file_type().is_file() {
                    continue;
                }
                let path = entry.path();
        
                // Relative path inside the patch_folder_path
                let patch_file_path_inside = path.strip_prefix(patch_folder_path.clone()).unwrap();
        
                let pull_request_file_patched = 
                    CveCommitFilePatched::new(cve_id, patch_file_path_inside.to_str().unwrap(), data_folder_path);
        
                files.push(pull_request_file_patched);
            } else {
                // Not an entry, continue
            }
        }
        

        CveCommit {
            cve_id: cve_id.to_string(),
            files,
        }
    }

    pub fn has_file_of_language(&self, language: &Language) -> bool {
        for file in &self.files {
            if  file.language.is_some() && file.language.as_ref().unwrap() == language{
                return true;
            }
        }
        return false;
    }
}


#[cfg(test)]
mod tests {

    use crate::params::{TEST_CVE_ID, TEST_DATA_FOLDER};

    use super::*;

    

    #[test]
    fn test_pull_request() {
        let pull_request = CveCommit::new(TEST_CVE_ID, TEST_DATA_FOLDER);

        assert_eq!(pull_request.cve_id, TEST_CVE_ID);
        assert_eq!(pull_request.files.len(), 16);

    }
}