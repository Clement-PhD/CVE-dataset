use std::path::Path;

use crate::language::Language;

use self::cve_commit_file_patched::CveCommitFilePatched;

pub mod cve_commit_file_patched;


/// represent a Commit for a cve with all the patched files
#[derive(Debug)]
pub struct CveCommit {
    pub cve_id: String,
    pub files: Vec<CveCommitFilePatched>,
}



impl CveCommit {
    
    pub fn has_file_of_language(&self, language: &Language) -> bool {
        for file in &self.files {
            if  file.language.is_some() && file.language.as_ref().unwrap() == language{
                return true;
            }
        }
        return false;
    }


    pub fn new_from_zip<P: AsRef<Path>>(zip_path: P) -> CveCommit {
        let cve_id = zip_path.as_ref().file_stem().unwrap().to_str().unwrap();
        let mut zip = zip::ZipArchive::new(std::fs::File::open(&zip_path).unwrap()).unwrap();

        // list all files in the patch folder
        let mut file_patch_names: Vec<String> = vec![];
        for file_path_str in zip.file_names() {
            if file_path_str.contains("/patch/") {
                file_patch_names.push(file_path_str.to_string());
            }
        }

        let files: Vec<CveCommitFilePatched> = file_patch_names.iter().flat_map(|file_patch_name| {
            CveCommitFilePatched::from_zip(file_patch_name, &mut zip)
        }).collect();


        CveCommit {
            cve_id: cve_id.to_string(),
            files,
        }
    }
}