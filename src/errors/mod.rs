use std::io;

use serde_derive::{Deserialize, Serialize};





/// Errors that can occur when working with the CVE metadata
#[derive(Debug)]
pub enum CveMeatadataErrors {
    /// An IO error occurred whith the file String
    IoError(io::Error, String),
    /// an error with the data
    CveMeatadataWithDataError(CveMeatadataWithDataError),
}

impl From<CveMeatadataWithDataError> for CveMeatadataErrors {
    fn from(e: CveMeatadataWithDataError) -> Self {
        CveMeatadataErrors::CveMeatadataWithDataError(e)
    }
}


impl std::fmt::Display for CveMeatadataErrors {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            CveMeatadataErrors::IoError(e, s) => write!(f, "An IO error occurred with the file {}: {}", s, e),
            CveMeatadataErrors::CveMeatadataWithDataError(e) => write!(f, "{}", e)
        }
    }
}


#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum CveMeatadataWithDataError {
    /// The commit data is not present (crawling error)
    NoCommitData,
    /// Their is no merge commit sha
    NoMergeCommitSha,
    /// their is no language specified in the repo metadata
    NoLanguage,
    /// the language is not supported
    UnsupportedLanguage
}

impl std::fmt::Display for CveMeatadataWithDataError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            CveMeatadataWithDataError::NoCommitData => write!(f, "The commit data is not present (crawling error)"),
            CveMeatadataWithDataError::NoMergeCommitSha => write!(f, "Their is no merge commit sha"),
            CveMeatadataWithDataError::NoLanguage => write!(f, "Their is no language specified in the repo metadata"),
            CveMeatadataWithDataError::UnsupportedLanguage => write!(f, "The language is not supported")
        }
    }
}