use std::path::Path;

use cve_commit::cve_metadata::CveMetadata;
use cve_commit::CveCommit;


pub mod cve_commit;
pub mod patch;
pub mod language;
pub mod errors;
mod params;

/// Load all cves data from a folder containing cve data
pub fn load_from_folder<P: AsRef<Path>>(folder_path: P) -> Vec<CveCommit> {
    let mut cve_commits : Vec<CveCommit> = vec![];

    for entry in folder_path.as_ref().read_dir().unwrap() {
        if let Ok(entry) = entry {

            if let Ok(file_type) = entry.file_type() {
                if file_type.is_dir() {
                    let cve_data_folder = entry.path();
                    let cve_id = cve_data_folder.file_name().unwrap().to_str().unwrap();
                    let cve_commit = CveCommit::new(cve_id, &cve_data_folder);
                    cve_commits.push(cve_commit);
                }
                
            }
        }
    }

    cve_commits
}

/// load all metadata from the data folder (skip cve who cannot be parsed)
pub fn load_cve_metadata_from_folder<P: AsRef<Path>>(folder_path: P) -> (Vec<CveMetadata>, Vec<(String, errors::CveMeatadataWithDataError)>) {
    let mut cve_metadatas : Vec<CveMetadata> = vec![];
    let mut cve_errors : Vec<(String, errors::CveMeatadataWithDataError)> = vec![];
    let folder_path = folder_path.as_ref();

    for entry in folder_path.read_dir().unwrap() {
        if let Ok(entry) = entry {
            if let Ok(file_type) = entry.file_type() {
                if file_type.is_dir() {
                    let cve_data_folder = entry.path();
                    let cve_metadata_option = CveMetadata::from_cve_folder(&cve_data_folder);
                    if cve_metadata_option.is_err() {
                        let err = cve_metadata_option.as_ref().unwrap_err();
                        match err {
                            errors::CveMeatadataErrors::IoError(_, _) => {
                                panic!("{}", err);
                            },
                            errors::CveMeatadataErrors::CveMeatadataWithDataError(e) => {
                                cve_errors.push((cve_data_folder.file_name().unwrap().to_str().unwrap().to_string(), e.clone()));
                            }
                        }
                    }else{
                        cve_metadatas.push(cve_metadata_option.unwrap());
                    }
                }
            }
        }
    }

    (cve_metadatas, cve_errors)
}

/// Load all cves metadata from the data folder (inside the binary)
#[cfg(feature = "include-data")]
pub fn load_cve_metadata() -> Vec<CveMetadata> {
    load_cve_metadata_from_folder("data/")
}

/// Load all cves data from the data folder (inside the binary)
#[cfg(feature = "include-data")]
pub fn load_cve_data() -> Vec<CveCommit> {
    load_from_folder("data/")
}

